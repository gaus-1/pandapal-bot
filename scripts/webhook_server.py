"""
üåê WEBHOOK –°–ï–†–í–ï–† –î–õ–Ø RENDER
–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã 24/7
"""

import asyncio
import json
import os
from typing import Any, Dict

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import ClientSession, web
from loguru import logger

from bot.config import settings
from bot.handlers import routers
from bot.services.bot_24_7_service import Bot24_7Service
from bot.services.health_monitor import health_monitor

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot: Bot = None
dp: Dispatcher = None
bot_24_7_service: Bot24_7Service = None


async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global bot, dp, bot_24_7_service

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=settings.telegram_bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for router in routers:
        dp.include_router(router)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ 24/7
    bot_24_7_service = Bot24_7Service(bot, dp)

    logger.info("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")


async def on_startup(app: web.Application):
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    await init_bot()

    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        await health_monitor.start_monitoring()
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands(
        [
            {"command": "start", "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
            {"command": "help", "description": "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"},
            {"command": "status", "description": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã 24/7"},
            {"command": "health", "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"},
            {"command": "ai_status", "description": "–°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"},
            {"command": "admin", "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"},
        ]
    )

    logger.success("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


async def on_shutdown(app: web.Application):
    """–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        await health_monitor.stop_monitoring()
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ 24/7
    if bot_24_7_service:
        try:
            await bot_24_7_service.stop_24_7_mode()
            logger.info("ü§ñ –°–µ—Ä–≤–∏—Å 24/7 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ 24/7: {e}")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
    if bot:
        await bot.session.close()

    logger.success("üëã Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def health_check_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        system_healthy = True
        details = {}

        if bot_24_7_service:
            health_status = bot_24_7_service.get_health_status()
            system_healthy = health_status["is_running"]
            details["bot_status"] = health_status
        else:
            system_healthy = False
            details["error"] = "Bot 24/7 service not initialized"

        if health_monitor:
            health_info = health_monitor.get_overall_health()
            details["services_health"] = health_info
            if health_info["overall_status"] != "healthy":
                system_healthy = False

        response_data = {
            "status": "healthy" if system_healthy else "unhealthy",
            "timestamp": asyncio.get_event_loop().time(),
            "details": details,
        }

        status_code = 200 if system_healthy else 503

        return web.json_response(response_data, status=status_code)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)


async def webhook_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = await request.json()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π webhook
        update_id = data.get("update_id", "unknown")
        logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: update_id={update_id}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å 24/7
        if bot_24_7_service and bot_24_7_service.health.is_running:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            from datetime import datetime

            from bot.services.bot_24_7_service import QueuedMessage

            queued_msg = QueuedMessage(
                update_id=update_id,
                update_data=data,
                timestamp=datetime.now(),
                priority=1,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è webhook
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
            if len(bot_24_7_service.message_queue) < bot_24_7_service.max_queue_size:
                bot_24_7_service.message_queue.append(queued_msg)
                logger.debug(f"‚úÖ Webhook –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            else:
                logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å webhook –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
                return web.Response(status=503)
        else:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å 24/7 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é")

            # –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ dispatcher
            from aiogram.types import Update

            update = Update.model_validate(data)
            await dp.feed_update(bot, update)

        return web.Response(status=200)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(status=500)


async def status_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status_data = {}

        if bot_24_7_service:
            status_data["bot_24_7"] = bot_24_7_service.get_health_status()

        if health_monitor:
            status_data["health_monitor"] = health_monitor.get_overall_health()

        return web.json_response(status_data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)


def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.router.add_get("/health", health_check_handler)
    app.router.add_post("/webhook", webhook_handler)
    app.router.add_get("/status", status_handler)

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
    app.router.add_get("/", lambda request: web.Response(text="PandaPal Bot Webhook Server"))

    return app


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üåê –ó–∞–ø—É—Å–∫ PandaPal Webhook Server...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL
    webhook_url = f"https://pandapal-bot.onrender.com/webhook"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    port = int(os.getenv("PORT", "8000"))

    logger.info(f"üîó Webhook URL: {webhook_url}")
    logger.info(f"üåê –ü–æ—Ä—Ç: {port}")

    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()

        site = web.TCPSite(runner, "0.0.0.0", port)
        await site.start()

        logger.success(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        logger.info(f"üéØ –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å webhook –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            await runner.cleanup()
        except Exception:
            pass


if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

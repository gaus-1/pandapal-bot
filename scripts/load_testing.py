"""
–°–∫—Ä–∏–ø—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è PandaPal Bot.

–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π, –Ω–µ –Ω–∞—Ä—É—à–∞—è —Ä–∞–±–æ—Ç—É production.
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI API, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ production)
- –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
- Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

import argparse
import asyncio
import json
import os
import statistics
import time
from dataclasses import asdict, dataclass
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

import aiohttp
from loguru import logger


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""

    test_name: str
    success: bool
    response_time_ms: float
    status_code: Optional[int] = None
    error_message: Optional[str] = None
    response_size_bytes: Optional[int] = None


@dataclass
class LoadTestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    base_url: str = "http://localhost:8000"
    concurrent_users: int = 10
    requests_per_user: int = 10
    test_duration_seconds: int = 60
    ramp_up_seconds: int = 10
    timeout_seconds: int = 30

    # Endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints: List[str] = None

    def __post_init__(self):
        if self.endpoints is None:
            self.endpoints = [
                "/api/v1/health",
                "/api/v1/analytics/metrics",
            ]


class LoadTester:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.
    """

    def __init__(self, config: LoadTestConfig):
        self.config = config
        self.results: List[TestResult] = []
        self.start_time: Optional[float] = None
        self.end_time: Optional[float] = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests = 0
        self.successful_requests = 0
        self.failed_requests = 0

        logger.info(f"üß™ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
        logger.info(f"  - URL: {config.base_url}")
        logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {config.concurrent_users}")
        logger.info(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {config.requests_per_user}")
        logger.info(f"  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.test_duration_seconds}—Å")

    async def test_endpoint(self, session: aiohttp.ClientSession, endpoint: str) -> TestResult:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ endpoint.

        Args:
            session: HTTP —Å–µ—Å—Å–∏—è
            endpoint: URL endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            TestResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        """
        url = f"{self.config.base_url}{endpoint}"
        start_time = time.time()

        try:
            async with session.get(url, timeout=self.config.timeout_seconds) as response:
                response_time = (time.time() - start_time) * 1000
                response_text = await response.text()

                return TestResult(
                    test_name=endpoint,
                    success=200 <= response.status < 400,
                    response_time_ms=response_time,
                    status_code=response.status,
                    response_size_bytes=len(response_text.encode("utf-8")),
                )

        except asyncio.TimeoutError:
            response_time = (time.time() - start_time) * 1000
            return TestResult(
                test_name=endpoint,
                success=False,
                response_time_ms=response_time,
                error_message="Timeout",
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            return TestResult(
                test_name=endpoint,
                success=False,
                response_time_ms=response_time,
                error_message=str(e),
            )

    async def simulate_user(self, user_id: int) -> List[TestResult]:
        """
        –°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            List[TestResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_results = []

        async with aiohttp.ClientSession() as session:
            for request_num in range(self.config.requests_per_user):
                # –í—ã–±–∏—Ä–∞–µ–º endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                endpoint = self.config.endpoints[request_num % len(self.config.endpoints)]

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint
                result = await self.test_endpoint(session, endpoint)
                result.test_name = f"user_{user_id}_{result.test_name}"
                user_results.append(result)

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)

        return user_results

    async def run_load_test(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        self.start_time = time.time()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tasks = []
        for user_id in range(self.config.concurrent_users):
            task = asyncio.create_task(self.simulate_user(user_id))
            tasks.append(task)

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ (ramp-up)
            if user_id < self.config.concurrent_users - 1:
                await asyncio.sleep(self.config.ramp_up_seconds / self.config.concurrent_users)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        try:
            await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=self.config.test_duration_seconds,
            )
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")

        self.end_time = time.time()

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for task in tasks:
            if not task.done():
                task.cancel()
            else:
                try:
                    user_results = task.result()
                    if isinstance(user_results, list):
                        self.results.extend(user_results)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return self.analyze_results()

    def analyze_results(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            Dict[str, Any]: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        if not self.results:
            return {"error": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests = len(self.results)
        self.successful_requests = sum(1 for r in self.results if r.success)
        self.failed_requests = self.total_requests - self.successful_requests

        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_times = [r.response_time_ms for r in self.results]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint'–∞–º
        endpoint_stats = {}
        for result in self.results:
            endpoint = (
                result.test_name.split("_", 2)[-1] if "_" in result.test_name else result.test_name
            )
            if endpoint not in endpoint_stats:
                endpoint_stats[endpoint] = {
                    "total_requests": 0,
                    "successful_requests": 0,
                    "response_times": [],
                    "errors": [],
                }

            endpoint_stats[endpoint]["total_requests"] += 1
            if result.success:
                endpoint_stats[endpoint]["successful_requests"] += 1
                endpoint_stats[endpoint]["response_times"].append(result.response_time_ms)
            else:
                endpoint_stats[endpoint]["errors"].append(result.error_message)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
        for endpoint, stats in endpoint_stats.items():
            if stats["response_times"]:
                stats["avg_response_time_ms"] = statistics.mean(stats["response_times"])
                stats["min_response_time_ms"] = min(stats["response_times"])
                stats["max_response_time_ms"] = max(stats["response_times"])
                stats["median_response_time_ms"] = statistics.median(stats["response_times"])
                if len(stats["response_times"]) > 1:
                    stats["std_deviation_ms"] = statistics.stdev(stats["response_times"])

            stats["success_rate_percent"] = (
                stats["successful_requests"] / stats["total_requests"]
            ) * 100

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        test_duration = self.end_time - self.start_time if self.end_time and self.start_time else 0
        requests_per_second = self.total_requests / test_duration if test_duration > 0 else 0

        analysis = {
            "test_config": asdict(self.config),
            "test_summary": {
                "total_requests": self.total_requests,
                "successful_requests": self.successful_requests,
                "failed_requests": self.failed_requests,
                "success_rate_percent": (self.successful_requests / self.total_requests) * 100,
                "test_duration_seconds": test_duration,
                "requests_per_second": requests_per_second,
                "concurrent_users": self.config.concurrent_users,
            },
            "response_time_stats": (
                {
                    "avg_response_time_ms": statistics.mean(response_times),
                    "min_response_time_ms": min(response_times),
                    "max_response_time_ms": max(response_times),
                    "median_response_time_ms": statistics.median(response_times),
                    "p95_response_time_ms": self._percentile(response_times, 95),
                    "p99_response_time_ms": self._percentile(response_times, 99),
                }
                if response_times
                else {}
            ),
            "endpoint_stats": endpoint_stats,
            "test_timestamp": datetime.now().isoformat(),
        }

        return analysis

    def _percentile(self, data: List[float], percentile: int) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è."""
        if not data:
            return 0.0

        sorted_data = sorted(data)
        index = (percentile / 100) * (len(sorted_data) - 1)

        if index.is_integer():
            return sorted_data[int(index)]
        else:
            lower = sorted_data[int(index)]
            upper = sorted_data[int(index) + 1]
            return lower + (upper - lower) * (index - int(index))

    def generate_report(self, analysis: Dict[str, Any], output_file: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            output_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞

        Returns:
            str: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        report_lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report_lines.append("=" * 80)
        report_lines.append("üß™ –û–¢–ß–ï–¢ –û –ù–ê–ì–†–£–ó–û–ß–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò PANDA PAL BOT")
        report_lines.append("=" * 80)
        report_lines.append(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {analysis['test_timestamp']}")
        report_lines.append("")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
        config = analysis["test_config"]
        report_lines.append("üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ê:")
        report_lines.append(f"  URL: {config['base_url']}")
        report_lines.append(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {config['concurrent_users']}")
        report_lines.append(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {config['requests_per_user']}")
        report_lines.append(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config['test_duration_seconds']}—Å")
        report_lines.append("")

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = analysis["test_summary"]
        report_lines.append("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report_lines.append(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['total_requests']}")
        report_lines.append(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['successful_requests']}")
        report_lines.append(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['failed_requests']}")
        report_lines.append(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate_percent']:.2f}%")
        report_lines.append(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {summary['test_duration_seconds']:.2f}—Å")
        report_lines.append(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {summary['requests_per_second']:.2f}")
        report_lines.append("")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if "response_time_stats" in analysis and analysis["response_time_stats"]:
            rt_stats = analysis["response_time_stats"]
            report_lines.append("‚è±Ô∏è –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:")
            report_lines.append(f"  –°—Ä–µ–¥–Ω–µ–µ: {rt_stats['avg_response_time_ms']:.2f}–º—Å")
            report_lines.append(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {rt_stats['min_response_time_ms']:.2f}–º—Å")
            report_lines.append(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {rt_stats['max_response_time_ms']:.2f}–º—Å")
            report_lines.append(f"  –ú–µ–¥–∏–∞–Ω–∞: {rt_stats['median_response_time_ms']:.2f}–º—Å")
            report_lines.append(f"  95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {rt_stats['p95_response_time_ms']:.2f}–º—Å")
            report_lines.append(f"  99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {rt_stats['p99_response_time_ms']:.2f}–º—Å")
            report_lines.append("")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ endpoint'–∞–º
        if "endpoint_stats" in analysis:
            report_lines.append("üîó –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û ENDPOINT'–ê–ú:")
            for endpoint, stats in analysis["endpoint_stats"].items():
                report_lines.append(f"  {endpoint}:")
                report_lines.append(f"    –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
                report_lines.append(f"    –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}")
                report_lines.append(f"    –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate_percent']:.2f}%")
                if "avg_response_time_ms" in stats:
                    report_lines.append(
                        f"    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time_ms']:.2f}–º—Å"
                    )
                if stats["errors"]:
                    report_lines.append(f"    –û—à–∏–±–∫–∏: {len(set(stats['errors']))}")
                report_lines.append("")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report_lines.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if summary["success_rate_percent"] < 95:
            report_lines.append("  ‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        if (
            "response_time_stats" in analysis
            and analysis["response_time_stats"]["avg_response_time_ms"] > 1000
        ):
            report_lines.append("  ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        if summary["requests_per_second"] < 10:
            report_lines.append("  ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã")

        if summary["success_rate_percent"] >= 95 and summary["requests_per_second"] >= 10:
            report_lines.append("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

        report_lines.append("")
        report_lines.append("=" * 80)

        report_text = "\n".join(report_lines)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        if output_file:
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(report_text)
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")

        return report_text


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    parser = argparse.ArgumentParser(description="–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PandaPal Bot")
    parser.add_argument(
        "--url", default="http://localhost:8000", help="–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    parser.add_argument(
        "--users", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    parser.add_argument("--requests", type=int, default=10, help="–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("--duration", type=int, default=60, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--output", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
    parser.add_argument("--endpoints", nargs="+", help="–°–ø–∏—Å–æ–∫ endpoint'–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = LoadTestConfig(
        base_url=args.url,
        concurrent_users=args.users,
        requests_per_user=args.requests,
        test_duration_seconds=args.duration,
    )

    if args.endpoints:
        config.endpoints = args.endpoints

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = LoadTester(config)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        analysis = await tester.run_load_test()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        output_file = (
            args.output or f"load_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        )
        report = tester.generate_report(analysis, output_file)

        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n" + report)

        logger.info("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.remove()
    logger.add(
        lambda msg: print(msg, end=""),
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        level="INFO",
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())

"""
–ü—Ä–æ—Å—Ç–æ–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PandaPal
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/analytics_dashboard.py
"""

import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()


def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    engine = create_engine(DATABASE_URL)
    
    try:
        with engine.connect() as conn:
            print("\n" + "=" * 70)
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê PANDAPAL".center(70))
            print("=" * 70)
            print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
            print("=" * 70)
            
            # ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==========
            total_users = conn.execute(text("SELECT COUNT(*) FROM users")).scalar() or 0
            active_users = conn.execute(
                text("SELECT COUNT(*) FROM users WHERE is_active = true")
            ).scalar() or 0
            
            # –ü–æ —Ç–∏–ø–∞–º
            children = conn.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'child'")
            ).scalar() or 0
            parents = conn.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'parent'")
            ).scalar() or 0
            teachers = conn.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'teacher'")
            ).scalar() or 0
            
            # –ù–æ–≤—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            week_ago = datetime.now() - timedelta(days=7)
            new_users_week = conn.execute(
                text("SELECT COUNT(*) FROM users WHERE created_at >= :week_ago"),
                {"week_ago": week_ago}
            ).scalar() or 0
            
            print(f"\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
            print(f"   –í—Å–µ–≥–æ:              {total_users:>6}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö:           {active_users:>6}")
            print(f"   –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:    {new_users_week:>6}")
            print(f"\n   –ü–æ —Ç–∏–ø–∞–º:")
            print(f"   ‚Ä¢ –î–µ—Ç–∏:             {children:>6}")
            print(f"   ‚Ä¢ –†–æ–¥–∏—Ç–µ–ª–∏:         {parents:>6}")
            print(f"   ‚Ä¢ –£—á–∏—Ç–µ–ª—è:          {teachers:>6}")
            
            # ========== –°–û–û–ë–©–ï–ù–ò–Ø ==========
            total_messages = conn.execute(text("SELECT COUNT(*) FROM chat_history")).scalar() or 0
            
            today = datetime.now().date()
            messages_today = conn.execute(
                text("SELECT COUNT(*) FROM chat_history WHERE DATE(timestamp) = :today"),
                {"today": today}
            ).scalar() or 0
            
            messages_week = conn.execute(
                text("SELECT COUNT(*) FROM chat_history WHERE timestamp >= :week_ago"),
                {"week_ago": week_ago}
            ).scalar() or 0
            
            user_msgs = conn.execute(
                text("SELECT COUNT(*) FROM chat_history WHERE message_type = 'user'")
            ).scalar() or 0
            
            ai_msgs = conn.execute(
                text("SELECT COUNT(*) FROM chat_history WHERE message_type = 'ai'")
            ).scalar() or 0
            
            print(f"\nüí¨ –°–û–û–ë–©–ï–ù–ò–Ø:")
            print(f"   –í—Å–µ–≥–æ:              {total_messages:>6}")
            print(f"   –°–µ–≥–æ–¥–Ω—è:            {messages_today:>6}")
            print(f"   –ó–∞ –Ω–µ–¥–µ–ª—é:          {messages_week:>6}")
            print(f"\n   –ü–æ —Ç–∏–ø–∞–º:")
            print(f"   ‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_msgs:>6}")
            print(f"   ‚Ä¢ –û—Ç AI:            {ai_msgs:>6}")
            
            # ========== –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ==========
            if total_users > 0:
                avg_messages_per_user = total_messages / total_users
                print(f"\nüìä –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_messages_per_user:.1f}")
            
            # ========== –¢–û–ü –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
            result = conn.execute(text("""
                SELECT 
                    u.first_name,
                    u.telegram_id,
                    u.user_type,
                    COUNT(ch.id) as msg_count,
                    MAX(ch.timestamp) as last_message
                FROM users u
                LEFT JOIN chat_history ch ON u.telegram_id = ch.user_telegram_id
                GROUP BY u.telegram_id, u.first_name, u.user_type
                ORDER BY msg_count DESC
                LIMIT 15
            """))
            
            print(f"\nüèÜ –¢–û–ü-15 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
            print(f"{'‚Ññ':<4} {'–ò–º—è':<20} {'–¢–∏–ø':<10} {'–°–æ–æ–±—â–µ–Ω–∏–π':<12} {'–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}")
            print("-" * 70)
            
            for i, row in enumerate(result, 1):
                name = row[0] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                user_type = row[2] or "child"
                msg_count = row[3] or 0
                last_msg = row[4].strftime('%d.%m %H:%M') if row[4] else "–ù–µ—Ç"
                
                print(f"{i:<4} {name:<20} {user_type:<10} {msg_count:<12} {last_msg}")
            
            # ========== –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú ==========
            result = conn.execute(text("""
                SELECT 
                    DATE(timestamp) as date,
                    COUNT(*) as messages
                FROM chat_history
                WHERE timestamp >= NOW() - INTERVAL '7 days'
                GROUP BY DATE(timestamp)
                ORDER BY date DESC
            """))
            
            print(f"\nüìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):")
            print(f"{'–î–∞—Ç–∞':<15} {'–°–æ–æ–±—â–µ–Ω–∏–π':<12} {'–ì—Ä–∞—Ñ–∏–∫'}")
            print("-" * 70)
            
            max_messages = 1
            days_data = list(result)
            if days_data:
                max_messages = max(row[1] for row in days_data)
            
            for row in days_data:
                date = row[0].strftime('%d.%m.%Y')
                messages = row[1]
                bar_length = int((messages / max_messages) * 40) if max_messages > 0 else 0
                bar = "‚ñà" * bar_length
                
                print(f"{date:<15} {messages:<12} {bar}")
            
            # ========== –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú (—Å–µ–≥–æ–¥–Ω—è) ==========
            result = conn.execute(text("""
                SELECT 
                    EXTRACT(HOUR FROM timestamp) as hour,
                    COUNT(*) as messages
                FROM chat_history
                WHERE DATE(timestamp) = :today
                GROUP BY EXTRACT(HOUR FROM timestamp)
                ORDER BY hour
            """), {"today": today})
            
            hours_data = {int(row[0]): row[1] for row in result}
            
            if hours_data:
                print(f"\nüïê –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú (—Å–µ–≥–æ–¥–Ω—è):")
                print(f"{'–ß–∞—Å':<8} {'–°–æ–æ–±—â–µ–Ω–∏–π':<12} {'–ì—Ä–∞—Ñ–∏–∫'}")
                print("-" * 70)
                
                max_hour_messages = max(hours_data.values()) if hours_data else 1
                
                for hour in range(24):
                    messages = hours_data.get(hour, 0)
                    bar_length = int((messages / max_hour_messages) * 30) if max_hour_messages > 0 else 0
                    bar = "‚ñì" * bar_length
                    
                    print(f"{hour:02d}:00   {messages:<12} {bar}")
            
            print("\n" + "=" * 70)
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞".center(70))
            print("=" * 70 + "\n")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PandaPal...\n")
    get_stats()


#!/usr/bin/env python3
"""
üõ°Ô∏è –°–ö–†–ò–ü–¢ –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import re
import sys
from pathlib import Path
from typing import List, Dict, Set


class SecurityChecker:
    """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
    
    def __init__(self):
        self.sensitive_patterns = {
            # API –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã
            'api_key': r'(?i)(api[_-]?key|apikey)\s*[=:]\s*["\']?([a-zA-Z0-9_\-]{20,})["\']?',
            'token': r'(?i)(token|access[_-]?token)\s*[=:]\s*["\']?([a-zA-Z0-9_\-\.]{20,})["\']?',
            'secret_key': r'(?i)(secret[_-]?key|secretkey)\s*[=:]\s*["\']?([a-zA-Z0-9_\-\.]{20,})["\']?',
            
            # –ü–∞—Ä–æ–ª–∏
            'password': r'(?i)(password|passwd|pwd)\s*[=:]\s*["\']?([^"\'\s]{8,})["\']?',
            'database_url': r'(?i)(database[_-]?url|db[_-]?url)\s*[=:]\s*["\']?(postgresql://[^"\'\s]+)["\']?',
            
            # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏
            'private_key': r'(?i)(private[_-]?key|privkey)\s*[=:]\s*["\']?(-----BEGIN[^"\']+-----END[^"\']+)["\']?',
            'certificate': r'(?i)(certificate|cert)\s*[=:]\s*["\']?(-----BEGIN[^"\']+-----END[^"\']+)["\']?',
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            'telegram_token': r'telegram[_-]?bot[_-]?token\s*[=:]\s*["\']?(\d+:[a-zA-Z0-9_\-]{35})["\']?',
            'gemini_key': r'gemini[_-]?api[_-]?key\s*[=:]\s*["\']?(AIza[a-zA-Z0-9_\-]{35})["\']?',
            'openai_key': r'openai[_-]?api[_-]?key\s*[=:]\s*["\']?(sk-[a-zA-Z0-9_\-]{48})["\']?',
        }
        
        self.excluded_files = {
            '.git', '.gitignore', 'node_modules', '__pycache__', 
            '.env', '.env.example', 'env.template', '.venv', 'venv',
            '*.pyc', '*.log', '*.tmp', '*.bak', 'dist', 'build'
        }
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        self.safe_patterns = [
            'settings.telegram_bot_token',  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
            'YOUR_TELEGRAM_BOT_TOKEN',      # –®–∞–±–ª–æ–Ω
            'test_token',                   # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            'your_telegram_bot_token',      # –®–∞–±–ª–æ–Ω
        ]
        
        self.excluded_extensions = {'.pyc', '.pyo', '.pyd', '.so', '.dll', '.exe', '.log'}
        
        self.violations: List[Dict] = []
    
    def should_skip_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if file_path.suffix.lower() in self.excluded_extensions:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        for pattern in self.excluded_files:
            if file_path.name == pattern or file_path.name.endswith(pattern.replace('*', '')):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
        for part in file_path.parts:
            if part in self.excluded_files:
                return True
        
        return False
    
    def check_file(self, file_path: Path) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        violations = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
            
            for line_num, line in enumerate(lines, 1):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                is_safe = any(safe_pattern in line for safe_pattern in self.safe_patterns)
                if is_safe:
                    continue
                
                for pattern_name, pattern in self.sensitive_patterns.items():
                    matches = re.finditer(pattern, line)
                    for match in matches:
                        violation = {
                            'file': str(file_path),
                            'line': line_num,
                            'pattern': pattern_name,
                            'content': line.strip(),
                            'match': match.group(0) if match.groups() else match.group(0)
                        }
                        violations.append(violation)
        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return violations
    
    def scan_directory(self, directory: Path) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        all_violations = []
        
        for file_path in directory.rglob('*'):
            if file_path.is_file() and not self.should_skip_file(file_path):
                violations = self.check_file(file_path)
                all_violations.extend(violations)
        
        return all_violations
    
    def generate_report(self, violations: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        if not violations:
            return "‚úÖ –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–ê!\n–ù–∏–∫–∞–∫–∏—Ö —É—Ç–µ—á–µ–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        report = f"üö® –ù–ê–ô–î–ï–ù–û {len(violations)} –ù–ê–†–£–®–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò!\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
        by_file = {}
        for violation in violations:
            file_name = violation['file']
            if file_name not in by_file:
                by_file[file_name] = []
            by_file[file_name].append(violation)
        
        for file_name, file_violations in by_file.items():
            report += f"üìÑ {file_name}:\n"
            for violation in file_violations:
                report += f"  ‚ùå –°—Ç—Ä–æ–∫–∞ {violation['line']}: {violation['pattern']}\n"
                report += f"     {violation['content'][:100]}...\n\n"
        
        return report
    
    def run_check(self, directory: str = ".") -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        directory_path = Path(directory)
        if not directory_path.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        violations = self.scan_directory(directory_path)
        self.violations = violations
        
        report = self.generate_report(violations)
        print(report)
        
        return len(violations) == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = SecurityChecker()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    success = checker.run_check(".")
    
    if success:
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º.")
        sys.exit(1)


if __name__ == "__main__":
    main()

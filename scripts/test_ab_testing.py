"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è A/B —Å–∏—Å—Ç–µ–º—ã –∏–≥—Ä—ã PandaPal Go.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é A/B —Ç–µ—Å—Ç–æ–≤
2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫
5. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import json
import time
from pathlib import Path

# –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
test_sessions = [
    {
        "user_id": f"test_user_{i}",
        "levels_completed": [1, 2, 3] if i % 2 == 0 else [1, 2],
        "score": 1500 + i * 100,
        "play_time": 300 + i * 50,
        "errors": i % 3,
    }
    for i in range(10)
]


def simulate_game_session(session_data: dict) -> dict:
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    Args:
        session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–∞
    """
    print(f"\nüéÆ –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {session_data['user_id']}")

    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ A/B —Ç–µ—Å—Ç–∞
    import random

    variant = random.choice(["control", "variant_a", "variant_b", "variant_c"])
    print(f"   üìä –ù–∞–∑–Ω–∞—á–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {variant}")

    # –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    events = []

    # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    events.append({"event": "game_started", "timestamp": time.time(), "variant": variant})

    # –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    for level in session_data["levels_completed"]:
        events.append(
            {
                "event": "level_completed",
                "level": level,
                "timestamp": time.time(),
                "variant": variant,
            }
        )
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
    events.append(
        {
            "event": "game_ended",
            "timestamp": time.time(),
            "variant": variant,
            "score": session_data["score"],
            "play_time": session_data["play_time"],
            "errors": session_data["errors"],
        }
    )

    return {
        "user_id": session_data["user_id"],
        "variant": variant,
        "events": events,
        "metrics": {
            "levels_completed": len(session_data["levels_completed"]),
            "score": session_data["score"],
            "play_time": session_data["play_time"],
            "errors": session_data["errors"],
            "success_rate": (len(session_data["levels_completed"]) / 5) * 100,  # 5 —É—Ä–æ–≤–Ω–µ–π –≤—Å–µ–≥–æ
        },
    }


def analyze_ab_test_results(results: list) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤

    Returns:
        dict: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    """
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    variants = {}
    for result in results:
        variant = result["variant"]
        if variant not in variants:
            variants[variant] = {
                "users": 0,
                "total_score": 0,
                "total_levels": 0,
                "total_play_time": 0,
                "total_errors": 0,
            }

        variants[variant]["users"] += 1
        variants[variant]["total_score"] += result["metrics"]["score"]
        variants[variant]["total_levels"] += result["metrics"]["levels_completed"]
        variants[variant]["total_play_time"] += result["metrics"]["play_time"]
        variants[variant]["total_errors"] += result["metrics"]["errors"]

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    analytics = {}
    for variant, data in variants.items():
        users = data["users"]
        analytics[variant] = {
            "users": users,
            "avg_score": data["total_score"] / users,
            "avg_levels_completed": data["total_levels"] / users,
            "avg_play_time": data["total_play_time"] / users,
            "avg_errors": data["total_errors"] / users,
        }

    return analytics


def print_results(analytics: dict):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    print("\n" + "=" * 80)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PANDAPAL GO")
    print("=" * 80)

    for variant, data in analytics.items():
        print(f"\nüìå –í–∞—Ä–∏–∞–Ω—Ç: {variant.upper()}")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users']}")
        print(f"   ‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {data['avg_score']:.0f}")
        print(f"   üéÆ –°—Ä–µ–¥–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: {data['avg_levels_completed']:.1f}")
        print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {data['avg_play_time']:.0f}—Å")
        print(f"   ‚ùå –°—Ä–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫: {data['avg_errors']:.1f}")

    print("\n" + "=" * 80)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    best_variant = max(analytics.items(), key=lambda x: x[1]["avg_score"])
    print(f"\nüèÜ –õ–£–ß–®–ò–ô –í–ê–†–ò–ê–ù–¢: {best_variant[0].upper()}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {best_variant[1]['avg_score']:.0f}")
    print("=" * 80)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è A/B —Å–∏—Å—Ç–µ–º—ã PandaPal Go")
    print(f"üìÖ –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {len(test_sessions)}")

    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    results = []
    for session in test_sessions:
        result = simulate_game_session(session)
        results.append(result)

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analytics = analyze_ab_test_results(results)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_results(analytics)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    output_dir = Path("test_results")
    output_dir.mkdir(exist_ok=True)

    timestamp = time.strftime("%Y%m%d_%H%M%S")
    output_file = output_dir / f"ab_test_results_{timestamp}.json"

    output_data = {"timestamp": timestamp, "analytics": analytics, "raw_results": results}

    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(output_data, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ A/B —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()

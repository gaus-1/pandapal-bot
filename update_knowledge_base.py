"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron/–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á Windows.

–ü—Ä–∏–º–µ—Ä:
    python update_knowledge_base.py
"""
import asyncio
import sys
from pathlib import Path

from loguru import logger

from bot.services.knowledge_service import get_knowledge_service

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


async def main():
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""
    logger.info("=" * 60)
    logger.info("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    logger.info("=" * 60)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∑–Ω–∞–Ω–∏–π
        knowledge_service = get_knowledge_service()

        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        knowledge_service.auto_update_enabled = True

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        await knowledge_service.update_knowledge_base()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = knowledge_service.get_knowledge_stats()

        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(stats)}")
        for subject, count in stats.items():
            logger.info(f"  ‚Ä¢ {subject}: {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

        logger.info("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        sys.exit(1)

    logger.info("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())

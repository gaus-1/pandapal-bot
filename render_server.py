#!/usr/bin/env python3
"""
–£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
–¢–æ–ª—å–∫–æ health check –±–µ–∑ –±–æ—Ç–∞ - –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç–æ–≤
"""

import os
import logging
from aiohttp import web
from aiohttp.web import Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def health_check(request):
    """Health check endpoint –¥–ª—è Render"""
    return Response(
        text="PandaPal Render Server OK! üêº",
        content_type="text/plain",
        status=200
    )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¢–û–õ–¨–ö–û –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render)
    port = int(os.environ.get('PORT', 8000))
    
    logger.info(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º –ü–†–û–°–¢–û–ô –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"‚úÖ –ü–†–û–°–¢–û–ô —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info("üéØ Render –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç!")
    
    # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    try:
        import asyncio
        await asyncio.Future()
    except asyncio.CancelledError:
        logger.info("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        import asyncio
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import sys
        sys.exit(1)

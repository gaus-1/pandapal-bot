# Docker Compose конфигурация для локальной разработки PandaPal
version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pandapal
      POSTGRES_USER: pandapal_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pandapal_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pandapal_user -d pandapal"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram бот (Python)
  bot:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://pandapal_user:${DB_PASSWORD:-pandapal_password}@postgres:5432/pandapal
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Веб-интерфейс (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - bot
    restart: unless-stopped

# Persistent volumes для данных
volumes:
  postgres_data:


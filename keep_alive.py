#!/usr/bin/env python3
"""
Keep Alive —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞ Render –Ω–∞ FREE –ø–ª–∞–Ω–µ.

–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
"""

import asyncio
import logging
from datetime import datetime

import aiohttp

logger = logging.getLogger(__name__)


async def keep_alive_ping():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    try:
        async with aiohttp.ClientSession() as session:
            # Ping –∫ health endpoint
            async with session.get("http://localhost:10000/health") as response:
                if response.status == 200:
                    logger.info("‚úÖ Keep Alive ping —É—Å–ø–µ—à–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è Keep Alive ping –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Keep Alive ping: {e}")


async def keep_alive_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Keep Alive —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 –º–∏–Ω—É—Ç.
    """
    logger.info("üîÑ Keep Alive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 10 –º–∏–Ω—É—Ç)")

    while True:
        try:
            await keep_alive_ping()
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Keep Alive —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º 1 –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(keep_alive_loop())

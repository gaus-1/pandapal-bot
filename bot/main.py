#!/usr/bin/env python3
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PandaPal –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ CI/CD pipeline –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
"""

import asyncio
import logging
import sys
from pathlib import Path

from bot.config import get_settings
from bot.database import init_database
from bot.monitoring import setup_monitoring

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ PandaPal –±–æ—Ç–∞...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_settings()
        logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {settings.app_name}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        setup_monitoring()
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –¥–ª—è CI/CD —Ç–µ—Å—Ç–æ–≤
        logger.info("‚úÖ PandaPal –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –î–ª—è CI/CD - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä
        if settings.environment == "test":
            import uvicorn
            from fastapi import FastAPI

            app = FastAPI(title="PandaPal Test Server")

            @app.get("/")
            async def root():
                return {"message": "PandaPal Bot is running!", "status": "healthy"}

            @app.get("/health")
            async def health():
                return {"status": "healthy", "service": "pandapal-bot"}

            logger.info("üåê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
            await uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")

        else:
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ aiogram –±–æ—Ç–∞
            await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

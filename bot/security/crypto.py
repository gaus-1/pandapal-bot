"""
–ú–æ–¥—É–ª—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã –¥–ª—è PandaPal Bot.
OWASP A02:2021 - Cryptographic Failures

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
- API –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –õ–æ–≥–∏ –∏ –∞—É–¥–∏—Ç-–∑–∞–ø–∏—Å–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Fernet (AES 128) –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
"""

import base64
import hashlib
import os
from typing import Optional

from cryptography.fernet import Fernet
from loguru import logger


class CryptoService:
    """
    –°–µ—Ä–≤–∏—Å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π
    - –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self, secret_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ—Å–µ—Ä–≤–∏—Å–∞.

        Args:
            secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)
        """
        self.secret_key = secret_key or self._generate_key()
        self.fernet = Fernet(self.secret_key)
        logger.info("üîê CryptoService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _generate_key(self) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
        return Fernet.generate_key()

    def encrypt(self, data: str) -> str:
        """
        –®–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            str: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
        """
        if not data:
            return ""

        try:
            encrypted_data = self.fernet.encrypt(data.encode("utf-8"))
            return base64.b64encode(encrypted_data).decode("utf-8")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    def decrypt(self, encrypted_data: str) -> str:
        """
        –î–µ—à–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ.

        Args:
            encrypted_data: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64

        Returns:
            str: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not encrypted_data:
            return ""

        try:
            decoded_data = base64.b64decode(encrypted_data.encode("utf-8"))
            decrypted_data = self.fernet.decrypt(decoded_data)
            return decrypted_data.decode("utf-8")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    def hash_data(self, data: str, salt: Optional[str] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–ª—å—é –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            salt: –°–æ–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã

        Returns:
            str: SHA-256 —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö
        """
        if salt:
            data = f"{data}{salt}"

        return hashlib.sha256(data.encode("utf-8")).hexdigest()

    def verify_hash(self, data: str, hash_value: str, salt: Optional[str] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ö–µ—à—É.

        Args:
            data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            hash_value: –•–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            salt: –°–æ–ª—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–µ—à–∞

        Returns:
            bool: True –µ—Å–ª–∏ —Ö–µ—à —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        """
        expected_hash = self.hash_data(data, salt)
        return expected_hash == hash_value

    def mask_sensitive_data(self, data: str, visible_chars: int = 4) -> str:
        """
        –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            visible_chars: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–∞—á–∞–ª–∞

        Returns:
            str: –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not data or len(data) <= visible_chars:
            return "*" * len(data) if data else ""

        return data[:visible_chars] + "*" * (len(data) - visible_chars)


class SecureStorage:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏.
    """

    def __init__(self, crypto_service: CryptoService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

        Args:
            crypto_service: –≠–∫–∑–µ–º–ø–ª—è—Ä CryptoService –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        """
        self.crypto = crypto_service

    def encrypt_field(self, value: Optional[str]) -> Optional[str]:
        """–®–∏—Ñ—Ä—É–µ—Ç –ø–æ–ª–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
        if not value:
            return None
        return self.crypto.encrypt(value)

    def decrypt_field(self, encrypted_value: Optional[str]) -> Optional[str]:
        """–î–µ—à–∏—Ñ—Ä—É–µ—Ç –ø–æ–ª–µ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î."""
        if not encrypted_value:
            return None
        return self.crypto.decrypt(encrypted_value)

    def create_audit_hash(self, data: dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –¥–ª—è –∞—É–¥–∏—Ç–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.

        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞

        Returns:
            str: –•–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞
        sorted_data = sorted(data.items())
        data_string = str(sorted_data)
        return self.crypto.hash_data(data_string)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—Ä–∏–ø—Ç–æ—Å–µ—Ä–≤–∏—Å–∞
_crypto_service = None


def get_crypto_service() -> CryptoService:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—Ä–∏–ø—Ç–æ—Å–µ—Ä–≤–∏—Å–∞.

    Returns:
        CryptoService: –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    """
    global _crypto_service
    if _crypto_service is None:
        from bot.config import settings

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SECRET_KEY –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        secret_key = settings.secret_key.encode("utf-8")
        _crypto_service = CryptoService(secret_key)
    return _crypto_service


def get_secure_storage() -> SecureStorage:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

    Returns:
        SecureStorage: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """
    return SecureStorage(get_crypto_service())


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def encrypt_data(data: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    return get_crypto_service().encrypt(data)


def decrypt_data(encrypted_data: str) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    return get_crypto_service().decrypt(encrypted_data)


def mask_for_logging(data: str, visible_chars: int = 4) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    return get_crypto_service().mask_sensitive_data(data, visible_chars)

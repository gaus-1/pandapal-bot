"""
–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ü–û –¥–ª—è PandaPal Bot.
OWASP A08:2021 - Software and Data Integrity Failures

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ü—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –í–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ–≤–µ—Ä–∫—É —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π
- –ó–∞—â–∏—Ç—É –æ—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import hashlib
import json
from typing import Any, Dict, Optional

from loguru import logger


class IntegrityChecker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ü–û.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç:
    - –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
    - –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    - –ü–æ–¥–º–µ–Ω—ã –∫–æ–¥–∞/–¥–∞–Ω–Ω—ã—Ö
    """

    @staticmethod
    def calculate_checksum(data: str, algorithm: str = "sha256") -> str:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–∞–Ω–Ω—ã—Ö.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            algorithm: –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (sha256, sha512)

        Returns:
            str: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
        """
        if algorithm == "sha256":
            return hashlib.sha256(data.encode("utf-8")).hexdigest()
        elif algorithm == "sha512":
            return hashlib.sha512(data.encode("utf-8")).hexdigest()
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")

    @staticmethod
    def verify_checksum(data: str, expected_checksum: str, algorithm: str = "sha256") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–∞–Ω–Ω—ã—Ö.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            expected_checksum: –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
            algorithm: –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        """
        actual_checksum = IntegrityChecker.calculate_checksum(data, algorithm)
        return actual_checksum == expected_checksum

    @staticmethod
    def safe_json_loads(json_string: str, max_size: int = 1024 * 1024) -> Optional[Dict[str, Any]]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON.

        Args:
            json_string: JSON —Å—Ç—Ä–æ–∫–∞
            max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1MB)

        Returns:
            Optional[Dict[str, Any]]: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if len(json_string.encode("utf-8")) > max_size:
                logger.error("‚ùå JSON –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
                return None

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è (json.loads –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥)
            data = json.loads(json_string)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            if not isinstance(data, (dict, list)):
                logger.error("‚ùå JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º")
                return None

            return data

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            return None

    @staticmethod
    def validate_telegram_data(data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram API.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram

        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["update_id"]

        for field in required_fields:
            if field not in data:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data.get("update_id"), int):
            logger.warning("‚ö†Ô∏è update_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return False

        return True

    @staticmethod
    def sanitize_user_input(user_input: str, max_length: int = 4000) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.

        Args:
            user_input: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –≤–≤–æ–¥
        """
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        sanitized = user_input[:max_length]

        # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–∞–±—É–ª—è—Ü–∏–∏)
        sanitized = "".join(
            char for char in sanitized if char.isprintable() or char in ["\n", "\t"]
        )

        return sanitized


class SSRFProtection:
    """
    –ó–∞—â–∏—Ç–∞ –æ—Ç Server-Side Request Forgery (SSRF).
    OWASP A10:2021 - Server-Side Request Forgery

    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑:
    - –í–∞–ª–∏–¥–∞—Ü–∏—é URL
    - –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
    - –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö IP
    """

    # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    ALLOWED_DOMAINS = [
        "api.telegram.org",
        "generativelanguage.googleapis.com",
        "pandapal.ru",
        "mc.yandex.ru",
        "www.google-analytics.com",
    ]

    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–µ—Ç–∏)
    BLOCKED_IP_RANGES = [
        "127.0.0.0/8",  # Localhost
        "10.0.0.0/8",  # Private network
        "172.16.0.0/12",  # Private network
        "192.168.0.0/16",  # Private network
        "169.254.0.0/16",  # Link-local
        "0.0.0.0/8",  # Current network
        "224.0.0.0/4",  # Multicast
        "240.0.0.0/4",  # Reserved
    ]

    @staticmethod
    def is_safe_url(url: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.

        Args:
            url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ URL –±–µ–∑–æ–ø–∞—Å–µ–Ω
        """
        from urllib.parse import urlparse

        try:
            parsed = urlparse(url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É (—Ç–æ–ª—å–∫–æ HTTPS)
            if parsed.scheme not in ["https"]:
                logger.warning(f"‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ö–µ–º–∞: {parsed.scheme}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
            domain = parsed.netloc.split(":")[0]  # –£–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
            if not any(allowed in domain for allowed in SSRFProtection.ALLOWED_DOMAINS):
                logger.warning(f"‚ö†Ô∏è –î–æ–º–µ–Ω –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: {domain}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ IP –∞–¥—Ä–µ—Å
            if SSRFProtection._is_ip_address(domain):
                logger.warning(f"‚ö†Ô∏è –ü—Ä—è–º—ã–µ IP –∞–¥—Ä–µ—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã: {domain}")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL: {e}")
            return False

    @staticmethod
    def _is_ip_address(hostname: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ IP –∞–¥—Ä–µ—Å–æ–º."""
        import re

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IPv4
        ipv4_pattern = r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"
        return bool(re.match(ipv4_pattern, hostname))

    @staticmethod
    def validate_external_request(url: str, method: str = "GET") -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞.

        Args:
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            method: HTTP –º–µ—Ç–æ–¥

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if not SSRFProtection.is_safe_url(url):
            logger.error(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL: {url}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
        if method not in ["GET", "POST"]:
            logger.error(f"üö´ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            return False

        return True


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def verify_data_integrity(data: str, checksum: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."""
    return IntegrityChecker.verify_checksum(data, checksum)


def safe_deserialize_json(json_string: str) -> Optional[Dict[str, Any]]:
    """–ë—ã—Å—Ç—Ä–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON."""
    return IntegrityChecker.safe_json_loads(json_string)


def validate_url_safety(url: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ URL."""
    return SSRFProtection.is_safe_url(url)


def sanitize_input(user_input: str, max_length: int = 4000) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞."""
    return IntegrityChecker.sanitize_user_input(user_input, max_length)

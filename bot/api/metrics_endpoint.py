"""
API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ Prometheus.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç—Ä–∏–∫–∞–º —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ HTTP API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã Prometheus –∏ JSON.

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
- Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

import asyncio
from typing import Any, Dict, Optional

from aiohttp import ClientSession, web
from aiohttp.web import Request, Response
from loguru import logger

try:
    from bot.monitoring.metrics_integration import (
        export_json_metrics,
        export_prometheus_metrics,
        get_system_metrics_for_api,
    )

    METRICS_AVAILABLE = True
except ImportError:
    METRICS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è API endpoint")


class MetricsEndpoint:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–µ—Ç—Ä–∏–∫–∞–º.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç—Ä–∏–∫–∞–º —Å–∏—Å—Ç–µ–º—ã
    —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HTTP endpoints.
    """

    def __init__(self):
        self.enabled = METRICS_AVAILABLE

        if self.enabled:
            logger.info("üìä API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("üìä API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω")

    async def get_system_metrics(self, request: Request) -> Response:
        """
        GET /api/v1/analytics/metrics

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        """
        if not self.enabled:
            return web.json_response(
                {"error": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", "metrics_enabled": False}, status=503
            )

        try:
            metrics = get_system_metrics_for_api()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            response_data = {
                "success": True,
                "data": metrics,
                "timestamp": metrics.get("timestamp"),
                "version": "1.0.0",
            }

            return web.json_response(response_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return web.json_response(
                {"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫", "details": str(e), "success": False},
                status=500,
            )

    async def get_prometheus_metrics(self, request: Request) -> Response:
        """
        GET /metrics

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.
        """
        if not self.enabled:
            return web.Response(
                text="# –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n", content_type="text/plain", status=503
            )

        try:
            metrics_text = export_prometheus_metrics()

            return web.Response(
                text=metrics_text, content_type="text/plain; version=0.0.4; charset=utf-8"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Prometheus –º–µ—Ç—Ä–∏–∫: {e}")
            return web.Response(
                text=f"# –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}\n", content_type="text/plain", status=500
            )

    async def get_json_metrics(self, request: Request) -> Response:
        """
        GET /api/v1/metrics/json

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        """
        if not self.enabled:
            return web.json_response(
                {"error": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", "metrics_enabled": False}, status=503
            )

        try:
            metrics_json = export_json_metrics()

            return web.Response(text=metrics_json, content_type="application/json")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON –º–µ—Ç—Ä–∏–∫: {e}")
            return web.json_response(
                {"error": "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫", "details": str(e)}, status=500
            )

    async def health_check(self, request: Request) -> Response:
        """
        GET /api/v1/health

        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –º–µ—Ç—Ä–∏–∫.
        """
        health_data = {
            "status": "healthy",
            "timestamp": asyncio.get_event_loop().time(),
            "components": {
                "metrics": "healthy" if self.enabled else "disabled",
                "api": "healthy",
                "database": "healthy",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                "ai_service": "healthy",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            },
            "metrics_enabled": self.enabled,
            "version": "1.0.0",
        }

        return web.json_response(health_data)


def create_metrics_routes() -> list:
    """
    –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫.

    Returns:
        –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è aiohttp
    """
    if not METRICS_AVAILABLE:
        logger.warning("‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return []

    endpoint = MetricsEndpoint()

    routes = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ API endpoints
        web.get("/api/v1/analytics/metrics", endpoint.get_system_metrics),
        web.get("/api/v1/metrics/json", endpoint.get_json_metrics),
        web.get("/api/v1/health", endpoint.health_check),
        # Prometheus endpoint
        web.get("/metrics", endpoint.get_prometheus_metrics),
    ]

    logger.info("üìä –°–æ–∑–¥–∞–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫:")
    for route in routes:
        logger.info(f"  - {route.method} {route.resource}")

    return routes


def setup_metrics_middleware(app: web.Application):
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫.

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    if not METRICS_AVAILABLE:
        return

    async def metrics_middleware(request: Request, handler):
        """Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤."""
        start_time = asyncio.get_event_loop().time()

        try:
            response = await handler(request)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            response_time = asyncio.get_event_loop().time() - start_time

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            # metrics.increment_counter('http_requests_total', {
            #     'method': request.method,
            #     'path': request.path,
            #     'status': response.status
            # })

            return response

        except Exception as e:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            response_time = asyncio.get_event_loop().time() - start_time

            # metrics.increment_counter('http_requests_total', {
            #     'method': request.method,
            #     'path': request.path,
            #     'status': 500
            # })

            raise

    app.middlewares.append(metrics_middleware)
    logger.info("üìä Middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
def add_metrics_to_web_server(app: web.Application):
    """
    –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É.

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    if not METRICS_AVAILABLE:
        logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º")
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routes = create_metrics_routes()
        app.router.add_routes(routes)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
        setup_metrics_middleware(app)

        logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ
async def example_integration():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º.
    """
    app = web.Application()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    add_metrics_to_web_server(app)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    # app.router.add_get('/', your_handler)

    return app


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if __name__ != "__main__":
    import os

    if os.getenv("PROMETHEUS_METRICS_ENABLED", "false").lower() == "true":
        logger.info("üìä API endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

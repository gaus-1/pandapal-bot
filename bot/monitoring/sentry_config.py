"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Sentry –¥–ª—è production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

–ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Sentry –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ production —Å—Ä–µ–¥–µ.
"""

import logging
import os
from typing import Optional

try:
    import sentry_sdk
    from sentry_sdk.integrations.aiohttp import AioHttpIntegration
    from sentry_sdk.integrations.redis import RedisIntegration
    from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

    SENTRY_AVAILABLE = True
except ImportError:
    SENTRY_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Sentry –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")


class SentryConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Sentry –¥–ª—è PandaPal Bot.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
    —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self):
        self.dsn: Optional[str] = os.getenv("SENTRY_DSN")
        self.environment: str = os.getenv("SENTRY_ENVIRONMENT", "development")
        self.enabled: bool = bool(self.dsn and SENTRY_AVAILABLE)

        if self.enabled:
            self._setup_sentry()

    def _setup_sentry(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sentry —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏."""
        sentry_sdk.init(
            dsn=self.dsn,
            environment=self.environment,
            integrations=[
                AioHttpIntegration(),
                SqlalchemyIntegration(),
                RedisIntegration(),
            ],
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            before_send=self._before_send_filter,
            before_send_transaction=self._before_send_transaction,
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            traces_sample_rate=0.1,  # 10% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            profiles_sample_rate=0.1,  # 10% –ø—Ä–æ—Ñ–∏–ª–µ–π
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ª–∏–∑–æ–≤
            release=os.getenv("RENDER_GIT_COMMIT", "unknown"),
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
            initial_scope={"tags": {"service": "pandapal-bot", "component": "telegram-bot"}},
        )

        logging.info(f"‚úÖ Sentry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ä–µ–¥—ã: {self.environment}")

    def _before_send_filter(self, event, hint):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Sentry.

        –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.
        """
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "extra" in event:
            for key in ["token", "password", "secret", "key"]:
                if key in event["extra"]:
                    event["extra"][key] = "[MASKED]"

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        if "exception" in event:
            exc = event["exception"]
            if exc and exc.get("values"):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                error_type = exc["values"][0].get("type", "")
                if error_type in ["KeyboardInterrupt", "SystemExit"]:
                    return None

        return event

    def _before_send_transaction(self, event, hint):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Sentry.
        """
        # –ú–∞—Å–∫–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        if "request" in event and "url" in event["request"]:
            url = event["request"]["url"]
            if "token=" in url:
                event["request"]["url"] = url.split("token=")[0] + "token=[MASKED]"

        return event

    def capture_exception(self, exc: Exception, **kwargs):
        """–ó–∞—Ö–≤–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ Sentry."""
        if self.enabled:
            sentry_sdk.capture_exception(exc, **kwargs)

    def capture_message(self, message: str, level: str = "info", **kwargs):
        """–ó–∞—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Sentry."""
        if self.enabled:
            sentry_sdk.capture_message(message, level=level, **kwargs)

    def add_breadcrumb(self, message: str, category: str = "info", **kwargs):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫."""
        if self.enabled:
            sentry_sdk.add_breadcrumb(message=message, category=category, **kwargs)

    def set_user_context(self, user_id: str, **kwargs):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.enabled:
            sentry_sdk.set_user({"id": user_id, **kwargs})

    def set_tag(self, key: str, value: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–≥–∞."""
        if self.enabled:
            sentry_sdk.set_tag(key, value)

    def set_context(self, key: str, value: dict):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        if self.enabled:
            sentry_sdk.set_context(key, value)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Sentry
sentry_config = SentryConfig()


def get_sentry_config() -> SentryConfig:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Sentry.

    Returns:
        SentryConfig: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Sentry
    """
    return sentry_config


def is_sentry_enabled() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ Sentry.

    Returns:
        bool: True –µ—Å–ª–∏ Sentry –≤–∫–ª—é—á–µ–Ω
    """
    return sentry_config.enabled


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def capture_error(exc: Exception, user_id: Optional[str] = None, **kwargs):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –æ—à–∏–±–∫–∏."""
    if user_id:
        sentry_config.set_user_context(user_id)
    sentry_config.capture_exception(exc, **kwargs)


def capture_info(message: str, user_id: Optional[str] = None, **kwargs):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if user_id:
        sentry_config.set_user_context(user_id)
    sentry_config.capture_message(message, level="info", **kwargs)


def capture_warning(message: str, user_id: Optional[str] = None, **kwargs):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."""
    if user_id:
        sentry_config.set_user_context(user_id)
    sentry_config.capture_message(message, level="warning", **kwargs)


def add_breadcrumb(message: str, category: str = "info", **kwargs):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫."""
    sentry_config.add_breadcrumb(message, category, **kwargs)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫
def sentry_capture_errors(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫ –≤ Sentry.
    """
    import functools

    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            capture_error(e)
            raise

    return wrapper


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != "__main__":
    if sentry_config.enabled:
        logging.info("üõ°Ô∏è Sentry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
    else:
        logging.info("üõ°Ô∏è Sentry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")

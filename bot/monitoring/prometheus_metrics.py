"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ Prometheus –¥–ª—è PandaPal Bot.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π —Å–ø–æ—Å–æ–± —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.

–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ó–∞–ø—Ä–æ—Å—ã –∫ AI API
- –ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
- –û—à–∏–±–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ
- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É)
"""

import json
import os
import threading
import time
from dataclasses import dataclass
from functools import wraps
from typing import Any, Dict, Optional

from loguru import logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ (thread-safe)
_metrics_lock = threading.Lock()
_metrics_data: Dict[str, Any] = {}


@dataclass
class MetricConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫ Prometheus."""

    enabled: bool = True
    endpoint: str = "/metrics"
    port: int = 8001
    collect_interval: int = 60  # —Å–µ–∫—É–Ω–¥—ã
    retention_days: int = 7


class PrometheusMetrics:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.

    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞,
    –Ω–µ –Ω–∞—Ä—É—à–∞—è —Ä–∞–±–æ—Ç—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """

    def __init__(self, config: Optional[MetricConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config = config or MetricConfig()
        self.start_time = time.time()
        self._initialize_metrics()

        if self.config.enabled:
            logger.info("üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            logger.info("üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    def _initialize_metrics(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫."""
        with _metrics_lock:
            _metrics_data.update(
                {
                    # –°—á–µ—Ç—á–∏–∫–∏
                    "ai_requests_total": 0,
                    "game_sessions_total": 0,
                    "user_messages_total": 0,
                    "errors_total": 0,
                    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞)
                    "ai_response_time_seconds": [],
                    "game_session_duration_seconds": [],
                    "db_query_time_seconds": [],
                    # Gauge –º–µ—Ç—Ä–∏–∫–∏
                    "active_users_count": 0,
                    "active_game_sessions_count": 0,
                    "system_uptime_seconds": 0,
                    "memory_usage_bytes": 0,
                    "cpu_usage_percent": 0,
                    # –ú–µ—Ç–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                    "error_types": {},
                    "user_activity_by_hour": {},
                    "popular_commands": {},
                }
            )

    def increment_counter(
        self, metric_name: str, labels: Optional[Dict[str, str]] = None, value: int = 1
    ):
        """
        –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –º–µ—Ç—Ä–∏–∫–∏.

        Args:
            metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            labels: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        """
        if not self.config.enabled:
            return

        with _metrics_lock:
            if metric_name in _metrics_data:
                if isinstance(_metrics_data[metric_name], dict):
                    # –î–ª—è –º–µ—Ç—Ä–∏–∫ —Å –º–µ—Ç–∫–∞–º–∏
                    label_key = str(labels) if labels else "default"
                    _metrics_data[metric_name][label_key] = (
                        _metrics_data[metric_name].get(label_key, 0) + value
                    )
                else:
                    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
                    _metrics_data[metric_name] += value

    def record_histogram(
        self, metric_name: str, value: float, labels: Optional[Dict[str, str]] = None
    ):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É.

        Args:
            metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            labels: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
        """
        if not self.config.enabled:
            return

        with _metrics_lock:
            if metric_name in _metrics_data and isinstance(_metrics_data[metric_name], list):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
                if len(_metrics_data[metric_name]) < 1000:
                    _metrics_data[metric_name].append(
                        {"value": value, "timestamp": time.time(), "labels": labels or {}}
                    )
                else:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                    _metrics_data[metric_name] = _metrics_data[metric_name][-500:]

    def set_gauge(self, metric_name: str, value: float, labels: Optional[Dict[str, str]] = None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ gauge –º–µ—Ç—Ä–∏–∫–∏.

        Args:
            metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            labels: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
        """
        if not self.config.enabled:
            return

        with _metrics_lock:
            if metric_name in _metrics_data:
                if labels:
                    label_key = str(labels)
                    if not isinstance(_metrics_data[metric_name], dict):
                        _metrics_data[metric_name] = {}
                    _metrics_data[metric_name][label_key] = value
                else:
                    _metrics_data[metric_name] = value

    def get_metrics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        with _metrics_lock:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            _metrics_data["system_uptime_seconds"] = time.time() - self.start_time

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
            return _metrics_data.copy()

    def export_prometheus_format(self) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
        """
        if not self.config.enabled:
            return "# –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"

        metrics = self.get_metrics()
        output = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        output.append("# HELP pandapal_bot_metrics PandaPal Bot Prometheus Metrics")
        output.append("# TYPE pandapal_bot_metrics counter")
        output.append("")

        # –°—á–µ—Ç—á–∏–∫–∏
        for metric_name, value in metrics.items():
            if isinstance(value, (int, float)) and not isinstance(value, dict):
                prom_name = f"pandapal_{metric_name}"
                output.append(f"{prom_name} {value}")
            elif isinstance(value, list) and metric_name.endswith("_seconds"):
                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                prom_name = f"pandapal_{metric_name}"
                if value:
                    avg_value = sum(item["value"] for item in value) / len(value)
                    output.append(f"{prom_name}_avg {avg_value}")
                    output.append(f"{prom_name}_count {len(value)}")
                    output.append(f"{prom_name}_sum {sum(item['value'] for item in value)}")
            elif isinstance(value, dict) and metric_name.endswith("_count"):
                # –ú–µ—Ç—Ä–∏–∫–∏ —Å –º–µ—Ç–∫–∞–º–∏
                prom_name = f"pandapal_{metric_name}"
                for label_key, label_value in value.items():
                    if label_key != "default":
                        output.append(f'{prom_name}{{labels="{label_key}"}} {label_value}')
                    else:
                        output.append(f"{prom_name} {label_value}")

        return "\n".join(output)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
_metrics_instance: Optional[PrometheusMetrics] = None


def get_metrics() -> PrometheusMetrics:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫.

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä PrometheusMetrics
    """
    global _metrics_instance

    if _metrics_instance is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        enabled = os.getenv("PROMETHEUS_METRICS_ENABLED", "false").lower() == "true"

        config = MetricConfig(
            enabled=enabled,
            endpoint=os.getenv("PROMETHEUS_ENDPOINT", "/metrics"),
            port=int(os.getenv("PROMETHEUS_PORT", "8001")),
        )

        _metrics_instance = PrometheusMetrics(config)

    return _metrics_instance


def track_ai_request(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI API.

    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –ª–æ–≥–∏–∫–∏.
    """

    @wraps(func)
    async def wrapper(*args, **kwargs):
        metrics = get_metrics()
        start_time = time.time()

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            response_time = time.time() - start_time
            metrics.increment_counter("ai_requests_total", {"status": "success"})
            metrics.record_histogram("ai_response_time_seconds", response_time)

            return result

        except Exception as e:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            response_time = time.time() - start_time
            metrics.increment_counter("ai_requests_total", {"status": "error"})
            metrics.increment_counter("errors_total", {"type": type(e).__name__})
            metrics.record_histogram("ai_response_time_seconds", response_time)

            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise

    return wrapper


def track_game_session(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.
    """

    @wraps(func)
    async def wrapper(*args, **kwargs):
        metrics = get_metrics()
        start_time = time.time()

        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            metrics.set_gauge(
                "active_game_sessions_count",
                metrics.get_metrics().get("active_game_sessions_count", 0) + 1,
            )

            result = await func(*args, **kwargs)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            session_duration = time.time() - start_time
            metrics.increment_counter("game_sessions_total", {"status": "completed"})
            metrics.record_histogram("game_session_duration_seconds", session_duration)

            return result

        except Exception as e:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            session_duration = time.time() - start_time
            metrics.increment_counter("game_sessions_total", {"status": "error"})
            metrics.increment_counter("errors_total", {"type": type(e).__name__})

            raise
        finally:
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            metrics.set_gauge(
                "active_game_sessions_count",
                max(0, metrics.get_metrics().get("active_game_sessions_count", 0) - 1),
            )

    return wrapper


def track_user_activity(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    @wraps(func)
    async def wrapper(*args, **kwargs):
        metrics = get_metrics()

        try:
            result = await func(*args, **kwargs)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            metrics.increment_counter("user_messages_total")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            current_hour = time.strftime("%H")
            metrics.set_gauge("user_activity_by_hour", 1, {"hour": current_hour})

            return result

        except Exception as e:
            metrics.increment_counter("errors_total", {"type": type(e).__name__})
            raise

    return wrapper


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫
def export_metrics_json() -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è API.

    Returns:
        JSON —Å—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    metrics = get_metrics()
    return json.dumps(metrics.get_metrics(), indent=2, default=str)


def export_metrics_prometheus() -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    """
    metrics = get_metrics()
    return metrics.export_prometheus_format()


# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
def initialize_metrics():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–µ—Ç—Ä–∏–∫.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        metrics = get_metrics()
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ Prometheus –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return metrics
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        return None

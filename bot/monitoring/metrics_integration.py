"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ Prometheus —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏—Ö —Ä–∞–±–æ—Ç—ã.

–ü—Ä–∏–Ω—Ü–∏–ø—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
- –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import asyncio
import time
from functools import wraps
from typing import Any, Dict, Optional

from loguru import logger

try:
    from .prometheus_metrics import (
        get_metrics,
        track_ai_request,
        track_game_session,
        track_user_activity,
    )

    METRICS_AVAILABLE = True
except ImportError:
    METRICS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Prometheus –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def safe_metrics_wrapper(func):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫.
    –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
    """

    @wraps(func)
    async def wrapper(*args, **kwargs):
        if not METRICS_AVAILABLE:
            # –ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –º–µ—Ç—Ä–∏–∫
            return await func(*args, **kwargs)

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): {e}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return await func(*args, **kwargs)

    return wrapper


class MetricsIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
    –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –ª–æ–≥–∏–∫–∏.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        self.enabled = METRICS_AVAILABLE
        self.metrics = None

        if self.enabled:
            try:
                self.metrics = get_metrics()
                logger.info("üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
                self.enabled = False

    def track_ai_service_call(self, func):
        """
        –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫ –≤—ã–∑–æ–≤–∞–º AI —Å–µ—Ä–≤–∏—Å–∞.
        """
        if not self.enabled:
            return func

        @wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = time.time()

            try:
                result = await func(*args, **kwargs)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
                response_time = time.time() - start_time
                self.metrics.increment_counter("ai_requests_total", {"service": "gemini"})
                self.metrics.record_histogram("ai_response_time_seconds", response_time)

                return result

            except Exception as e:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                response_time = time.time() - start_time
                self.metrics.increment_counter(
                    "ai_requests_total", {"service": "gemini", "status": "error"}
                )
                self.metrics.increment_counter("errors_total", {"type": type(e).__name__})
                self.metrics.record_histogram("ai_response_time_seconds", response_time)

                raise

        return wrapper

    def track_database_operation(self, func):
        """
        –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        """
        if not self.enabled:
            return func

        @wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = time.time()

            try:
                result = await func(*args, **kwargs)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                query_time = time.time() - start_time
                self.metrics.record_histogram("db_query_time_seconds", query_time)

                return result

            except Exception as e:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                query_time = time.time() - start_time
                self.metrics.increment_counter("errors_total", {"type": "database_error"})
                logger.error(f"Database error after {query_time:.2f}s: {e}")
                self.metrics.record_histogram("db_query_time_seconds", query_time)

                raise

        return wrapper

    def track_user_message(self, func):
        """
        –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        if not self.enabled:
            return func

        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                result = await func(*args, **kwargs)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.metrics.increment_counter("user_messages_total")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                current_hour = time.strftime("%H")
                _ = f"hour_{current_hour}"  # activity_key –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.metrics.set_gauge("user_activity_by_hour", 1, {"hour": current_hour})

                return result

            except Exception as e:
                self.metrics.increment_counter("errors_total", {"type": "message_processing_error"})
                logger.error(f"Message processing error: {e}")
                raise

        return wrapper

    def track_game_activity(self, func):
        """
        –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        """
        if not self.enabled:
            return func

        @wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = time.time()

            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
                current_sessions = self.metrics.get_metrics().get("active_game_sessions_count", 0)
                self.metrics.set_gauge("active_game_sessions_count", current_sessions + 1)

                result = await func(*args, **kwargs)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                session_duration = time.time() - start_time
                self.metrics.increment_counter("game_sessions_total", {"status": "completed"})
                self.metrics.record_histogram("game_session_duration_seconds", session_duration)

                return result

            except Exception as e:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                session_duration = time.time() - start_time
                self.metrics.increment_counter("game_sessions_total", {"status": "error"})
                logger.error(f"Game session error after {session_duration:.2f}s: {e}")
                self.metrics.increment_counter("errors_total", {"type": "game_error"})

                raise
            finally:
                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
                current_sessions = self.metrics.get_metrics().get("active_game_sessions_count", 0)
                self.metrics.set_gauge("active_game_sessions_count", max(0, current_sessions - 1))

        return wrapper

    def get_system_metrics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è API.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        if not self.enabled:
            return {"metrics_enabled": False, "error": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}

        try:
            metrics_data = self.metrics.get_metrics()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            system_metrics = {
                "metrics_enabled": True,
                "timestamp": time.time(),
                "active_users": metrics_data.get("active_users_count", 0),
                "total_users": 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                "ai_requests_per_minute": 0,  # –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                "game_sessions_active": metrics_data.get("active_game_sessions_count", 0),
                "average_response_time_ms": 0,  # –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                "system_health": "healthy",
                "uptime_seconds": metrics_data.get("system_uptime_seconds", 0),
                "total_errors": metrics_data.get("errors_total", 0),
                "total_ai_requests": metrics_data.get("ai_requests_total", 0),
                "total_game_sessions": metrics_data.get("game_sessions_total", 0),
                "total_user_messages": metrics_data.get("user_messages_total", 0),
            }

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ AI
            ai_response_times = metrics_data.get("ai_response_time_seconds", [])
            if ai_response_times:
                avg_response_time = sum(item["value"] for item in ai_response_times) / len(
                    ai_response_times
                )
                system_metrics["average_response_time_ms"] = int(avg_response_time * 1000)

            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –º–∏–Ω—É—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            total_requests = metrics_data.get("ai_requests_total", 0)
            uptime_minutes = metrics_data.get("system_uptime_seconds", 1) / 60
            system_metrics["ai_requests_per_minute"] = round(
                total_requests / max(1, uptime_minutes), 2
            )

            return system_metrics

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {"metrics_enabled": False, "error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
_integration_instance: Optional[MetricsIntegration] = None


def get_metrics_integration() -> MetricsIntegration:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫.

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä MetricsIntegration
    """
    global _integration_instance

    if _integration_instance is None:
        _integration_instance = MetricsIntegration()

    return _integration_instance


# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª—è—Ö
def safe_track_ai_service(func):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–∞.
    """
    integration = get_metrics_integration()
    return integration.track_ai_service_call(func)


def safe_track_database(func):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î.
    """
    integration = get_metrics_integration()
    return integration.track_database_operation(func)


def safe_track_user_activity(func):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    integration = get_metrics_integration()
    return integration.track_user_message(func)


def safe_track_game_activity(func):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    integration = get_metrics_integration()
    return integration.track_game_activity(func)


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫
def get_system_metrics_for_api() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è API endpoint.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è API
    """
    integration = get_metrics_integration()
    return integration.get_system_metrics()


def export_prometheus_metrics() -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    """
    if not METRICS_AVAILABLE:
        return "# –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

    try:
        from .prometheus_metrics import export_metrics_prometheus

        return export_metrics_prometheus()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        return f"# –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}\n"


def export_json_metrics() -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    Returns:
        JSON —Å—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    if not METRICS_AVAILABLE:
        return '{"error": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}'

    try:
        from .prometheus_metrics import export_metrics_json

        return export_metrics_json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON –º–µ—Ç—Ä–∏–∫: {e}")
        return f'{{"error": "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}"}}'


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
def initialize_metrics_integration():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        integration = get_metrics_integration()
        if integration.enabled:
            logger.info("üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ Prometheus –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.info("üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return integration
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        return None


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if __name__ != "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    import os

    if os.getenv("PROMETHEUS_METRICS_ENABLED", "false").lower() == "true":
        initialize_metrics_integration()

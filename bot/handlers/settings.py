"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –≤–æ–∑—Ä–∞—Å—Ç–∞, –∫–ª–∞—Å—Å–∞
@module bot.handlers.settings
"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from loguru import logger

from bot.database import get_db
from bot.keyboards.main_kb import (
    get_confirm_keyboard,
    get_grade_selection_keyboard,
    get_main_menu_keyboard,
    get_settings_keyboard,
)
from bot.services import ChatHistoryService, UserService

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router(name="settings")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    waiting_for_age = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    """
    telegram_id = message.from_user.id

    with get_db() as db:
        user_service = UserService(db)
        user = user_service.get_user_by_telegram_id(telegram_id)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ /start")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_info = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user.age or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üéì –ö–ª–∞—Å—Å: {user.grade or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìä –¢–∏–ø: {{"child": "–£—á–µ–Ω–∏–∫", "parent": "–†–æ–¥–∏—Ç–µ–ª—å", "teacher": "–£—á–∏—Ç–µ–ª—å".get(user.user_type, user.user_type)}}

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        await message.answer(
            text=profile_info,
            reply_markup=get_settings_keyboard(user.user_type),
            parse_mode="HTML",
        )


@router.callback_query(F.data == "settings:age")
async def settings_age(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞

    Args:
        callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await callback.message.edit_text(
        text="üéÇ <b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>\n\n" "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)",
        parse_mode="HTML",
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(SettingsStates.waiting_for_age)
    await callback.answer()


@router.message(SettingsStates.waiting_for_age, F.text)
async def process_age(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    try:
        age = int(message.text.strip())

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        if age < 6 or age > 18:
            await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 18 –ª–µ—Ç.\n" "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –ë–î
        with get_db() as db:
            user_service = UserService(db)
            user_service.update_user_profile(telegram_id=message.from_user.id, age=age)

        await message.answer(
            text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç–µ–±–µ {age} –ª–µ—Ç.\n\n" "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å:",
            reply_markup=get_grade_selection_keyboard(),
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)")


@router.callback_query(F.data.startswith("grade:"))
async def set_grade(callback: CallbackQuery):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        callback: Callback —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏–∑ callback_data
    grade = int(callback.data.split(":")[1])

    telegram_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    with get_db() as db:
        user_service = UserService(db)
        user_service.update_user_profile(telegram_id=telegram_id, grade=grade)

    await callback.message.edit_text(
        text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É—á–∏—à—å—Å—è –≤ {grade} –∫–ª–∞—Å—Å–µ.\n\n"
        f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—É {grade} –∫–ª–∞—Å—Å–∞! üìö\n\n"
        f"–ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Å —É—á—ë–±–æ–π! –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã üêº",
        reply_markup=None,
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!")


@router.callback_query(F.data == "settings:clear_history")
async def confirm_clear_history(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏

    Args:
        callback: Callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    """
    await callback.message.edit_text(
        text="‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?</b>\n\n"
        "–Ø –∑–∞–±—É–¥—É –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –Ω–µ —Å–º–æ–≥—É —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–¢—ã —É–≤–µ—Ä–µ–Ω?",
        reply_markup=get_confirm_keyboard("clear_history"),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "confirm:clear_history")
async def clear_chat_history(callback: CallbackQuery):
    """
    –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞

    Args:
        callback: Callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    telegram_id = callback.from_user.id

    with get_db() as db:
        history_service = ChatHistoryService(db)
        deleted_count = history_service.clear_history(telegram_id)

    await callback.message.edit_text(
        text=f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!\n\n"
        f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        f"–ù–∞—á–Ω—ë–º –æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üêº",
        reply_markup=None,
    )

    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")

    logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è {telegram_id}: {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")


@router.callback_query(F.data.startswith("cancel:"))
async def cancel_action(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è

    Args:
        callback: Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
    """
    await callback.message.edit_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback.answer()


@router.callback_query(F.data == "menu:main")
async def show_main_menu(callback: CallbackQuery):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    Args:
        callback: Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    """
    await callback.message.edit_text(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=None)

    await callback.message.answer(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    await callback.answer()

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–π –≤ –±–æ—Ç–µ PandaPal. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞,
–ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
- –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
- –ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π
- –°–æ–±–ª—é–¥–µ–Ω–∏–µ GDPR —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ä–æ–¥–∏—Ç–µ–ª–µ–π

–ö–æ–º–∞–Ω–¥—ã:
- /parent_control - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
- /child_report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–±–µ–Ω–∫—É
- /activity_monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

from datetime import datetime, timedelta
from typing import List, Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from loguru import logger

from bot.database import get_db
from bot.models import User
from bot.monitoring import log_user_activity, monitor_performance
from bot.services import UserService
from bot.services.parental_control import ActivityType, ParentalControlService

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
router = Router(name="parental_control")


@router.message(Command("parent_control"))
@monitor_performance
async def parent_control_menu(message: Message, state: FSMContext):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–æ–¥–∏—Ç–µ–ª—å
    with get_db() as db:
        user_service = UserService(db)
        user = user_service.get_user_by_telegram_id(user_id)

        if not user or user.user_type != "parent":
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode="HTML",
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π
        parental_service = ParentalControlService(db)
        children = await parental_service.get_children_of_parent(user_id)

        if not children:
            await message.answer(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.\n\n"
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_child",
                parse_mode="HTML",
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç—å–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for child in children:
            child_name = child.first_name or f"–†–µ–±–µ–Ω–æ–∫ {child.telegram_id}"
            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"üë∂ {child_name}",
                        callback_data=f"parent_view_child_{child.telegram_id}",
                    )
                ]
            )

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚ûï –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="parent_link_child")]
        )

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="parent_general_stats")]
        )

        await message.answer(
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        log_user_activity(user_id, "parent_control_menu_opened", True)


@router.callback_query(F.data.startswith("parent_view_child_"))
@monitor_performance
async def view_child_activity(callback, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞"""
    user_id = callback.from_user.id
    child_id = int(callback.data.split("_")[-1])

    with get_db() as db:
        parental_service = ParentalControlService(db)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        report = await parental_service.generate_parent_report(user_id, child_id, days=7)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        child = db.query(User).filter(User.telegram_id == child_id).first()
        child_name = child.first_name if child else f"–†–µ–±–µ–Ω–æ–∫ {child_id}"

        report_text = f"""
üìä <b>–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {child_name}</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {report.period_start.strftime('%d.%m.%Y')} - {report.period_end.strftime('%d.%m.%Y')}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {report.total_messages}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {report.blocked_messages}
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {report.suspicious_activities}
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {report.voice_messages}
‚Ä¢ AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {report.ai_interactions}

üö® <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b>
"""

        if report.moderation_summary:
            for category, count in report.moderation_summary.items():
                if count > 0:
                    report_text += f"‚Ä¢ {category}: {count}\n"

        if not any(report.moderation_summary.values()):
            report_text += "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úÖ\n"

        report_text += f"\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        for rec in report.recommendations:
            report_text += f"‚Ä¢ {rec}\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data=f"parent_monthly_report_{child_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"parent_settings_{child_id}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="parent_control_back"
                    )
                ],
            ]
        )

        await callback.message.edit_text(report_text, reply_markup=keyboard, parse_mode="HTML")

        log_user_activity(user_id, "parent_viewed_child_report", True, f"child_id={child_id}")


@router.callback_query(F.data.startswith("parent_monthly_report_"))
@monitor_performance
async def view_monthly_report(callback, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    user_id = callback.from_user.id
    child_id = int(callback.data.split("_")[-1])

    with get_db() as db:
        parental_service = ParentalControlService(db)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        report = await parental_service.generate_parent_report(user_id, child_id, days=30)

        child = db.query(User).filter(User.telegram_id == child_id).first()
        child_name = child.first_name if child else f"–†–µ–±–µ–Ω–æ–∫ {child_id}"

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
        activity_chart = "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:</b>\n"
        for i in range(7):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            day = (datetime.now() - timedelta(days=6 - i)).strftime("%d.%m")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_chart += f"{day}: {'‚ñà' * (report.total_messages // 10 + 1)}\n"

        report_text = f"""
üìä <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: {child_name}</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {report.period_start.strftime('%d.%m.%Y')} - {report.period_end.strftime('%d.%m.%Y')}

{activity_chart}

üìà <b>–ó–∞ –º–µ—Å—è—Ü:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {report.total_messages}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {report.blocked_messages}
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {report.suspicious_activities}
‚Ä¢ AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {report.ai_interactions}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
"""

        for rec in report.recommendations:
            report_text += f"‚Ä¢ {rec}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data=f"parent_view_child_{child_id}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(report_text, reply_markup=keyboard, parse_mode="HTML")

        log_user_activity(user_id, "parent_viewed_monthly_report", True, f"child_id={child_id}")


@router.callback_query(F.data == "parent_general_stats")
@monitor_performance
async def view_general_stats(callback, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    user_id = callback.from_user.id

    with get_db() as db:
        parental_service = ParentalControlService(db)
        stats = await parental_service.get_parental_control_stats()

        stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {stats['total_parents']}
‚Ä¢ –í—Å–µ–≥–æ –¥–µ—Ç–µ–π: {stats['total_children']}
‚Ä¢ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π: {stats['linked_children']}
‚Ä¢ –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö: {stats['unlinked_children']}

üìà <b>–ü–æ–∫—Ä—ã—Ç–∏–µ:</b>
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ö–≤–∞—Ç–∞: {stats['coverage_percentage']:.1f}%
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –±—É—Ñ–µ—Ä–µ: {stats['activity_records_in_buffer']}

üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ
‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω ‚úÖ
"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="parent_control_back")]
            ]
        )

        await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")

        log_user_activity(user_id, "parent_viewed_general_stats", True)


@router.callback_query(F.data.startswith("parent_link_child"))
@monitor_performance
async def link_child_start(callback, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–µ–±–µ–Ω–∫–∞"""
    user_id = callback.from_user.id

    await callback.message.edit_text(
        "üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–±–µ–Ω–∫–∞</b>\n\n"
        "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–µ–±–µ–Ω–∫–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:\n\n"
        "1. –†–µ–±–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ Telegram ID —Ä–µ–±–µ–Ω–∫–∞ (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/link_child CHILD_TELEGRAM_ID</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/link_child 123456789</code>",
        parse_mode="HTML",
    )

    log_user_activity(user_id, "parent_link_child_instructions", True)


@router.message(Command("link_child"))
@monitor_performance
async def link_child_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–µ–±–µ–Ω–∫–∞"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/link_child TELEGRAM_ID</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/link_child 123456789</code>",
            parse_mode="HTML",
        )
        return

    try:
        child_id = int(args[1])
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID</b>\n\n" "Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="HTML",
        )
        return

    with get_db() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–æ–¥–∏—Ç–µ–ª—å
        user_service = UserService(db)
        user = user_service.get_user_by_telegram_id(user_id)

        if not user or user.user_type != "parent":
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n" "–¢–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –¥–µ—Ç–µ–π.",
                parse_mode="HTML",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        child = user_service.get_user_by_telegram_id(child_id)
        if not child or child.user_type != "child":
            await message.answer(
                "‚ùå <b>–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –∏ –∏–º–µ–µ—Ç —Ç–∏–ø 'child'.",
                parse_mode="HTML",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
        if child.parent_telegram_id and child.parent_telegram_id != user_id:
            await message.answer(
                "‚ùå <b>–†–µ–±–µ–Ω–æ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω</b>\n\n"
                f"–†–µ–±–µ–Ω–æ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–¥–∏—Ç–µ–ª—é —Å ID: {child.parent_telegram_id}",
                parse_mode="HTML",
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
        parental_service = ParentalControlService(db)
        success = await parental_service.link_parent_to_child(user_id, child_id)

        if success:
            child_name = child.first_name or f"–†–µ–±–µ–Ω–æ–∫ {child_id}"
            await message.answer(
                f"‚úÖ <b>–†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
                f"üë∂ –ò–º—è: {child_name}\n"
                f"üÜî ID: {child_id}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–±–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ "
                "–∫–æ–º–∞–Ω–¥—É /parent_control",
                parse_mode="HTML",
            )
            log_user_activity(user_id, "parent_child_linked", True, f"child_id={child_id}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
            )
            log_user_activity(user_id, "parent_child_link_failed", False, f"child_id={child_id}")


@router.callback_query(F.data == "parent_control_back")
@monitor_performance
async def back_to_parent_control(callback, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    user_id = callback.from_user.id

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    with get_db() as db:
        user_service = UserService(db)
        user = user_service.get_user_by_telegram_id(user_id)

        if not user or user.user_type != "parent":
            await callback.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode="HTML")
            return

        parental_service = ParentalControlService(db)
        children = await parental_service.get_children_of_parent(user_id)

        if not children:
            await callback.message.edit_text(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.\n\n"
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link_child",
                parse_mode="HTML",
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for child in children:
            child_name = child.first_name or f"–†–µ–±–µ–Ω–æ–∫ {child.telegram_id}"
            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"üë∂ {child_name}",
                        callback_data=f"parent_view_child_{child.telegram_id}",
                    )
                ]
            )

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚ûï –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="parent_link_child")]
        )

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="parent_general_stats")]
        )

        await callback.message.edit_text(
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        log_user_activity(user_id, "parent_control_back", True)

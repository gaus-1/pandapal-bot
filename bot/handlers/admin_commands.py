"""
üõ°Ô∏è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê 24/7
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from bot.services.simple_monitor import get_simple_monitor
from bot.services.ai_service_solid import get_ai_service


router = Router()


@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã 24/7"""
    try:
        if not bot_24_7_service:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å 24/7 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        status = bot_24_7_service.get_health_status()
        
        uptime_hours = status["uptime_seconds"] // 3600
        uptime_minutes = (status["uptime_seconds"] % 3600) // 60
        
        response = f"""ü§ñ <b>–°—Ç–∞—Ç—É—Å PandaPal Bot 24/7</b>

üìä <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: <code>{status['mode']}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if status['is_running'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours}—á {uptime_minutes}–º

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{status['messages_processed']}</code>
‚Ä¢ –û—à–∏–±–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <code>{status['errors_recovered']}</code>
‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∂–∏–º–∞: <code>{status['mode_switches']}</code>

üîÑ <b>–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: <code>{status['queue_size']}</code>
‚Ä¢ –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π –æ—á–µ—Ä–µ–¥–∏: <code>{status['queue_overflows']}</code>

üåê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>
‚Ä¢ Webhook URL: <code>{status['webhook_url'] or '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}</code>
‚Ä¢ Polling –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if status['polling_active'] else '‚ùå'}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <code>{status['last_activity'][:19]}</code>"""

        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã status: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")


@router.message(Command("health"))
async def cmd_health(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ (SOLID)"""
    try:
        monitor = get_simple_monitor()
        status = monitor.get_current_status()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_status = status.get("overall", "unknown")
        overall_emoji = "‚úÖ" if overall_status == "healthy" else "‚ö†Ô∏è"
        
        response = f"""üõ°Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã PandaPal</b>

{overall_emoji} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> <code>{overall_status.upper()}</code>

üîç <b>–î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:</b>"""

        for service_name, service_status in status.items():
            if service_name != "overall":
                status_emoji = "‚úÖ" if service_status == "healthy" else "‚ö†Ô∏è"
                response += f"\n{status_emoji} <b>{service_name}:</b> <code>{service_status}</code>"

        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã health: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è")


@router.message(Command("ai_status"))
async def cmd_ai_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI (SOLID)"""
    try:
        ai_service = get_ai_service()
        model_info = ai_service.get_model_info()
        
        response = f"""ü§ñ <b>–°—Ç–∞—Ç—É—Å AI</b>

üì¶ <b>–ú–æ–¥–µ–ª—å:</b> <code>{model_info['model']}</code>
üéØ <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> <code>{model_info['temperature']}</code>
üìä <b>Max —Ç–æ–∫–µ–Ω–æ–≤:</b> <code>{model_info['max_tokens']}</code>
‚úÖ <b>–ü—É–±–ª–∏—á–Ω–æ–µ –∏–º—è:</b> <code>{model_info['public_name']}</code>"""

        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ai_status: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AI")


@router.message(Command("errors"))
async def cmd_errors(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
    try:
        error_stats = error_recovery_service.get_error_stats()
        
        response = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫</b>

üî¢ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: <code>{error_stats['total_errors']}</code>
‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: <code>{error_stats['errors_last_hour']}</code>
‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: <code>{error_stats['errors_last_day']}</code>

üìà <b>–ü–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫:</b>"""

        for error_type, count in error_stats["error_types"].items():
            response += f"\n‚Ä¢ <b>{error_type}:</b> <code>{count}</code>"

        response += f"\n\nüö® <b>–ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:</b>"
        for severity, count in error_stats["severity_distribution"].items():
            if count > 0:
                severity_emoji = {"critical": "üî¥", "high": "üü†", "medium": "üü°", "low": "üü¢"}
                emoji = severity_emoji.get(severity, "‚ö™")
                response += f"\n{emoji} <b>{severity}:</b> <code>{count}</code>"

        if error_stats["recent_errors"]:
            response += f"\n\n‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>"
            for error in error_stats["recent_errors"][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                response += f"\n‚Ä¢ <code>{error['type']}</code> - {error['message'][:50]}..."

        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã errors: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫")


@router.message(Command("restart_ai"))
async def cmd_restart_ai(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ AI (SOLID)"""
    try:
        # –í SOLID –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ AI —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ singleton
        ai_service = get_ai_service()
        logger.info("üîÑ AI —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        await message.answer("‚úÖ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã restart_ai: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI")


@router.message(Command("clear_errors"))
async def cmd_clear_errors(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        logger.info("üßπ –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–≤ SOLID –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        await message.answer("‚úÖ –í —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã clear_errors: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")


@router.message(Command("force_check"))
async def cmd_force_check(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (SOLID)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI
        ai_service = get_ai_service()
        test_response = await ai_service.generate_response("–¢–µ—Å—Ç", user_age=10)
        ai_ok = bool(test_response and len(test_response) > 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
        monitor = get_simple_monitor()
        monitor_status = monitor.get_current_status()
        monitor_ok = monitor_status.get("overall") == "healthy"
        
        if ai_ok and monitor_ok:
            await message.answer("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            await message.answer("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã force_check: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")


@router.message(Command("system_info"))
async def cmd_system_info(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        import os
        import psutil
        import platform
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_info = f"""üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>

üñ•Ô∏è <b>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –°–∏—Å—Ç–µ–º–∞: <code>{platform.system()}</code>
‚Ä¢ –í–µ—Ä—Å–∏—è: <code>{platform.release()}</code>
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <code>{platform.machine()}</code>

üíæ <b>–ü–∞–º—è—Ç—å:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: <code>{psutil.virtual_memory().available // (1024**3)} GB</code>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{psutil.virtual_memory().percent}%</code>

üíΩ <b>–î–∏—Å–∫:</b>
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: <code>{psutil.disk_usage('/').free // (1024**3)} GB</code>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{psutil.disk_usage('/').percent}%</code>

üåê <b>–°—Ä–µ–¥–∞:</b>
‚Ä¢ Python: <code>{platform.python_version()}</code>
‚Ä¢ Render: <code>{'–î–∞' if os.getenv('RENDER') else '–ù–µ—Ç'}</code>
‚Ä¢ PORT: <code>{os.getenv('PORT', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}</code>"""

        await message.answer(system_info)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã system_info: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(Command("admin"))
async def cmd_admin_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """üõ°Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã PandaPal</b>

üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã 24/7
‚Ä¢ /health - –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ /ai_status - –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
‚Ä¢ /errors - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ /restart_ai - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
‚Ä¢ /clear_errors - –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
‚Ä¢ /force_check - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ /system_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

üí° <b>–°–ø—Ä–∞–≤–∫–∞:</b>
‚Ä¢ /help - –û–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"""

    await message.answer(help_text)

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–Ω–∏—è —Å AI
–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ ‚Äî –¥–∏–∞–ª–æ–≥ —Å PandaPalAI
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, PhotoSize
from loguru import logger

from bot.database import get_db
from bot.monitoring import log_user_activity, monitor_performance
from bot.services import (
    ChatHistoryService,
    ContentModerationService,
    GeminiAIService,
    UserService,
)
from bot.services.advanced_moderation import ModerationResult
from bot.services.parental_control import ActivityType, ParentalControlService

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è AI —á–∞—Ç–∞
router = Router(name="ai_chat")


@router.message(F.text & (F.text == "üí¨ –û–±—â–µ–Ω–∏–µ —Å AI"))
@monitor_performance
async def start_ai_chat(message: Message, state: FSMContext):
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è —Å AI

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await message.answer(
        text="üêº <b>–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –æ—Ç–≤–µ—á—É!\n\n"
        "–Ø –ø–æ–º–Ω—é –Ω–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å "
        "–∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã üí°",
        parse_mode="HTML",
    )


@router.message(F.text)
@monitor_performance
async def handle_ai_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI

    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI)
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–º–æ–¥–µ—Ä–∞—Ü–∏—è)
    4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Gemini AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    5. –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
    6. –ü—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç AI
    7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    8. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        message: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    telegram_id = message.from_user.id
    user_message = message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        moderation_service = ContentModerationService()

        # –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        is_safe, reason = moderation_service.is_safe_content(user_message)

        if not is_safe:
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç {telegram_id}: {reason}")
            moderation_service.log_blocked_content(telegram_id, user_message, reason)
            log_user_activity(telegram_id, "blocked_content", False, reason)

            safe_response = moderation_service.get_safe_response_alternative("blocked_content")
            await message.answer(text=safe_response)
            return

        # –ó–∞—Ç–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
        user_context = {
            "telegram_id": telegram_id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
        }

        try:
            advanced_result = await moderation_service.advanced_moderate_content(
                user_message, user_context
            )

            # –ï—Å–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
            if not advanced_result.is_safe:
                logger.warning(
                    f"üö´ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç {telegram_id}: "
                    f"{advanced_result.reason} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {advanced_result.confidence:.2f})"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                log_user_activity(
                    telegram_id,
                    "advanced_blocked_content",
                    False,
                    f"{advanced_result.category.value if advanced_result.category else 'unknown'}: {advanced_result.reason}",
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å
                try:
                    with get_db() as db:
                        user_service = UserService(db)
                        user = user_service.get_user_by_telegram_id(telegram_id)

                        if user and user.user_type == "child":
                            parental_service = ParentalControlService(db)
                            await parental_service.record_child_activity(
                                child_telegram_id=telegram_id,
                                activity_type=ActivityType.MESSAGE_BLOCKED,
                                details={
                                    "category": (
                                        advanced_result.category.value
                                        if advanced_result.category
                                        else "unknown"
                                    ),
                                    "confidence": advanced_result.confidence,
                                    "reason": advanced_result.reason,
                                },
                                message_content=user_message,
                                moderation_result={
                                    "level": advanced_result.level.value,
                                    "category": (
                                        advanced_result.category.value
                                        if advanced_result.category
                                        else None
                                    ),
                                    "confidence": advanced_result.confidence,
                                },
                            )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                response_text = (
                    advanced_result.alternative_response
                    or moderation_service.get_safe_response_alternative("blocked_content")
                )
                await message.answer(text=response_text)
                return

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with get_db() as db:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            user_service = UserService(db)
            history_service = ChatHistoryService(db)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_service.get_or_create_user(
                telegram_id=telegram_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history = history_service.get_formatted_history_for_ai(telegram_id)

            logger.info(
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {telegram_id} ({user.first_name}): "
                f"{user_message[:50]}... | –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
            ai_service = GeminiAIService()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–∞
            ai_response = await ai_service.generate_response(
                user_message=user_message,
                chat_history=history,
                user_age=user.age,
                user_grade=user.grade,
            )

            # –ü—Ä–æ–º–æ–¥–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            ai_response = moderation_service.sanitize_ai_response(ai_response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_service.add_message(
                telegram_id=telegram_id, message_text=user_message, message_type="user"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_service.add_message(
                telegram_id=telegram_id, message_text=ai_response, message_type="ai"
            )

            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log_user_activity(telegram_id, "ai_message_sent", True)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–±–µ–Ω–æ–∫)
            if user.user_type == "child":
                try:
                    parental_service = ParentalControlService(db)
                    await parental_service.record_child_activity(
                        child_telegram_id=telegram_id,
                        activity_type=ActivityType.AI_INTERACTION,
                        details={
                            "message_length": len(user_message),
                            "response_length": len(ai_response),
                            "history_messages": len(history),
                        },
                        message_content=user_message,
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            text=ai_response,
            parse_mode="Markdown",  # Gemini –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_activity(telegram_id, "ai_message_error", False, str(e))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(
            text="üòî –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        )


@router.message(F.voice)
async def handle_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ Telegram

    Args:
        message: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
    if message.text:
        # –ï—Å–ª–∏ Telegram —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        logger.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {message.text[:50]}...")

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_activity(message.from_user.id, "voice_message_sent", True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_ai_message(message, None)
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        await message.answer(
            text="üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º! üìù"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        log_user_activity(
            message.from_user.id, "voice_recognition_failed", False, "No text recognized"
        )


@router.message(F.photo)
@monitor_performance
async def handle_image(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini Vision API

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo: PhotoSize = max(message.photo, key=lambda p: p.file_size)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if photo.file_size > 20 * 1024 * 1024:  # 20MB –ª–∏–º–∏—Ç
            await message.answer(
                "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º—É–º 20MB. "
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∂–∞—Ç—å —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞ üìè"
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        processing_msg = await message.answer("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏! üêº")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file = await message.bot.get_file(photo.file_id)
        image_data = await message.bot.download_file(file.file_path)

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_bytes = image_data.read()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        async with get_db() as db:
            user_service = UserService(db)
            user = await user_service.get_user_by_telegram_id(message.from_user.id)

            if not user:
                await processing_msg.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start")
                return

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
                ai_service = GeminiAIService()
                parental_control = ParentalControlService(db)
                history_service = ChatHistoryService(db)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            is_safe, reason = await ai_service.moderate_image_content(image_bytes)

            if not is_safe:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await parental_control.log_child_activity(
                    child_telegram_id=message.from_user.id,
                    activity_type=ActivityType.MESSAGE_BLOCKED,
                    message_content=f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï] {reason}",
                    alert_level="WARNING",
                    moderation_result={"reason": reason, "type": "image_moderation"},
                )

                await processing_msg.edit_text(
                    "üö´ –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ—Ç–µ–π. "
                    "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üêº"
                )
                log_user_activity(message.from_user.id, "image_blocked", False, reason)
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
            caption = message.caption or ""

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
            ai_response = await ai_service.analyze_image(
                image_data=image_bytes,
                user_message=caption,
                user_age=user.age,
                user_grade=user.grade,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await history_service.add_message(
                user_telegram_id=message.from_user.id,
                message_text=f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï] {caption}" if caption else "[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï]",
                message_type="user",
            )

            await history_service.add_message(
                user_telegram_id=message.from_user.id, message_text=ai_response, message_type="ai"
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            await parental_control.log_child_activity(
                child_telegram_id=message.from_user.id,
                activity_type=ActivityType.MESSAGE_SENT,
                message_content=f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï] {caption}" if caption else "[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï]",
                alert_level="INFO",
                moderation_result={"status": "safe", "type": "image_analysis"},
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await processing_msg.edit_text(ai_response)
            log_user_activity(
                message.from_user.id, "image_analyzed", True, f"Size: {len(image_bytes)} bytes"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "üñºÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. " "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ! üêº"
        )
        log_user_activity(message.from_user.id, "image_error", False, str(e))


@router.message(F.document)
@monitor_performance
async def handle_document(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, Word –∏ —Ç.–¥.)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = message.document

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        supported_formats = {
            "application/pdf": "PDF",
            "application/msword": "Word",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "Word",
            "text/plain": "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
        }

        file_type = supported_formats.get(document.mime_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
        if document.file_size > 20 * 1024 * 1024:
            await message.answer(
                "üìÑ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20MB. "
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üìè"
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        await message.answer(
            f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {document.file_name}\n"
            f"–¢–∏–ø: {file_type}\n"
            f"–†–∞–∑–º–µ—Ä: {document.file_size / 1024:.1f} KB\n\n"
            "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É. "
            "–ü–æ–∫–∞ –ª—É—á—à–µ —Å–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –ø–æ–º–æ–≥—É! üìù"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        log_user_activity(
            message.from_user.id,
            "document_upload",
            True,
            f"Type: {file_type}, Size: {document.file_size}",
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.answer(
            "üìÑ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. " "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏! üìù"
        )
        log_user_activity(message.from_user.id, "document_error", False, str(e))

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–Ω–∏—è —Å AI
–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ ‚Äî –¥–∏–∞–ª–æ–≥ —Å PandaPalAI
@module bot.handlers.ai_chat
"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from bot.database import get_db
from bot.services import (
    ChatHistoryService,
    ContentModerationService,
    GeminiAIService,
    UserService,
)
from bot.monitoring import log_user_activity, monitor_performance

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è AI —á–∞—Ç–∞
router = Router(name="ai_chat")


@router.message(F.text & (F.text == "üí¨ –û–±—â–µ–Ω–∏–µ —Å AI"))
@monitor_performance
async def start_ai_chat(message: Message, state: FSMContext):
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è —Å AI

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await message.answer(
        text="üêº <b>–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –æ—Ç–≤–µ—á—É!\n\n"
        "–Ø –ø–æ–º–Ω—é –Ω–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å "
        "–∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã üí°",
        parse_mode="HTML",
    )


@router.message(F.text)
@monitor_performance
async def handle_ai_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI

    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI)
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–º–æ–¥–µ—Ä–∞—Ü–∏—è)
    4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Gemini AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    5. –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
    6. –ü—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç AI
    7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    8. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        message: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    telegram_id = message.from_user.id
    user_message = message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        moderation_service = ContentModerationService()
        is_safe, reason = moderation_service.is_safe_content(user_message)

        if not is_safe:
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç {telegram_id}: {reason}")

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            moderation_service.log_blocked_content(telegram_id, user_message, reason)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log_user_activity(telegram_id, "blocked_content", False, reason)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
            safe_response = moderation_service.get_safe_response_alternative(
                "blocked_content"
            )
            await message.answer(text=safe_response)
            return

        # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with get_db() as db:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            user_service = UserService(db)
            history_service = ChatHistoryService(db)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_service.get_or_create_user(
                telegram_id=telegram_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history = history_service.get_formatted_history_for_ai(telegram_id)

            logger.info(
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {telegram_id} ({user.first_name}): "
                f"{user_message[:50]}... | –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
            ai_service = GeminiAIService()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–∞
            ai_response = await ai_service.generate_response(
                user_message=user_message,
                chat_history=history,
                user_age=user.age,
                user_grade=user.grade,
            )

            # –ü—Ä–æ–º–æ–¥–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            ai_response = moderation_service.sanitize_ai_response(ai_response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_service.add_message(
                telegram_id=telegram_id, message_text=user_message, message_type="user"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_service.add_message(
                telegram_id=telegram_id, message_text=ai_response, message_type="ai"
            )

            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log_user_activity(telegram_id, "ai_message_sent", True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            text=ai_response,
            parse_mode="Markdown",  # Gemini –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_activity(telegram_id, "ai_message_error", False, str(e))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(
            text="üòî –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        )


@router.message(F.photo)
async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∑–∞–¥–∞—á–∏ —Å —Ñ–æ—Ç–æ, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç.–¥.)
    TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini Vision

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    """
    await message.answer(
        text="üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!\n"
        "–ü–æ–∫–∞ –æ–ø–∏—à–∏ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –ø–æ–º–æ–≥—É! üêº"
    )


@router.message(F.voice)
async def handle_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ Telegram

    Args:
        message: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
    if message.text:
        # –ï—Å–ª–∏ Telegram —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        logger.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {message.text[:50]}...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_activity(message.from_user.id, "voice_message_sent", True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_ai_message(message, None)
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        await message.answer(
            text="üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º! üìù"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        log_user_activity(message.from_user.id, "voice_recognition_failed", False, "No text recognized")


@router.message(F.document)
async def handle_document(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, Word –∏ —Ç.–¥.)
    TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    """
    await message.answer(
        text="üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!\n"
        "–ü–æ–∫–∞ —Å–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å—é–¥–∞ ‚Äî —è –ø–æ–º–æ–≥—É! üìù"
    )

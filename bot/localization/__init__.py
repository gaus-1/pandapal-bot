"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è PandaPal Bot.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
–ª–µ–≥–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤.
"""

import json
import os
from pathlib import Path
from typing import Any, Dict, Optional


class LocalizationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è PandaPal Bot.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
    """

    def __init__(self, locale_dir: str = "bot/localization/locales"):
        self.locale_dir = Path(locale_dir)
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.current_language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        self.fallback_language = "en"  # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

        self._load_translations()

    def _load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
        if not self.locale_dir.exists():
            self._create_default_translations()
            return

        for locale_file in self.locale_dir.glob("*.json"):
            language = locale_file.stem
            try:
                with open(locale_file, "r", encoding="utf-8") as f:
                    self.translations[language] = json.load(f)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è {language}: {e}")

    def _create_default_translations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        self.locale_dir.mkdir(parents=True, exist_ok=True)

        # –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        ru_translations = {
            "welcome": {
                "greeting": "–ü—Ä–∏–≤–µ—Ç! –Ø PandaPal - —Ç–≤–æ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üêº",
                "help": "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É—Ä–æ–∫–∞–º–∏, –ø–æ–∏–≥—Ä–∞—é –≤ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!",
                "start_learning": "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É—á–∏—Ç—å—Å—è! üìö",
            },
            "game": {
                "start": "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É PandaPal Go! üéÆ",
                "pause": "–ü–∞—É–∑–∞",
                "resume": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                "level_complete": "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! üéâ",
                "game_over": "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üí™",
            },
            "math": {
                "solve_task": "–†–µ—à–∏ –∑–∞–¥–∞—á—É:",
                "correct": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéØ",
                "incorrect": "–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§î",
                "hint": "–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}",
            },
            "errors": {
                "generic": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
                "network": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
                "rate_limit": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.",
            },
            "parental_control": {
                "activity_report": "–û—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–±–µ–Ω–∫–∞",
                "time_spent": "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {minutes} –º–∏–Ω—É—Ç",
                "levels_completed": "–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: {count}",
            },
        }

        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        en_translations = {
            "welcome": {
                "greeting": "Hi! I'm PandaPal - your educational assistant! üêº",
                "help": "I'll help you with lessons, play educational games, and answer questions!",
                "start_learning": "Let's start learning! üìö",
            },
            "game": {
                "start": "Start PandaPal Go game! üéÆ",
                "pause": "Pause",
                "resume": "Resume",
                "level_complete": "Level completed! üéâ",
                "game_over": "Game over! Try again! üí™",
            },
            "math": {
                "solve_task": "Solve the task:",
                "correct": "Correct! üéØ",
                "incorrect": "Not quite right. Try again! ü§î",
                "hint": "Hint: {hint}",
            },
            "errors": {
                "generic": "An error occurred. Please try again!",
                "network": "Network issues. Check your connection.",
                "rate_limit": "Too many requests. Please wait a moment.",
            },
            "parental_control": {
                "activity_report": "Child activity report",
                "time_spent": "Time spent: {minutes} minutes",
                "levels_completed": "Levels completed: {count}",
            },
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        with open(self.locale_dir / "ru.json", "w", encoding="utf-8") as f:
            json.dump(ru_translations, f, ensure_ascii=False, indent=2)

        with open(self.locale_dir / "en.json", "w", encoding="utf-8") as f:
            json.dump(en_translations, f, ensure_ascii=False, indent=2)

        self.translations = {"ru": ru_translations, "en": en_translations}

    def set_language(self, language: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞.

        Args:
            language: –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, etc.)
        """
        if language in self.translations:
            self.current_language = language
        else:
            print(f"‚ö†Ô∏è –Ø–∑—ã–∫ {language} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {self.current_language}")

    def get_language(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞.

        Returns:
            str: –ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        """
        return self.current_language

    def translate(self, key: str, **kwargs) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥ –∫–ª—é—á–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫.

        Args:
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "welcome.greeting")
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translation = self._get_nested_value(key, self.current_language)

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º fallback —è–∑—ã–∫
            if translation is None and self.current_language != self.fallback_language:
                translation = self._get_nested_value(key, self.fallback_language)

            # –ï—Å–ª–∏ –∏ fallback –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
            if translation is None:
                return f"[{key}]"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if kwargs:
                try:
                    return translation.format(**kwargs)
                except KeyError as e:
                    return f"[{key}] (missing param: {e})"

            return translation

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–ª—é—á–∞ {key}: {e}")
            return f"[{key}]"

    def _get_nested_value(self, key: str, language: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É.

        Args:
            key: –ö–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ "section.key"
            language: –Ø–∑—ã–∫

        Returns:
            Optional[str]: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
        """
        if language not in self.translations:
            return None

        value = self.translations[language]
        keys = key.split(".")

        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return None

        return value if isinstance(value, str) else None

    def get_available_languages(self) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤
        """
        return list(self.translations.keys())

    def add_translation(self, language: str, key: str, value: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.

        Args:
            language: –ö–æ–¥ —è–∑—ã–∫–∞
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        """
        if language not in self.translations:
            self.translations[language] = {}

        # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        keys = key.split(".")
        current = self.translations[language]

        for k in keys[:-1]:
            if k not in current:
                current[k] = {}
            current = current[k]

        current[keys[-1]] = value

    def save_translations(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª—ã."""
        for language, translations in self.translations.items():
            locale_file = self.locale_dir / f"{language}.json"
            with open(locale_file, "w", encoding="utf-8") as f:
                json.dump(translations, f, ensure_ascii=False, indent=2)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
_localization_manager: Optional[LocalizationManager] = None


def get_localization_manager() -> LocalizationManager:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.

    Returns:
        LocalizationManager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """
    global _localization_manager

    if _localization_manager is None:
        _localization_manager = LocalizationManager()

    return _localization_manager


def t(key: str, **kwargs) -> str:
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∫–ª—é—á–∞.

    Args:
        key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    manager = get_localization_manager()
    return manager.translate(key, **kwargs)


def set_language(language: str):
    """
    –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞.

    Args:
        language: –ö–æ–¥ —è–∑—ã–∫–∞
    """
    manager = get_localization_manager()
    manager.set_language(language)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != "__main__":
    get_localization_manager()

"""
ü§ñ –°–ò–°–¢–ï–ú–ê FALLBACK –î–õ–Ø AI
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ AI –ø—Ä–∏ —Å–±–æ—è—Ö Gemini
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from enum import Enum
import json
import random

from loguru import logger
import aiohttp
from google.generativeai import GenerativeModel
from google.generativeai.types import HarmCategory, HarmBlockThreshold


class AIProvider(Enum):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã AI"""
    GEMINI = "gemini"
    OPENAI_FALLBACK = "openai_fallback"
    LOCAL_FALLBACK = "local_fallback"
    CACHED_RESPONSES = "cached_responses"


class AIFallbackService:
    """ü§ñ –°–µ—Ä–≤–∏—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.current_provider = AIProvider.GEMINI
        self.fallback_responses = self._load_fallback_responses()
        self.provider_status = {
            AIProvider.GEMINI: True,
            AIProvider.OPENAI_FALLBACK: True,
            AIProvider.LOCAL_FALLBACK: True,
            AIProvider.CACHED_RESPONSES: True,
        }
        self.provider_errors = {provider: 0 for provider in AIProvider}
        self.max_errors = 3
        self.last_successful_provider = AIProvider.GEMINI
        
    def _load_fallback_responses(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è fallback"""
        return {
            "greeting": [
                "–ü—Ä–∏–≤–µ—Ç! –Ø PandaPalAI, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–µ! üêº",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É—Ä–æ–∫–∞–º–∏! üìö",
                "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å —É—á–µ–±–æ–π? ‚ú®"
            ],
            "math": [
                "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ! üìê",
                "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á—É üßÆ",
                "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–µ—à–µ–Ω–∏–µ–º! üí°"
            ],
            "science": [
                "–ù–∞—É–∫–∞ - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–∑—É—á–∞–µ—à—å üî¨",
                "–ì–æ—Ç–æ–≤ –æ–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã! üåü",
                "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ! üß™"
            ],
            "language": [
                "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –∑–Ω–∞–Ω–∏–π! –ü–æ–º–æ–≥—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ üìù",
                "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π –∏ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ–º! ‚úçÔ∏è",
                "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª–∞ —è–∑—ã–∫–∞ –≤–º–µ—Å—Ç–µ! üìñ"
            ],
            "history": [
                "–ò—Å—Ç–æ—Ä–∏—è - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ø—Ä–æ—à–ª–æ–µ! üèõÔ∏è",
                "–ì–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏! üìú",
                "–î–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–µ! üóø"
            ],
            "error": [
                "–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É! üîß",
                "–°–µ–π—á–∞—Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å. –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –±—É–¥—É –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! ‚ö°",
                "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å! üöÄ"
            ],
            "image": [
                "–í–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ! üëÄ",
                "–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? üì∏",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –†–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –≤–∏–∂—É! üñºÔ∏è"
            ],
            "voice": [
                "–°–ª—ã—à—É —Ç–µ–±—è! –†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å! üé§",
                "–ü–æ–Ω—è–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üëÇ",
                "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –∏–∑—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è? üó£Ô∏è"
            ]
        }
    
    async def generate_response(
        self, 
        message: str, 
        user_telegram_id: int,
        message_type: str = "text",
        image_data: Optional[bytes] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è fallback
        category = self._categorize_message(message, message_type)
        
        # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            response = await self._try_provider(
                self.current_provider, 
                message, 
                user_telegram_id, 
                message_type, 
                image_data
            )
            
            if response:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                self.provider_errors[self.current_provider] = 0
                self.last_successful_provider = self.current_provider
                return response
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {self.current_provider.value}: {e}")
            self.provider_errors[self.current_provider] += 1
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫
            if self.provider_errors[self.current_provider] >= self.max_errors:
                await self._switch_to_fallback()
        
        # –ü—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        return await self._try_fallback_providers(message, user_telegram_id, category)
    
    async def _try_provider(
        self, 
        provider: AIProvider, 
        message: str, 
        user_telegram_id: int,
        message_type: str,
        image_data: Optional[bytes] = None
    ) -> Optional[str]:
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        
        if provider == AIProvider.GEMINI:
            return await self._try_gemini(message, user_telegram_id, message_type, image_data)
        elif provider == AIProvider.OPENAI_FALLBACK:
            return await self._try_openai_fallback(message, user_telegram_id)
        elif provider == AIProvider.LOCAL_FALLBACK:
            return await self._try_local_fallback(message, user_telegram_id)
        elif provider == AIProvider.CACHED_RESPONSES:
            return await self._try_cached_responses(message, user_telegram_id)
        
        return None
    
    async def _try_gemini(
        self, 
        message: str, 
        user_telegram_id: int,
        message_type: str,
        image_data: Optional[bytes] = None
    ) -> Optional[str]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini AI"""
        try:
            from bot.services.ai_service import GeminiAIService
            ai_service = GeminiAIService()
            
            if message_type == "image" and image_data:
                response = await ai_service.process_image_with_ai(image_data, message)
            elif message_type == "voice":
                response = await ai_service.generate_response(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            else:
                response = await ai_service.generate_response(message)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini AI: {e}")
            raise
    
    async def _try_openai_fallback(self, message: str, user_telegram_id: int) -> Optional[str]:
        """Fallback —á–µ—Ä–µ–∑ OpenAI (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ fallback
            logger.info("üîÑ OpenAI fallback –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –¥–∞–ª—å—à–µ")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI fallback: {e}")
            return None
    
    async def _try_local_fallback(self, message: str, user_telegram_id: int) -> Optional[str]:
        """–õ–æ–∫–∞–ª—å–Ω—ã–π fallback —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            message_lower = message.lower()
            
            if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hi", "hello"]):
                return random.choice(self.fallback_responses["greeting"])
            elif any(word in message_lower for word in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ—à–∞", "—Ä–µ—à–∏—Ç—å", "–∑–∞–¥–∞—á–∞"]):
                return random.choice(self.fallback_responses["math"])
            elif any(word in message_lower for word in ["–Ω–∞—É–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è"]):
                return random.choice(self.fallback_responses["science"])
            elif any(word in message_lower for word in ["—Ä—É—Å—Å–∫–∏–π", "—è–∑—ã–∫", "–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞", "–ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ"]):
                return random.choice(self.fallback_responses["language"])
            elif any(word in message_lower for word in ["–∏—Å—Ç–æ—Ä–∏—è", "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–ø—Ä–æ—à–ª–æ–µ"]):
                return random.choice(self.fallback_responses["history"])
            else:
                return "–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ —è —Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! ü§ñ"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ fallback: {e}")
            return None
    
    async def _try_cached_responses(self, message: str, user_telegram_id: int) -> Optional[str]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∫—ç—à–µ
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            category = self._categorize_message(message, "text")
            return random.choice(self.fallback_responses.get(category, self.fallback_responses["error"]))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")
            return None
    
    def _categorize_message(self, message: str, message_type: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ fallback –æ—Ç–≤–µ—Ç–∞"""
        if message_type == "image":
            return "image"
        elif message_type == "voice":
            return "voice"
        
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hi", "hello"]):
            return "greeting"
        elif any(word in message_lower for word in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ—à–∞", "—Ä–µ—à–∏—Ç—å", "–∑–∞–¥–∞—á–∞"]):
            return "math"
        elif any(word in message_lower for word in ["–Ω–∞—É–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è"]):
            return "science"
        elif any(word in message_lower for word in ["—Ä—É—Å—Å–∫–∏–π", "—è–∑—ã–∫", "–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞", "–ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ"]):
            return "language"
        elif any(word in message_lower for word in ["–∏—Å—Ç–æ—Ä–∏—è", "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–ø—Ä–æ—à–ª–æ–µ"]):
            return "history"
        else:
            return "error"
    
    async def _try_fallback_providers(self, message: str, user_telegram_id: int, category: str) -> str:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É"""
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è fallback
        fallback_order = [
            AIProvider.LOCAL_FALLBACK,
            AIProvider.CACHED_RESPONSES,
        ]
        
        for provider in fallback_order:
            try:
                if not self.provider_status[provider]:
                    continue
                    
                response = await self._try_provider(provider, message, user_telegram_id, "text", None)
                if response:
                    logger.info(f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ {provider.value}")
                    return response
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider.value}: {e}")
                self.provider_errors[provider] += 1
                
                if self.provider_errors[provider] >= self.max_errors:
                    self.provider_status[provider] = False
        
        # –ï—Å–ª–∏ –≤—Å–µ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        return random.choice(self.fallback_responses["error"])
    
    async def _switch_to_fallback(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        logger.warning(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {self.current_provider.value} –Ω–∞ fallback")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        self.provider_status[self.current_provider] = False
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π fallback
        if self.provider_status[self.last_successful_provider]:
            self.current_provider = self.last_successful_provider
        else:
            self.current_provider = AIProvider.LOCAL_FALLBACK
        
        logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä {self.current_provider.value}")
    
    async def reset_provider(self, provider: AIProvider):
        """–°–±—Ä–æ—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–≤–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ)"""
        self.provider_status[provider] = True
        self.provider_errors[provider] = 0
        logger.info(f"üîÑ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider.value} —Å–±—Ä–æ—à–µ–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
    
    async def get_provider_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return {
            "current_provider": self.current_provider.value,
            "last_successful_provider": self.last_successful_provider.value,
            "providers": {
                provider.value: {
                    "status": "active" if self.provider_status[provider] else "inactive",
                    "errors": self.provider_errors[provider],
                    "max_errors": self.max_errors
                }
                for provider in AIProvider
            },
            "timestamp": datetime.now().isoformat()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä fallback —Å–µ—Ä–≤–∏—Å–∞
ai_fallback_service = AIFallbackService()

"""
–°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã: –ø–æ–ª–∏—Ç–∏–∫–∞, –Ω–∞—Å–∏–ª–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ —Ç.–¥.
OWASP A04:2021 - Insecure Design (–∑–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π)
@module bot.services.moderation_service
"""

import re
from typing import Tuple, List, Optional
from bot.config import settings, FORBIDDEN_PATTERNS
from loguru import logger


class ContentModerationService:
    """
    –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        self.forbidden_topics = settings.get_forbidden_topics_list()
        self.forbidden_patterns = FORBIDDEN_PATTERNS
        self.filter_level = settings.content_filter_level
    
    def is_safe_content(self, text: str) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            Tuple[bool, Optional[str]]: (–±–µ–∑–æ–ø–∞—Å–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        
        Example:
            >>> is_safe, reason = moderation.is_safe_content("–ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π")
            >>> print(is_safe)  # True
            
            >>> is_safe, reason = moderation.is_safe_content("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–ª–∏—Ç–∏–∫—É")
            >>> print(is_safe)  # False
            >>> print(reason)  # "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞: –ø–æ–ª–∏—Ç–∏–∫–∞"
        """
        if not text:
            return True, None
        
        text_lower = text.lower()
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
        for topic in self.forbidden_topics:
            if topic.lower() in text_lower:
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: —Ç–µ–º–∞ '{topic}'")
                return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞: {topic}"
        
        # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è)
        for pattern in self.forbidden_patterns:
            if pattern.lower() in text_lower:
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}'")
                return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞"
        
        # –£—Ä–æ–≤–µ–Ω—å 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω—É (–µ—Å–ª–∏ filter_level >= 4)
        if self.filter_level >= 4:
            if self._contains_profanity(text_lower):
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞")
                return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—ã–µ —Å–ª–æ–≤–∞"
        
        # –£—Ä–æ–≤–µ–Ω—å 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã/–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if self.filter_level >= 5:
            if self._contains_suspicious_patterns(text):
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω
        return True, None
    
    def _contains_profanity(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (–±–∞–∑–æ–≤–∞—è)
        
        Args:
            text: –¢–µ–∫—Å—Ç (—É–∂–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç
        """
        # –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å)
        profanity_words = [
            '–±–ª—è—Ç—å', '–±–ª—è', '—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–∞—Ç—å', '–µ–±–∞–Ω',
            '—Å—É–∫–∞', '–º—É–¥–∞–∫', '–¥–µ–±–∏–ª', '–∏–¥–∏–æ—Ç',
            # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É better-profanity
        ]
        
        for word in profanity_words:
            if word in text:
                return True
        
        return False
    
    def _contains_suspicious_patterns(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL Injection –ø–æ–ø—ã—Ç–∫–∏
        sql_patterns = [
            r"('\s*OR\s*'1'\s*=\s*'1)",
            r"(;\s*DROP\s+TABLE)",
            r"(UNION\s+SELECT)",
        ]
        
        for pattern in sql_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS –ø–æ–ø—ã—Ç–∫–∏
        xss_patterns = [
            r"<script.*?>",
            r"javascript:",
            r"on\w+\s*=",  # onclick=, onerror=, etc
        ]
        
        for pattern in xss_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        
        return False
    
    def sanitize_ai_response(self, response: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á—Ç–æ-—Ç–æ –ø–ª–æ—Ö–æ–µ
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç AI
        
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç AI –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        is_safe, reason = self.is_safe_content(response)
        
        if not is_safe:
            logger.error(f"‚ö†Ô∏è AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –æ—Ç–≤–µ—Ç
            return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á—ë–±–µ! üìö"
        
        return response
    
    def get_safe_response_alternative(self, detected_topic: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        
        Args:
            detected_topic: –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞
        
        Returns:
            str: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —É—á—ë–±—É
        """
        alternatives = [
            "–≠—Ç–∞ —Ç–µ–º–∞ –Ω–µ –¥–ª—è –º–µ–Ω—è üêº –î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á—ë–±–µ!",
            "–Ø —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å —Å —É—á—ë–±–æ–π üìö –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º?",
            "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã! üéì",
            "–Ø –ª—É—á—à–µ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º üòä –ß—Ç–æ –∑–∞–¥–∞–ª–∏?",
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–∏–ª–∏ –ø–µ—Ä–≤—ã–π)
        import random
        return random.choice(alternatives)
    
    def log_blocked_content(
        self, 
        telegram_id: int, 
        message: str, 
        reason: str
    ) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        –í–∞–∂–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reason: –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        logger.warning(
            f"üö´ BLOCKED CONTENT | "
            f"User: {telegram_id} | "
            f"Reason: {reason} | "
            f"Message: {message[:100]}..."
        )
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É moderation_log –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏



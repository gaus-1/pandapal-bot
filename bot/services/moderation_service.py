"""
–°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã: –ø–æ–ª–∏—Ç–∏–∫–∞, –Ω–∞—Å–∏–ª–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ —Ç.–¥.
OWASP A04:2021 - Insecure Design (–∑–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π)
@module bot.services.moderation_service
"""

import asyncio
import re
from typing import Any, Dict, List, Optional, Pattern, Tuple

from loguru import logger

from bot.config import FORBIDDEN_PATTERNS, settings
from bot.services.advanced_moderation import AdvancedModerationService, ModerationResult


class ContentModerationService:
    """
    –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
    """

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
        # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ -> –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ word-boundary regex
        topics: List[str] = settings.get_forbidden_topics_list()
        self._topic_regexes: List[Pattern[str]] = [
            re.compile(rf"\b{re.escape(topic)}\b", re.IGNORECASE) for topic in topics
        ]

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ -> –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º
        self._forbidden_regexes: List[Pattern[str]] = [
            re.compile(pattern, re.IGNORECASE) for pattern in FORBIDDEN_PATTERNS
        ]

        self.filter_level: int = settings.content_filter_level

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.advanced_moderation = AdvancedModerationService()

        # –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ -> –µ–¥–∏–Ω—ã–π regex —Å word-boundaries
        profanity_words = [
            "–±–ª—è—Ç—å",
            "–±–ª—è",
            "—Ö—É–π",
            "–ø–∏–∑–¥",
            "–µ–±–∞—Ç—å",
            "–µ–±–∞–Ω",
            "—Å—É–∫–∞",
            "–º—É–¥–∞–∫",
            "–¥–µ–±–∏–ª",
            "–∏–¥–∏–æ—Ç",
        ]
        self._profanity_regex: Pattern[str] = re.compile(
            r"|".join(rf"\b{re.escape(w)}\w*\b" for w in profanity_words),
            re.IGNORECASE,
        )

        # SQLi/XSS –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._sql_regexes: List[Pattern[str]] = [
            re.compile(r"'\s*OR\s*'1'\s*=\s*'1", re.IGNORECASE),
            re.compile(r";\s*DROP\s+TABLE", re.IGNORECASE),
            re.compile(r"UNION\s+SELECT", re.IGNORECASE),
        ]
        self._xss_regexes: List[Pattern[str]] = [
            re.compile(r"<script.*?>", re.IGNORECASE),
            re.compile(r"javascript:", re.IGNORECASE),
            re.compile(r"on\w+\s*=", re.IGNORECASE),  # onclick=, onerror=
        ]

    def is_safe_content(self, text: str) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è).

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            Tuple[bool, Optional[str]]: (–±–µ–∑–æ–ø–∞—Å–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        """
        if not text:
            return True, None

        text_lower = text.lower()

        # –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø: —Ä–∞–∑—Ä–µ—à–∞–µ–º —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —É—á–µ–±–Ω—ã–µ —Ç–µ–º—ã
        educational_contexts = [
            "–∏—Å—Ç–æ—Ä–∏—è —Ä–æ—Å—Å–∏–∏",
            "–∏—Å—Ç–æ—Ä–∏—è –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞",
            "–∏—Å—Ç–æ—Ä–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –≤–µ–∫–æ–≤",
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é",
            "–æ–±—ä—è—Å–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é",
            "–ø–æ–º–æ–≥–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π",
            "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è —Ä–æ—Å—Å–∏–∏",
            "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è –º–∏—Ä–∞",
            "—Ñ–∏–∑–∏–∫–∞",
            "—Ö–∏–º–∏—è",
            "–±–∏–æ–ª–æ–≥–∏—è",
            "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
            "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
            "—É—Ä–æ–∫",
            "–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "—ç–∫–∑–∞–º–µ–Ω",
            "—à–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
            "—É—á–µ–±–Ω–∏–∫",
            "—É—á–µ–±–∞",
            "–æ–±—É—á–µ–Ω–∏–µ",
        ]

        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—á–µ–±–Ω—ã–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if any(context in text_lower for context in educational_contexts):
            logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω —É—á–µ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {text[:50]}...")
            return True, None

        # –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö —Ç–µ–º (–ø–æ —Å–ª–æ–≤–∞–º)
        for rx in self._topic_regexes:
            if rx.search(text):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: —Ç–µ–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞"

        # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        for rx in self._forbidden_regexes:
            if rx.search(text):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞"

        # –£—Ä–æ–≤–µ–Ω—å 3: –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞
        if self.filter_level >= 4 and self._profanity_regex.search(text):
            logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞")
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—ã–µ —Å–ª–æ–≤–∞"

        # –£—Ä–æ–≤–µ–Ω—å 4: –¢–µ—Ö. –ø–∞—Ç—Ç–µ—Ä–Ω—ã (SQLi/XSS)
        if self.filter_level >= 5:
            if any(rx.search(text) for rx in self._sql_regexes):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: SQL injection pattern")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            if any(rx.search(text) for rx in self._xss_regexes):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: XSS pattern")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

        return True, None

    def sanitize_ai_response(self, response: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        """
        is_safe, reason = self.is_safe_content(response)
        if not is_safe:
            logger.error(f"‚ö†Ô∏è AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return (
                "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. " "–î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á—ë–±–µ! üìö"
            )
        return response

    def get_safe_response_alternative(self, detected_topic: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."""
        alternatives = [
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å —É—á–µ–±–æ–π, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏! üêº",
            "–≠—Ç–∞ —Ç–µ–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è. –î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á—ë–±–µ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —à–∫–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö! üìö",
            "–Ø —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å –¥–µ—Ç—è–º —Å —É—á—ë–±–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º? üéì",
            "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º üòä",
            "–Ø –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã. –ú–æ—è —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º! –ß—Ç–æ –∏–∑—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è? ‚ú®",
        ]
        import random

        return random.choice(alternatives)

    async def _save_moderation_log(self, telegram_id: int, content: str, reason: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from bot.database import get_db
            from bot.models import User
            from sqlalchemy import select
            from datetime import datetime

            async with get_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(User).where(User.telegram_id == telegram_id)
                user = await db.execute(stmt)
                user_obj = user.scalar_one_or_none()

                if user_obj:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É moderation_log –≤ –±—É–¥—É—â–µ–º
                    # –ü–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
                    logger.info(
                        "MODERATION_LOG | User: %s | Reason: %s | Content: %s | Time: %s",
                        telegram_id,
                        reason,
                        content[:100] + "..." if len(content) > 100 else content,
                        datetime.utcnow().isoformat(),
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")

    def log_blocked_content(self, telegram_id: int, message: str, reason: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
        """
        logger.warning(
            "üö´ BLOCKED CONTENT | User: %s | Reason: %s | Message: %s",
            telegram_id,
            reason,
            message[:100] + "...",
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É moderation_log
        await self._save_moderation_log(telegram_id, message, reason)

    async def advanced_moderate_content(
        self, content: str, user_context: Dict[str, Any] = None
    ) -> ModerationResult:
        """
        –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

        Args:
            content: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑—Ä–∞—Å—Ç, –∏—Å—Ç–æ—Ä–∏—è –∏ —Ç.–¥.)

        Returns:
            ModerationResult: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        return await self.advanced_moderation.moderate_content(content, user_context)

    async def get_moderation_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return await self.advanced_moderation.get_moderation_stats()

"""
–°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã: –ø–æ–ª–∏—Ç–∏–∫–∞, –Ω–∞—Å–∏–ª–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ —Ç.–¥.
OWASP A04:2021 - Insecure Design (–∑–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π)
@module bot.services.moderation_service
"""

import re
from typing import Tuple, List, Optional, Pattern
from bot.config import settings, FORBIDDEN_PATTERNS
from loguru import logger


class ContentModerationService:
    """
    –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
    """

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
        # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ -> –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ word-boundary regex
        topics: List[str] = settings.get_forbidden_topics_list()
        self._topic_regexes: List[Pattern[str]] = [
            re.compile(rf"\b{re.escape(topic)}\b", re.IGNORECASE)
            for topic in topics
        ]

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ -> –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º
        self._forbidden_regexes: List[Pattern[str]] = [
            re.compile(pattern, re.IGNORECASE) for pattern in FORBIDDEN_PATTERNS
        ]

        self.filter_level: int = settings.content_filter_level

        # –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ -> –µ–¥–∏–Ω—ã–π regex —Å word-boundaries
        profanity_words = [
            '–±–ª—è—Ç—å', '–±–ª—è', '—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–∞—Ç—å', '–µ–±–∞–Ω',
            '—Å—É–∫–∞', '–º—É–¥–∞–∫', '–¥–µ–±–∏–ª', '–∏–¥–∏–æ—Ç',
        ]
        self._profanity_regex: Pattern[str] = re.compile(
            r"|".join(rf"\b{re.escape(w)}\w*\b" for w in profanity_words),
            re.IGNORECASE,
        )

        # SQLi/XSS –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._sql_regexes: List[Pattern[str]] = [
            re.compile(r"'\s*OR\s*'1'\s*=\s*'1", re.IGNORECASE),
            re.compile(r";\s*DROP\s+TABLE", re.IGNORECASE),
            re.compile(r"UNION\s+SELECT", re.IGNORECASE),
        ]
        self._xss_regexes: List[Pattern[str]] = [
            re.compile(r"<script.*?>", re.IGNORECASE),
            re.compile(r"javascript:", re.IGNORECASE),
            re.compile(r"on\w+\s*=", re.IGNORECASE),  # onclick=, onerror=
        ]

    def is_safe_content(self, text: str) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞.

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            Tuple[bool, Optional[str]]: (–±–µ–∑–æ–ø–∞—Å–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        """
        if not text:
            return True, None

        # –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö —Ç–µ–º (–ø–æ —Å–ª–æ–≤–∞–º)
        for rx in self._topic_regexes:
            if rx.search(text):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: —Ç–µ–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞"

        # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        for rx in self._forbidden_regexes:
            if rx.search(text):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Ç–µ–º–∞"

        # –£—Ä–æ–≤–µ–Ω—å 3: –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞
        if self.filter_level >= 4 and self._profanity_regex.search(text):
            logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞")
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—ã–µ —Å–ª–æ–≤–∞"

        # –£—Ä–æ–≤–µ–Ω—å 4: –¢–µ—Ö. –ø–∞—Ç—Ç–µ—Ä–Ω—ã (SQLi/XSS)
        if self.filter_level >= 5:
            if any(rx.search(text) for rx in self._sql_regexes):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: SQL injection pattern")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
            if any(rx.search(text) for rx in self._xss_regexes):
                logger.warning("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: XSS pattern")
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

        return True, None

    def sanitize_ai_response(self, response: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        """
        is_safe, reason = self.is_safe_content(response)
        if not is_safe:
            logger.error(
                f"‚ö†Ô∏è AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            return (
                "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. "
                "–î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á—ë–±–µ! üìö"
            )
        return response

    def get_safe_response_alternative(self, detected_topic: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."""
        alternatives = [
            "–≠—Ç–∞ —Ç–µ–º–∞ –Ω–µ –¥–ª—è –º–µ–Ω—è üêº –î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á—ë–±–µ!",
            "–Ø —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å —Å —É—á—ë–±–æ–π üìö –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º?",
            "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã! üéì",
            "–Ø –ª—É—á—à–µ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º üòä –ß—Ç–æ –∑–∞–¥–∞–ª–∏?",
        ]
        import random
        return random.choice(alternatives)

    def log_blocked_content(self, telegram_id: int, message: str, reason: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
        """
        logger.warning(
            "üö´ BLOCKED CONTENT | User: %s | Reason: %s | Message: %s",
            telegram_id,
            reason,
            message[:100] + "...",
        )
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É moderation_log



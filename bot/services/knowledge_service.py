"""
–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å AI.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–µ–±-–ø–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ —Å AI –¥–ª—è
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from loguru import logger

from bot.services.web_scraper import EducationalContent, WebScraperService


class KnowledgeService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.

    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å–∞–π—Ç–æ–≤ —Å AI –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–Ω–∞–Ω–∏–π."""
        self.knowledge_base: Dict[str, List[EducationalContent]] = {}
        self.last_update: Optional[datetime] = None
        self.update_interval = timedelta(days=7)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        self.auto_update_enabled = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

        logger.info("üìö KnowledgeService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–´–ö–õ)")

    async def get_knowledge_for_subject(
        self, subject: str, query: str = ""
    ) -> List[EducationalContent]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.

        Args:
            subject: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.

        Returns:
            List[EducationalContent]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        if self._should_update_knowledge_base():
            await self.update_knowledge_base()

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        subject_materials = self.knowledge_base.get(subject, [])

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if query:
            query_lower = query.lower()
            subject_materials = [
                material
                for material in subject_materials
                if query_lower in material.title.lower() or query_lower in material.content.lower()
            ]

        return subject_materials

    async def get_helpful_content(
        self, user_question: str, user_age: Optional[int] = None
    ) -> List[EducationalContent]:
        """
        –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            user_age: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

        Returns:
            List[EducationalContent]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self._should_update_knowledge_base():
            await self.update_knowledge_base()

        relevant_materials = []
        question_lower = user_question.lower()

        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        for subject, materials in self.knowledge_base.items():
            for material in materials:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                if (
                    question_lower in material.title.lower()
                    or question_lower in material.content.lower()
                    or self._is_question_related_to_subject(question_lower, subject)
                ):
                    relevant_materials.append(material)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)
        relevant_materials.sort(key=lambda x: len(x.content), reverse=True)

        return relevant_materials[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

    def _is_question_related_to_subject(self, question: str, subject: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º.

        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
            subject: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.

        Returns:
            bool: True –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º.
        """
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_keywords = {
            "matematika": [
                "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "—á–∏—Å–ª–æ",
                "—Ä–µ—à–∏—Ç—å",
                "–∑–∞–¥–∞—á–∞",
                "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
                "—Ñ–æ—Ä–º—É–ª–∞",
                "—Å—á–∏—Ç–∞—Ç—å",
                "–ø–ª—é—Å",
                "–º–∏–Ω—É—Å",
                "—É–º–Ω–æ–∂–∏—Ç—å",
                "–¥–µ–ª–∏—Ç—å",
                "–¥—Ä–æ–±—å",
                "–ø—Ä–æ—Ü–µ–Ω—Ç",
                "–≥–µ–æ–º–µ—Ç—Ä–∏—è",
                "–∞–ª–≥–µ–±—Ä–∞",
            ],
            "russkiy-yazyk": [
                "—Ä—É—Å—Å–∫–∏–π",
                "—è–∑—ã–∫",
                "—Å–ª–æ–≤–æ",
                "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                "–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞",
                "–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è",
                "–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è",
                "—á–∞—Å—Ç—å —Ä–µ—á–∏",
                "—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ",
                "–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ",
                "–≥–ª–∞–≥–æ–ª",
                "–Ω–∞–ø–∏—Å–∞—Ç—å",
                "—Å–æ—á–∏–Ω–µ–Ω–∏–µ",
                "–∏–∑–ª–æ–∂–µ–Ω–∏–µ",
            ],
            "literatura": [
                "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
                "–∫–Ω–∏–≥–∞",
                "–ø–∏—Å–∞—Ç–µ–ª—å",
                "–ø–æ—ç—Ç",
                "—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
                "—Ä–∞—Å—Å–∫–∞–∑",
                "—Ä–æ–º–∞–Ω",
                "–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
                "–∞–≤—Ç–æ—Ä",
                "–≥–µ—Ä–æ–π",
                "—Å—é–∂–µ—Ç",
                "—Ç–µ–º–∞",
                "–∏–¥–µ—è",
            ],
            "istoriya": [
                "–∏—Å—Ç–æ—Ä–∏—è",
                "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π",
                "–≤–æ–π–Ω–∞",
                "—Ä–µ–≤–æ–ª—é—Ü–∏—è",
                "—Ü–∞—Ä—å",
                "–∏–º–ø–µ—Ä–∞—Ç–æ—Ä",
                "–¥—Ä–µ–≤–Ω–∏–π",
                "—Å—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞",
                "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
                "–¥–∞—Ç–∞",
                "—Å–æ–±—ã—Ç–∏–µ",
                "–ø–µ—Ä—Å–æ–Ω–∞",
            ],
            "geografiya": [
                "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
                "—Å—Ç—Ä–∞–Ω–∞",
                "–≥–æ—Ä–æ–¥",
                "—Å—Ç–æ–ª–∏—Ü–∞",
                "–º–∞—Ç–µ—Ä–∏–∫",
                "–æ–∫–µ–∞–Ω",
                "—Ä–µ–∫–∞",
                "–≥–æ—Ä–∞",
                "–∫–ª–∏–º–∞—Ç",
                "–Ω–∞—Å–µ–ª–µ–Ω–∏–µ",
                "–∫–∞—Ä—Ç–∞",
                "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            ],
            "biologiya": [
                "–±–∏–æ–ª–æ–≥–∏—è",
                "–∂–∏–≤–æ—Ç–Ω–æ–µ",
                "—Ä–∞—Å—Ç–µ–Ω–∏–µ",
                "–∫–ª–µ—Ç–∫–∞",
                "–æ—Ä–≥–∞–Ω",
                "—Å–∏—Å—Ç–µ–º–∞",
                "—Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ",
                "—ç–≤–æ–ª—é—Ü–∏—è",
                "—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞",
                "–ø—Ä–∏—Ä–æ–¥–∞",
                "—á–µ–ª–æ–≤–µ–∫",
                "–∞–Ω–∞—Ç–æ–º–∏—è",
            ],
            "fizika": [
                "—Ñ–∏–∑–∏–∫–∞",
                "—Å–∏–ª–∞",
                "—ç–Ω–µ—Ä–≥–∏—è",
                "—Å–∫–æ—Ä–æ—Å—Ç—å",
                "–º–∞—Å—Å–∞",
                "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                "–¥–∞–≤–ª–µ–Ω–∏–µ",
                "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ",
                "–º–∞–≥–Ω–µ—Ç–∏–∑–º",
                "—Å–≤–µ—Ç",
                "–∑–≤—É–∫",
                "–º–µ—Ö–∞–Ω–∏–∫–∞",
            ],
            "khimiya": [
                "—Ö–∏–º–∏—è",
                "—Ö–∏–º–∏—á–µ—Å–∫–∏–π",
                "—ç–ª–µ–º–µ–Ω—Ç",
                "—Ä–µ–∞–∫—Ü–∏—è",
                "–≤–µ—â–µ—Å—Ç–≤–æ",
                "–º–æ–ª–µ–∫—É–ª–∞",
                "–∞—Ç–æ–º",
                "–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è",
                "—Ç–∞–±–ª–∏—Ü–∞",
                "–∫–∏—Å–ª–æ—Ç–∞",
                "—â–µ–ª–æ—á—å",
                "—Å–æ–ª—å",
            ],
            "informatika": [
                "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                "–∫–æ–º–ø—å—é—Ç–µ—Ä",
                "–ø—Ä–æ–≥—Ä–∞–º–º–∞",
                "–∞–ª–≥–æ—Ä–∏—Ç–º",
                "–∫–æ–¥",
                "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
                "—Å–∞–π—Ç",
                "–¥–∞–Ω–Ω—ã–µ",
                "—Ñ–∞–π–ª",
                "—Å–∏—Å—Ç–µ–º–∞",
            ],
        }

        keywords = subject_keywords.get(subject, [])
        return any(keyword in question for keyword in keywords)

    def _should_update_knowledge_base(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""
        # –ï—Å–ª–∏ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
        if not self.auto_update_enabled:
            return False

        if not self.last_update:
            return True

        return datetime.now() - self.last_update > self.update_interval

    async def update_knowledge_base(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")

            async with WebScraperService() as scraper:
                # –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å nsportal.ru
                nsportal_materials = await scraper.scrape_nsportal_tasks(100)

                # –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å school203.spb.ru
                school203_materials = await scraper.scrape_school203_content(50)

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                all_materials = nsportal_materials + school203_materials

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                self.knowledge_base = {}
                for material in all_materials:
                    subject = material.subject
                    if subject not in self.knowledge_base:
                        self.knowledge_base[subject] = []
                    self.knowledge_base[subject].append(material)

                self.last_update = datetime.now()

                logger.info(
                    f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(all_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ {len(self.knowledge_base)} –ø—Ä–µ–¥–º–µ—Ç–∞–º"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

    def get_knowledge_stats(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º.
        """
        stats = {}
        for subject, materials in self.knowledge_base.items():
            stats[subject] = len(materials)

        return stats

    def format_knowledge_for_ai(self, materials: List[EducationalContent]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI.

        Args:
            materials: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è AI.
        """
        if not materials:
            return ""

        formatted_content = "\n\nüìö –†–ï–õ–ï–í–ê–ù–¢–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´ –ò–ó –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í:\n"

        for i, material in enumerate(materials[:3], 1):  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            formatted_content += f"\n{i}. {material.title}\n"
            formatted_content += f"   –ü—Ä–µ–¥–º–µ—Ç: {material.subject}\n"
            formatted_content += f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {material.content[:300]}...\n"
            formatted_content += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {material.source_url}\n"

        formatted_content += (
            "\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞! üéØ"
        )

        return formatted_content


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_knowledge_service = None


def get_knowledge_service() -> KnowledgeService:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∑–Ω–∞–Ω–∏–π.

    Returns:
        KnowledgeService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞.
    """
    global _knowledge_service

    if _knowledge_service is None:
        _knowledge_service = KnowledgeService()

    return _knowledge_service

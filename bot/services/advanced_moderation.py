"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π

"""

import asyncio
import re
from dataclasses import dataclass
from enum import Enum
from typing import Any, Dict, List, Optional, Pattern, Tuple

from loguru import logger

from bot.config import settings


class ModerationLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    SAFE = "safe"
    WARNING = "warning"
    BLOCKED = "blocked"
    DANGEROUS = "dangerous"


class ContentCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    EDUCATION = "education"
    VIOLENCE = "violence"
    DRUGS = "drugs"
    SEXUAL = "sexual"
    POLITICS = "politics"
    EXTREMISM = "extremism"
    BULLYING = "bullying"
    SELF_HARM = "self_harm"
    SCAM = "scam"
    SPAM = "spam"


@dataclass
class ModerationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    is_safe: bool
    level: ModerationLevel
    category: Optional[ContentCategory]
    confidence: float
    reason: str
    suggested_action: str
    alternative_response: Optional[str] = None


class AdvancedModerationService:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        self.filter_level = settings.content_filter_level

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self._category_patterns = self._build_category_patterns()

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
        self._educational_contexts = self._build_educational_contexts()

        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        self._intent_indicators = self._build_intent_indicators()

        # –°–∏–Ω–æ–Ω–∏–º—ã –∏ —ç–≤—Ñ–µ–º–∏–∑–º—ã
        self._synonyms = self._build_synonyms()

        logger.info(f"üîí –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—É—Ä–æ–≤–µ–Ω—å: {self.filter_level})")

    def _build_category_patterns(self) -> Dict[ContentCategory, List[Pattern]]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        patterns = {}

        # –ù–∞—Å–∏–ª–∏–µ
        patterns[ContentCategory.VIOLENCE] = [
            re.compile(
                r"\b(—É–±–∏—Ç—å|—É–±–∏–π—Å—Ç–≤–æ|—Å–º–µ—Ä—Ç—å|—É–º–µ—Ä–µ—Ç—å|—Ç—Ä—É–ø|–∫—Ä–æ–≤—å|—Ä–∞–Ω–µ–Ω|–±—å—é—Ç|–¥—Ä–∞–∫–∞|–≤–æ–π–Ω–∞|–æ—Ä—É–∂–∏–µ|–Ω–æ–∂|–ø–∏—Å—Ç–æ–ª–µ—Ç|–±–æ–º–±–∞|–≤–∑—Ä—ã–≤)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(–∏–∑–±–∏—Ç—å|–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å|–ø—ã—Ç–∫–∞|–º—É—á–µ–Ω–∏–µ|—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ|–±–æ–ª—å|—É–±–∏–π—Ü–∞|–ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ|—Å—É–∏—Ü–∏–¥|–≤–µ—à–∞—Ç—å—Å—è|–æ—Ç—Ä–∞–≤–∏—Ç—å—Å—è|—Ä–µ–∑–∞—Ç—å|—Ä–µ–∑–∞—Ç—å—Å—è)\b", re.IGNORECASE
            ),
        ]

        # –ù–∞—Ä–∫–æ—Ç–∏–∫–∏
        patterns[ContentCategory.DRUGS] = [
            re.compile(
                r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–Ω–∞—Ä–∫–æ—Ç–∞|–≥–µ—Ä–æ–∏–Ω|–∫–æ–∫–∞–∏–Ω|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–º–∞—Ä–∏—Ö—É–∞–Ω–∞|–≥–∞—à–∏—à|—Å–ø–∞–π—Å|—Å–æ–ª—å|–∫—Ä–∏—Å—Ç–∞–ª–ª)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(–Ω–∞—Ä–∫–æ–º–∞–Ω|–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å|–¥–æ–∑–∞|–∏–Ω—ä–µ–∫—Ü–∏—è|–∫—É—Ä–µ–Ω–∏–µ|–Ω—é—Ö–∞—Ç—å|–∫–æ–ª–æ—Ç—å—Å—è)\b", re.IGNORECASE
            ),
            re.compile(
                r"\b(—Ç—Ä–∞–≤–∞|–∫–æ—Å—è–∫|–¥–∂–æ–π–Ω—Ç|–±—É–ª—å–∫–∞|—Å–ø–∏–¥—ã|—ç–∫—Å—Ç–∞–∑–∏|–ª—Å–¥|–º–µ—Å–∫–∞–ª–∏–Ω)\b", re.IGNORECASE
            ),
        ]

        # –°–µ–∫—Å—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        patterns[ContentCategory.SEXUAL] = [
            re.compile(
                r"\b(—Å–µ–∫—Å|–ø–æ—Ä–Ω–æ|–∏–Ω—Ç–∏–º|–≥–æ–ª—ã–π|–≥–æ–ª–∞—è|—Ä–∞–∑–¥–µ—Ç—å—Å—è|–ª–µ—á—å|—Ç—Ä–∞—Ö–∞—Ç—å|–µ–±–∞—Ç—å|–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(–æ—Ä–≥–∞–∑–º|–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ|–º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è|–ø–µ–¥–æ—Ñ–∏–ª|–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ|–ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—è)\b",
                re.IGNORECASE,
            ),
        ]

        # –ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º
        patterns[ContentCategory.POLITICS] = [
            re.compile(
                r"\b(–ø—É—Ç–∏–Ω|–∑–µ–ª–µ–Ω—Å–∫–∏–π|–±–∞–π–¥–µ–Ω|—Ç—Ä–∞–º–ø|–≤—ã–±–æ—Ä—ã|–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ|–ø–∞—Ä—Ç–∏—è|–ø–æ–ª–∏—Ç–∏–∫–∞|–≤–ª–∞—Å—Ç—å)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(—Ä–µ–≤–æ–ª—é—Ü–∏—è|–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç|–ø—Ä–æ—Ç–µ—Å—Ç|–º–∏—Ç–∏–Ω–≥|–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è|–±—É–Ω—Ç|–º—è—Ç–µ–∂)\b", re.IGNORECASE
            ),
        ]

        patterns[ContentCategory.EXTREMISM] = [
            re.compile(
                r"\b(—Ñ–∞—à–∏–∑–º|–Ω–∞—Ü–∏–∑–º|—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º|–∏—Å–ª–∞–º|–¥–∂–∏—Ö–∞–¥|—Ä–∞—Å–∏–∑–º|–∫—Å–µ–Ω–æ—Ñ–æ–±–∏—è|–≥–µ–Ω–æ—Ü–∏–¥)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(—Å–∫–∏–Ω—Ö–µ–¥|–Ω–µ–æ–Ω–∞—Ü–∏—Å—Ç|—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç|–±–æ–µ–≤–∏–∫|—Ä–∞–¥–∏–∫–∞–ª|—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç)\b", re.IGNORECASE
            ),
        ]

        # –ë—É–ª–ª–∏–Ω–≥
        patterns[ContentCategory.BULLYING] = [
            re.compile(
                r"\b(–¥—É—Ä–∞–∫|—Ç—É–ø–æ–π|–∏–¥–∏–æ—Ç|–¥–µ–±–∏–ª|–∫—Ä–µ—Ç–∏–Ω|–ø—Ä–∏–¥—É—Ä–æ–∫|–Ω–µ—É–¥–∞—á–Ω–∏–∫|–ª—É–∑–µ—Ä|—Ç–æ–ª—Å—Ç—ã–π|—É—Ä–æ–¥)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(–Ω–µ–Ω–∞–≤–∏–∂—É|–ø—Ä–µ–∑–∏—Ä–∞—é|—É–±–∏–ª –±—ã|—É–±—å—é|—É–±–µ–π—Å—è|—Å–¥–æ—Ö–Ω–∏|–ø–æ–∫–æ–Ω—á–∏ —Å —Å–æ–±–æ–π)\b", re.IGNORECASE
            ),
        ]

        # –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
        patterns[ContentCategory.SCAM] = [
            re.compile(
                r"\b(–¥–µ–Ω—å–≥–∏|–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª—å|–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏|–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞|–±–∏—Ç–∫–æ–∏–Ω|–º–∞–π–Ω–∏–Ω–≥)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(—Å–∫–∏–¥–∫–∞|–∞–∫—Ü–∏—è|–±–µ—Å–ø–ª–∞—Ç–Ω–æ|–ø–æ–¥–∞—Ä–æ–∫|–≤—ã–∏–≥—Ä—ã—à|–ø—Ä–∏–∑|–ª–æ—Ç–µ—Ä–µ—è|–∫–∞–∑–∏–Ω–æ)\b", re.IGNORECASE
            ),
        ]

        # –°–ø–∞–º
        patterns[ContentCategory.SPAM] = [
            re.compile(
                r"\b(—Ä–µ–∫–ª–∞–º–∞|–ø—Ä–æ–¥–∞–∂–∞|–∫—É–ø–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–¥–æ—Å—Ç–∞–≤–∫–∞|—Å–∫–∏–¥–∫–∞|–ø—Ä–æ–º–æ–∫–æ–¥|–∞–∫—Ü–∏—è)\b",
                re.IGNORECASE,
            ),
            re.compile(
                r"\b(–ø–æ–¥–ø–∏—Å–∫–∞|—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|—Å—Å—ã–ª–∫–∞|—Å–∞–π—Ç|—Ç–µ–ª–µ—Ñ–æ–Ω|–∑–≤–æ–Ω–æ–∫|—Å–æ–æ–±—â–µ–Ω–∏–µ)\b", re.IGNORECASE
            ),
        ]

        return patterns

    def _build_educational_contexts(self) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã, –≥–¥–µ –æ–±—ã—á–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        return {
            "biology": ["–∞–Ω–∞—Ç–æ–º–∏—è", "—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è", "—Ä–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è", "–≥–µ–Ω–µ—Ç–∏–∫–∞", "—ç–≤–æ–ª—é—Ü–∏—è"],
            "history": ["–≤–æ–π–Ω–∞", "—Ä–µ–≤–æ–ª—é—Ü–∏—è", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", "–≤–ª–∞—Å—Ç—å"],
            "chemistry": ["–Ω–∞—Ä–∫–æ—Ç–∏–∫", "—Ö–∏–º–∏—è", "–≤–µ—â–µ—Å—Ç–≤–æ", "—Ä–µ–∞–∫—Ü–∏—è", "—Ç–æ–∫—Å–∏–Ω"],
            "psychology": ["–ø—Å–∏—Ö–∏–∫–∞", "—Å—Ç—Ä–µ—Å—Å", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Ç—Ä–µ–≤–æ–≥–∞", "—ç–º–æ—Ü–∏–∏"],
            "literature": ["—Ä–æ–º–∞–Ω", "–ø–æ—ç–∑–∏—è", "–¥—Ä–∞–º–∞", "—Ç—Ä–∞–≥–µ–¥–∏—è", "–≥–µ—Ä–æ–π"],
            "physics": ["–≤–∑—Ä—ã–≤", "—ç–Ω–µ—Ä–≥–∏—è", "—Å–∏–ª–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"],
        }

    def _build_intent_indicators(self) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            "educational": [
                "–∏–∑—É—á–∞—Ç—å",
                "—É–∑–Ω–∞—Ç—å",
                "–ø–æ–Ω—è—Ç—å",
                "–æ–±—ä—è—Å–Ω–∏—Ç—å",
                "–Ω–∞—É—á–∏—Ç—å",
                "—É—á–µ–±–Ω–∏–∫",
                "—É—Ä–æ–∫",
                "–∑–∞–¥–∞—á–∞",
            ],
            "curiosity": ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ø–æ—á–µ–º—É", "–∫–∞–∫", "—á—Ç–æ", "–∑–∞—á–µ–º", "–∫–æ–≥–¥–∞", "–≥–¥–µ"],
            "harmful": ["–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–∫–∞–∫ –¥–æ—Å—Ç–∞—Ç—å", "–ø–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏", "–ø–æ–∫–∞–∂–∏"],
            "dangerous": ["—Ö–æ—á—É", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–æ–±–∏—Ä–∞—é—Å—å", "–±—É–¥—É", "—Ä–µ—à–∏–ª"],
        }

    def _build_synonyms(self) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —ç–≤—Ñ–µ–º–∏–∑–º—ã –¥–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        return {
            "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏": ["—Ç—Ä–∞–≤–∫–∞", "–∑–µ–ª—å–µ", "–¥—É—Ä—å", "—Ö–∏–º–∏—è", "–≤–µ—â–µ—Å—Ç–≤–æ", "–ø–æ—Ä–æ—à–æ–∫"],
            "–æ—Ä—É–∂–∏–µ": ["—Å—Ç–≤–æ–ª", "–ø—É—à–∫–∞", "–∂–µ–ª–µ–∑–æ", "–º–µ—Ç–∞–ª–ª", "–∏–≥—Ä—É—à–∫–∞"],
            "—Å–µ–∫—Å": ["—ç—Ç–æ", "—Ç–æ", "–∏–Ω—Ç–∏–º", "–±–ª–∏–∑–æ—Å—Ç—å", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"],
            "—Å–º–µ—Ä—Ç—å": ["–∫–æ–Ω–µ—Ü", "—Ñ–∏–Ω–∞–ª", "—É—Ö–æ–¥", "–ø—Ä–æ—â–∞–Ω–∏–µ", "–≤–µ—á–Ω—ã–π —Å–æ–Ω"],
        }

    async def moderate_content(
        self, content: str, user_context: Dict[str, Any] = None
    ) -> ModerationResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        Args:
            content: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑—Ä–∞—Å—Ç, –∏—Å—Ç–æ—Ä–∏—è –∏ —Ç.–¥.)

        Returns:
            ModerationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        if not content or not content.strip():
            return ModerationResult(
                is_safe=True,
                level=ModerationLevel.SAFE,
                category=None,
                confidence=1.0,
                reason="–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                suggested_action="approve",
            )

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
        normalized_content = self._normalize_text(content)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_analysis = self._analyze_context(normalized_content, user_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        category_results = []
        for category, patterns in self._category_patterns.items():
            result = self._check_category(normalized_content, category, patterns)
            if result:
                category_results.append(result)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent_analysis = self._analyze_intent(normalized_content)

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        final_result = self._make_decision(
            category_results, intent_analysis, context_analysis, user_context
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._log_moderation_result(content, final_result)

        return final_result

    def _normalize_text(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r"\s+", " ", text.strip())

        # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        for main_word, synonyms in self._synonyms.items():
            for synonym in synonyms:
                text = re.sub(rf"\b{synonym}\b", main_word, text, flags=re.IGNORECASE)

        return text.lower()

    def _analyze_context(self, content: str, user_context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context_score = 0
        detected_subjects = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        for subject, keywords in self._educational_contexts.items():
            for keyword in keywords:
                if keyword in content:
                    context_score += 1
                    detected_subjects.append(subject)
                    break

        return {
            "score": context_score,
            "subjects": detected_subjects,
            "is_educational": context_score > 0,
        }

    def _check_category(
        self, content: str, category: ContentCategory, patterns: List[Pattern]
    ) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        matches = []

        for pattern in patterns:
            found = pattern.findall(content)
            if found:
                matches.extend(found)

        if matches:
            confidence = min(len(matches) / 3.0, 1.0)  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è = 100%
            return {
                "category": category,
                "matches": matches,
                "confidence": confidence,
                "count": len(matches),
            }

        return None

    def _analyze_intent(self, content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        intent_scores = {}

        for intent_type, indicators in self._intent_indicators.items():
            score = 0
            for indicator in indicators:
                if indicator in content:
                    score += 1
            intent_scores[intent_type] = score

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        primary_intent = (
            max(intent_scores.items(), key=lambda x: x[1])[0] if intent_scores else "unknown"
        )

        return {
            "scores": intent_scores,
            "primary": primary_intent,
            "is_harmful": intent_scores.get("harmful", 0) > 0
            or intent_scores.get("dangerous", 0) > 0,
            "is_educational": intent_scores.get("educational", 0) > 0,
        }

    def _make_decision(
        self,
        category_results: List[Dict],
        intent_analysis: Dict,
        context_analysis: Dict,
        user_context: Dict[str, Any] = None,
    ) -> ModerationResult:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –±–µ–∑–æ–ø–∞—Å–Ω–æ
        if not category_results:
            return ModerationResult(
                is_safe=True,
                level=ModerationLevel.SAFE,
                category=None,
                confidence=1.0,
                reason="–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ–º",
                suggested_action="approve",
            )

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å–µ—Ä—å–µ–∑–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        primary_category = max(category_results, key=lambda x: x["confidence"])
        category = primary_category["category"]
        confidence = primary_category["confidence"]

        # –£—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if context_analysis["is_educational"] and intent_analysis["is_educational"]:
            confidence *= 0.3  # –°–Ω–∏–∂–∞–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if confidence < 0.3:
            level = ModerationLevel.SAFE
            is_safe = True
        elif confidence < 0.6:
            level = ModerationLevel.WARNING
            is_safe = True
        elif confidence < 0.8:
            level = ModerationLevel.BLOCKED
            is_safe = False
        else:
            level = ModerationLevel.DANGEROUS
            is_safe = False

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        reason = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–µ–º–∞: {category.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})"

        if context_analysis["is_educational"]:
            reason += " –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"

        suggested_action = self._get_suggested_action(level, category, confidence)
        alternative_response = self._get_alternative_response(category, context_analysis)

        return ModerationResult(
            is_safe=is_safe,
            level=level,
            category=category,
            confidence=confidence,
            reason=reason,
            suggested_action=suggested_action,
            alternative_response=alternative_response,
        )

    def _get_suggested_action(
        self, level: ModerationLevel, category: ContentCategory, confidence: float
    ) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        actions = {
            ModerationLevel.SAFE: "approve",
            ModerationLevel.WARNING: "approve_with_warning",
            ModerationLevel.BLOCKED: "block_with_alternative",
            ModerationLevel.DANGEROUS: "block_immediately",
        }
        return actions[level]

    def _get_alternative_response(
        self, category: ContentCategory, context_analysis: Dict
    ) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        alternatives = {
            ContentCategory.VIOLENCE: "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –º–∏—Ä–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞—Ö —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤! ü§ù",
            ContentCategory.DRUGS: "–õ—É—á—à–µ –æ–±—Å—É–¥–∏–º –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ —Å–ø–æ—Ä—Ç! üí™",
            ContentCategory.SEXUAL: "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –¥—Ä—É–∂–±–µ –∏ —É–≤–∞–∂–µ–Ω–∏–∏! üíô",
            ContentCategory.POLITICS: "–û–±—Å—É–¥–∏–º –ª—É—á—à–µ –Ω–∞—É–∫—É, –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏–ª–∏ —Å–ø–æ—Ä—Ç! üé®",
            ContentCategory.BULLYING: "–î–∞–≤–∞–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º —Å —É–≤–∞–∂–µ–Ω–∏–µ–º! üåü",
            ContentCategory.SCAM: "–õ—É—á—à–µ –æ–±—Å—É–¥–∏–º —á–µ—Å—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞! üí∞",
        }

        if context_analysis["is_educational"]:
            return f"–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üìö"

        return alternatives.get(category, "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–º! üòä")

    def _log_moderation_result(self, content: str, result: ModerationResult):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        if result.level in [ModerationLevel.BLOCKED, ModerationLevel.DANGEROUS]:
            logger.warning(
                f"üö´ BLOCKED CONTENT | Level: {result.level.value} | "
                f"Category: {result.category.value if result.category else 'None'} | "
                f"Confidence: {result.confidence:.2f} | "
                f"Reason: {result.reason} | "
                f"Content: {content[:100]}..."
            )
        else:
            logger.info(
                f"‚úÖ SAFE CONTENT | Level: {result.level.value} | "
                f"Confidence: {result.confidence:.2f} | "
                f"Content: {content[:50]}..."
            )

    async def get_moderation_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return {
            "filter_level": self.filter_level,
            "categories_monitored": len(self._category_patterns),
            "educational_contexts": len(self._educational_contexts),
            "synonyms_tracked": sum(len(syns) for syns in self._synonyms.values()),
        }

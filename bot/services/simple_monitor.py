"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –≤—Å–µ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ
–ó–¥–æ—Ä–æ–≤—å–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import time
import psutil
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from dataclasses import dataclass

from loguru import logger
from sqlalchemy import select, func
from sqlalchemy.orm import Session

from bot.models import User, ChatHistory
from bot.database import get_db


@dataclass
class SystemStatus:
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    healthy: bool
    cpu_percent: float
    memory_percent: float
    active_users: int
    messages_today: int
    last_update: datetime


class SimpleMonitor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.start_time = datetime.now()
        self.last_check = None
        self.is_monitoring = False
        logger.info("‚úÖ Simple Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_monitoring:
            return
            
        self.is_monitoring = True
        logger.info("üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(self._monitor_loop())

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        logger.info("üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                await self._check_system_health()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)

    async def _check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            cpu_percent = psutil.cpu_percent(interval=1)
            memory_percent = psutil.virtual_memory().percent
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            db_healthy = await self._check_database()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if cpu_percent > 80 or memory_percent > 80:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: CPU {cpu_percent}%, RAM {memory_percent}%")
            
            if not db_healthy:
                logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            
            self.last_check = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

    async def _check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            with next(get_db()) as db:
                db.execute(select(1))
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            return False

    async def get_system_status(self) -> SystemStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            cpu_percent = psutil.cpu_percent()
            memory_percent = psutil.virtual_memory().percent
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with next(get_db()) as db:
                active_users = db.scalar(
                    select(func.count(User.id)).where(User.is_active == True)
                ) or 0
                
                today = datetime.now().date()
                messages_today = db.scalar(
                    select(func.count(ChatHistory.id)).where(
                        func.date(ChatHistory.timestamp) == today
                    )
                ) or 0
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            healthy = (
                cpu_percent < 80 and 
                memory_percent < 80 and 
                await self._check_database()
            )
            
            return SystemStatus(
                healthy=healthy,
                cpu_percent=cpu_percent,
                memory_percent=memory_percent,
                active_users=active_users,
                messages_today=messages_today,
                last_update=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return SystemStatus(
                healthy=False,
                cpu_percent=0,
                memory_percent=0,
                active_users=0,
                messages_today=0,
                last_update=datetime.now()
            )

    def get_uptime(self) -> str:
        """–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"

    async def get_simple_analytics(self) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        try:
            with next(get_db()) as db:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_users = db.scalar(select(func.count(User.id)))
                active_users = db.scalar(
                    select(func.count(User.id)).where(User.is_active == True)
                )
                
                # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                week_ago = datetime.now() - timedelta(days=7)
                messages_week = db.scalar(
                    select(func.count(ChatHistory.id)).where(
                        ChatHistory.timestamp >= week_ago
                    )
                )
                
                return {
                    "total_users": total_users or 0,
                    "active_users": active_users or 0,
                    "messages_week": messages_week or 0,
                    "uptime": self.get_uptime(),
                    "last_check": self.last_check.isoformat() if self.last_check else None
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {
                "total_users": 0,
                "active_users": 0,
                "messages_week": 0,
                "uptime": self.get_uptime(),
                "error": str(e)
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_simple_monitor = None

def get_simple_monitor() -> SimpleMonitor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    global _simple_monitor
    if _simple_monitor is None:
        _simple_monitor = SimpleMonitor()
    return _simple_monitor

"""
–°–µ—Ä–≤–∏—Å –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import asyncio
from datetime import datetime, timedelta
from typing import List

from aiogram import Bot
from loguru import logger
from sqlalchemy import select
from sqlalchemy.orm import Session

from bot.config import settings
from bot.models import User, ChatHistory


class EngagementService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–µ–Ω–∏–∫–∞–º
    """
    
    def __init__(self, db_session: Session, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            db_session: –°–µ—Å—Å–∏—è –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.db = db_session
        self.bot = bot
        self.inactive_days = 7  # –ù–µ–¥–µ–ª—è
        
        logger.info("üì¨ –°–µ—Ä–≤–∏—Å –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def find_inactive_users(self) -> List[User]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
        
        Returns:
            List[User]: –°–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        cutoff_date = datetime.now() - timedelta(days=self.inactive_days)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
        stmt = (
            select(User)
            .join(ChatHistory, User.telegram_id == ChatHistory.user_telegram_id)
            .where(ChatHistory.timestamp < cutoff_date)
            .distinct()
        )
        
        inactive_users = self.db.execute(stmt).scalars().all()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(inactive_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return inactive_users
    
    async def send_engagement_message(self, user: User) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è
            messages = self._get_engagement_messages(user)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            import random
            message_text = random.choice(messages)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=message_text,
                parse_mode="HTML",
                disable_web_page_preview=False
            )
            
            logger.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user.telegram_id}: {e}")
            return False
    
    def _get_engagement_messages(self, user: User) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        name = user.first_name or "–¥—Ä—É–≥"
        grade_info = f"—É—á–µ–Ω–∏–∫ {user.grade} –∫–ª–∞—Å—Å–∞" if user.grade else "—à–∫–æ–ª—å–Ω–∏–∫"
        
        messages = [
            f"""
üêº –ü—Ä–∏–≤–µ—Ç, {name}!

–Ø —Å–∫—É—á–∞—é –ø–æ –Ω–∞—à–∏–º –±–µ—Å–µ–¥–∞–º! üíô

–ü–æ–º–Ω–∏—à—å, –∫–∞–∫ –º—ã –≤–º–µ—Å—Ç–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞—á–∫–∏? 
–£ –º–µ–Ω—è –µ—Å—Ç—å –∫—É—á–∞ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!

‚ú® <b>–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?</b>
‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É –∏–∑ —à–∫–æ–ª—ã
‚Ä¢ –ü–æ–º–æ—á—å —Å –¥–æ–º–∞—à–∫–æ–π
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å –æ –Ω–∞—É–∫–µ –∏ –º–∏—Ä–µ

–ñ–¥—É —Ç–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤! üéì

<a href="https://pandapal.ru">üåê –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ PandaPal</a>
""",
            f"""
üëã {name}, –∫–∞–∫ –¥–µ–ª–∞?

–î–∞–≤–Ω–µ–Ω—å–∫–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—å! –Ø —Ç—É—Ç –ø–æ–¥—É–º–∞–ª... ü§î

–ú–æ–∂–µ—Ç, —É —Ç–µ–±—è –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á—ë–±–µ? 
–ò–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ?

üêº <b>–Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!</b>
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ä—É—Å—Å–∫–∏–π, —Ñ–∏–∑–∏–∫–∞ - —á—Ç–æ —É–≥–æ–¥–Ω–æ!
‚Ä¢ –û–±—ä—è—Å–Ω—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
‚Ä¢ –ü–æ–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã

–ù–∞–ø–∏—à–∏ –º–Ω–µ! –ë—É–¥—É –∂–¥–∞—Ç—å! üí™

<a href="https://pandapal.ru">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ PandaPal ‚Üí</a>
""",
            f"""
üåü {name}!

–¶–µ–ª—É—é –Ω–µ–¥–µ–ª—é —Ç–µ–±—è –Ω–µ –±—ã–ª–æ... –í—Å—ë —Ö–æ—Ä–æ—à–æ? üòä

–ó–Ω–∞–µ—à—å, —É—á—ë–±–∞ –∏–¥—ë—Ç –ª—É—á—à–µ, –∫–æ–≥–¥–∞ –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!
–î–∞–∂–µ 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —Å PandaPal - —ç—Ç–æ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å! üìà

üí° <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ?
‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä—ã?
‚Ä¢ –°–µ–∫—Ä–µ—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º —É—á–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! üéì

<a href="https://pandapal.ru">–û—Ç–∫—Ä—ã—Ç—å PandaPal</a>
""",
        ]
        
        # –î–ª—è —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ç–æ–Ω
        if user.grade and user.grade >= 9:
            messages.append(f"""
üëã {name}!

–ü—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è —Å –Ω–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–µ—Å–µ–¥—ã.

–ì–æ—Ç–æ–≤–∏—à—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º? –ï—Å—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã? 
–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.

üìö <b>–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ–º–æ—â—å:</b>
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠/–ï–ì–≠
‚Ä¢ –†–∞–∑–±–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º

–ë—É–¥—É —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ! üéØ

<a href="https://pandapal.ru">PandaPal - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á—ë–±–µ</a>
""")
        
        return messages
    
    async def run_engagement_campaign(self) -> dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        logger.info("üì¨ –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è...")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_users = await self.find_inactive_users()
        
        if not inactive_users:
            logger.info("‚úÖ –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return {
                "total": 0,
                "sent": 0,
                "failed": 0
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        sent_count = 0
        failed_count = 0
        
        for user in inactive_users:
            success = await self.send_engagement_message(user)
            
            if success:
                sent_count += 1
            else:
                failed_count += 1
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (anti-spam)
            await asyncio.sleep(1)
        
        logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(inactive_users)}")
        
        return {
            "total": len(inactive_users),
            "sent": sent_count,
            "failed": failed_count
        }


"""
‚ö° –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
"""

import asyncio
import time
import psutil
import gc
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from enum import Enum

from loguru import logger


class PerformanceLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    EXCELLENT = "excellent"  # > 80%
    GOOD = "good"           # 60-80%
    FAIR = "fair"           # 40-60%
    POOR = "poor"           # 20-40%
    CRITICAL = "critical"   # < 20%


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    timestamp: datetime
    cpu_percent: float
    memory_percent: float
    memory_available: int
    disk_percent: float
    disk_free: int
    active_connections: int
    response_time_avg: float
    error_rate: float
    queue_size: int


class PerformanceMonitor:
    """‚ö° –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.metrics_history: List[PerformanceMetrics] = []
        self.max_history = 100  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.current_performance = PerformanceLevel.EXCELLENT
        self.is_monitoring = False
        self._monitoring_task: Optional[asyncio.Task] = None
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.thresholds = {
            "cpu_warning": 70.0,
            "cpu_critical": 90.0,
            "memory_warning": 80.0,
            "memory_critical": 95.0,
            "disk_warning": 85.0,
            "disk_critical": 95.0,
            "response_warning": 2.0,  # —Å–µ–∫—É–Ω–¥—ã
            "response_critical": 5.0,
            "error_rate_warning": 5.0,  # –ø—Ä–æ—Ü–µ–Ω—Ç
            "error_rate_critical": 15.0,
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "optimizations_performed": 0,
            "last_optimization": None,
            "performance_degradations": 0,
            "recoveries": 0,
        }
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_monitoring = True
        self._monitoring_task = asyncio.create_task(self._monitoring_loop())
        logger.info("‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        if self._monitoring_task:
            self._monitoring_task.cancel()
            try:
                await self._monitoring_task
            except asyncio.CancelledError:
                pass
        logger.info("‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                await self._collect_metrics()
                await self._analyze_performance()
                await self._check_for_optimization()
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                await asyncio.sleep(10)
    
    async def _collect_metrics(self):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            active_connections = len(psutil.net_connections())
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            queue_size = 0
            response_time_avg = 0.0
            error_rate = 0.0
            
            try:
                from bot.services.bot_24_7_service import bot_24_7_service
                if bot_24_7_service:
                    queue_size = len(bot_24_7_service.message_queue)
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            except Exception:
                pass
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
            metric = PerformanceMetrics(
                timestamp=datetime.now(),
                cpu_percent=cpu_percent,
                memory_percent=memory.percent,
                memory_available=memory.available,
                disk_percent=disk.percent,
                disk_free=disk.free,
                active_connections=active_connections,
                response_time_avg=response_time_avg,
                error_rate=error_rate,
                queue_size=queue_size,
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.metrics_history.append(metric)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.metrics_history) > self.max_history:
                self.metrics_history = self.metrics_history[-self.max_history:]
            
            logger.debug(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: CPU={cpu_percent:.1f}%, RAM={memory.percent:.1f}%, Queue={queue_size}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _analyze_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.metrics_history:
            return
        
        latest_metric = self.metrics_history[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_score = self._calculate_performance_score(latest_metric)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        old_performance = self.current_performance
        self.current_performance = self._get_performance_level(performance_score)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if old_performance != self.current_performance:
            if self._is_performance_degradation(old_performance, self.current_performance):
                self.stats["performance_degradations"] += 1
                logger.warning(f"‚ö†Ô∏è –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {old_performance.value} ‚Üí {self.current_performance.value}")
            else:
                self.stats["recoveries"] += 1
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {old_performance.value} ‚Üí {self.current_performance.value}")
    
    def _calculate_performance_score(self, metric: PerformanceMetrics) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        scores = []
        
        # CPU (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        cpu_score = max(0, 100 - metric.cpu_percent)
        scores.append(cpu_score)
        
        # Memory (—á–µ–º –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–π, —Ç–µ–º –ª—É—á—à–µ)
        memory_score = max(0, 100 - metric.memory_percent)
        scores.append(memory_score)
        
        # Disk (—á–µ–º –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–π, —Ç–µ–º –ª—É—á—à–µ)
        disk_score = max(0, 100 - metric.disk_percent)
        scores.append(disk_score)
        
        # Response time (—á–µ–º –±—ã—Å—Ç—Ä–µ–µ, —Ç–µ–º –ª—É—á—à–µ)
        if metric.response_time_avg > 0:
            response_score = max(0, 100 - (metric.response_time_avg * 20))  # 5 —Å–µ–∫ = 0 –±–∞–ª–ª–æ–≤
        else:
            response_score = 100
        scores.append(response_score)
        
        # Error rate (—á–µ–º –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫, —Ç–µ–º –ª—É—á—à–µ)
        error_score = max(0, 100 - metric.error_rate * 5)  # 20% –æ—à–∏–±–æ–∫ = 0 –±–∞–ª–ª–æ–≤
        scores.append(error_score)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        return sum(scores) / len(scores)
    
    def _get_performance_level(self, score: float) -> PerformanceLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–ª–ª—É"""
        if score >= 80:
            return PerformanceLevel.EXCELLENT
        elif score >= 60:
            return PerformanceLevel.GOOD
        elif score >= 40:
            return PerformanceLevel.FAIR
        elif score >= 20:
            return PerformanceLevel.POOR
        else:
            return PerformanceLevel.CRITICAL
    
    def _is_performance_degradation(self, old: PerformanceLevel, new: PerformanceLevel) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        levels = [PerformanceLevel.EXCELLENT, PerformanceLevel.GOOD, PerformanceLevel.FAIR, PerformanceLevel.POOR, PerformanceLevel.CRITICAL]
        old_index = levels.index(old)
        new_index = levels.index(new)
        return new_index > old_index
    
    async def _check_for_optimization(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.metrics_history:
            return
        
        latest_metric = self.metrics_history[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
        optimizations_needed = []
        
        if latest_metric.cpu_percent > self.thresholds["cpu_critical"]:
            optimizations_needed.append("cpu_critical")
        elif latest_metric.cpu_percent > self.thresholds["cpu_warning"]:
            optimizations_needed.append("cpu_warning")
        
        if latest_metric.memory_percent > self.thresholds["memory_critical"]:
            optimizations_needed.append("memory_critical")
        elif latest_metric.memory_percent > self.thresholds["memory_warning"]:
            optimizations_needed.append("memory_warning")
        
        if latest_metric.disk_percent > self.thresholds["disk_critical"]:
            optimizations_needed.append("disk_critical")
        elif latest_metric.disk_percent > self.thresholds["disk_warning"]:
            optimizations_needed.append("disk_warning")
        
        if latest_metric.response_time_avg > self.thresholds["response_critical"]:
            optimizations_needed.append("response_critical")
        elif latest_metric.response_time_avg > self.thresholds["response_warning"]:
            optimizations_needed.append("response_warning")
        
        if latest_metric.error_rate > self.thresholds["error_rate_critical"]:
            optimizations_needed.append("error_rate_critical")
        elif latest_metric.error_rate > self.thresholds["error_rate_warning"]:
            optimizations_needed.append("error_rate_warning")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if optimizations_needed:
            await self._perform_optimizations(optimizations_needed, latest_metric)
    
    async def _perform_optimizations(self, optimizations: List[str], metric: PerformanceMetrics):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        logger.warning(f"‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {', '.join(optimizations)}")
        
        for optimization in optimizations:
            try:
                if optimization == "cpu_critical" or optimization == "cpu_warning":
                    await self._optimize_cpu()
                
                elif optimization == "memory_critical" or optimization == "memory_warning":
                    await self._optimize_memory()
                
                elif optimization == "disk_critical" or optimization == "disk_warning":
                    await self._optimize_disk()
                
                elif optimization == "response_critical" or optimization == "response_warning":
                    await self._optimize_response_time()
                
                elif optimization == "error_rate_critical" or optimization == "error_rate_warning":
                    await self._optimize_error_rate()
                
                self.stats["optimizations_performed"] += 1
                self.stats["last_optimization"] = datetime.now()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {optimization}: {e}")
    
    async def _optimize_cpu(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CPU"""
        logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CPU...")
        
        # –°–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
        try:
            import os
            os.nice(1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º nice value
        except:
            pass
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
        # –ü–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        await asyncio.sleep(0.1)
    
    async def _optimize_memory(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        logger.info(f"üßπ –°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {collected}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            from bot.services.cache_service import cache_service
            if cache_service:
                cache_service.clear_expired()
        except:
            pass
    
    async def _optimize_disk(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        import tempfile
        import shutil
        
        try:
            temp_dir = tempfile.gettempdir()
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for item in os.listdir(temp_dir):
                if item.startswith('pandapal_'):
                    item_path = os.path.join(temp_dir, item)
                    if os.path.isfile(item_path):
                        os.remove(item_path)
                    elif os.path.isdir(item_path):
                        shutil.rmtree(item_path)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def _optimize_response_time(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞...")
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞)
        try:
            from bot.services.bot_24_7_service import bot_24_7_service
            if bot_24_7_service and len(bot_24_7_service.message_queue) > 100:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                bot_24_7_service.message_queue.sort(key=lambda x: (x.priority, x.timestamp))
                bot_24_7_service.message_queue = bot_24_7_service.message_queue[:50]
                logger.info("üßπ –û—á–∏—â–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π")
        except:
            pass
    
    async def _optimize_error_rate(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫"""
        logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫...")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            from bot.services.ai_fallback_service import ai_fallback_service
            if ai_fallback_service:
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
                for provider in ai_fallback_service.provider_errors:
                    ai_fallback_service.provider_errors[provider] = 0
                logger.info("üîÑ –°–±—Ä–æ—à–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        except:
            pass
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.metrics_history:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"}
        
        latest = self.metrics_history[-1]
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if len(self.metrics_history) >= 5:
            recent_avg_cpu = sum(m.cpu_percent for m in self.metrics_history[-5:]) / 5
            recent_avg_memory = sum(m.memory_percent for m in self.metrics_history[-5:]) / 5
        else:
            recent_avg_cpu = latest.cpu_percent
            recent_avg_memory = latest.memory_percent
        
        return {
            "current_performance": self.current_performance.value,
            "current_metrics": {
                "cpu_percent": latest.cpu_percent,
                "memory_percent": latest.memory_percent,
                "memory_available_gb": latest.memory_available // (1024**3),
                "disk_percent": latest.disk_percent,
                "disk_free_gb": latest.disk_free // (1024**3),
                "queue_size": latest.queue_size,
                "active_connections": latest.active_connections,
            },
            "trends": {
                "avg_cpu_5min": recent_avg_cpu,
                "avg_memory_5min": recent_avg_memory,
            },
            "statistics": self.stats,
            "thresholds": self.thresholds,
            "timestamp": datetime.now().isoformat()
        }
    
    def get_optimization_recommendations(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        if not self.metrics_history:
            return recommendations
        
        latest = self.metrics_history[-1]
        
        if latest.cpu_percent > self.thresholds["cpu_warning"]:
            recommendations.append("–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        if latest.memory_percent > self.thresholds["memory_warning"]:
            recommendations.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - –æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à–∏")
        
        if latest.disk_percent > self.thresholds["disk_warning"]:
            recommendations.append("–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ - –æ—á–∏—Å—Ç–∏—Ç–µ –ª–æ–≥–∏")
        
        if latest.queue_size > 50:
            recommendations.append("–ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π - —É–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        if self.current_performance in [PerformanceLevel.POOR, PerformanceLevel.CRITICAL]:
            recommendations.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
        
        return recommendations


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_monitor = PerformanceMonitor()
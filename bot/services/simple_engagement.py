"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–æ–≤–ª–µ—á–µ–Ω–∏—è - –≤—Å–µ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ
–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
from datetime import datetime, timedelta, time
from typing import List, Optional

from aiogram import Bot
from loguru import logger
from sqlalchemy import select, and_
from sqlalchemy.orm import Session

from bot.models import User, ChatHistory


class SimpleEngagementService:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot: Bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.bot = bot
        self.is_running = False
        self.last_reminder_sent = {}  # telegram_id -> datetime
        logger.info("‚úÖ Simple Engagement Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.is_running:
            return
            
        self.is_running = True
        logger.info("‚è∞ –°–ª—É–∂–±–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(self._reminder_loop())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        logger.info("‚è∞ –°–ª—É–∂–±–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def _reminder_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00
                now = datetime.now()
                if now.weekday() == 0 and now.hour == 10:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00
                    await self._send_weekly_reminders()
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def _send_weekly_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            from bot.database import get_db
            
            with next(get_db()) as db:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π)
                week_ago = datetime.now() - timedelta(days=7)
                
                inactive_users = db.scalars(
                    select(User).where(
                        and_(
                            User.is_active == True,
                            User.last_activity < week_ago,
                            User.telegram_id.notin_(self.last_reminder_sent.keys())
                        )
                    )
                ).all()
                
                sent_count = 0
                for user in inactive_users:
                    try:
                        message = self._get_reminder_message(user.age)
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=message
                        )
                        
                        self.last_reminder_sent[user.telegram_id] = datetime.now()
                        sent_count += 1
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(1)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                
                if sent_count > 0:
                    logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    def _get_reminder_message(self, user_age: Optional[int]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        if user_age and user_age <= 8:
            return (
                "üêº –ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ—Å–∫—É—á–∏–ª—Å—è –ø–æ —Ç–µ–±–µ!\n\n"
                "–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º —É—á–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! "
                "–£ –º–µ–Ω—è –µ—Å—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞—á–µ–∫ –¥–ª—è —Ç–µ–±—è.\n\n"
                "–ù–∞–ø–∏—à–∏ –º–Ω–µ /start –∏ –¥–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å! üéÆ"
            )
        elif user_age and user_age <= 12:
            return (
                "üêº –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!\n\n"
                "–ö–∞–∫ –¥–µ–ª–∞ —Å —É—Ä–æ–∫–∞–º–∏? –ú–æ–∂–µ—Ç, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? "
                "–Ø –≥–æ—Ç–æ–≤ –æ–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏!\n\n"
                "–ù–∞–ø–∏—à–∏ /start –∏ –¥–∞–≤–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! üìö"
            )
        else:
            return (
                "üêº –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?\n\n"
                "–ü–æ–º–Ω–∏—à—å, –º—ã —É—á–∏–ª–∏—Å—å –≤–º–µ—Å—Ç–µ? "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏ - —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n"
                "–ù–∞–ø–∏—à–∏ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è! ‚ú®"
            )

    async def send_immediate_reminder(self, telegram_id: int, user_age: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            message = self._get_reminder_message(user_age)
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "is_running": self.is_running,
            "reminders_sent": len(self.last_reminder_sent),
            "last_reminders": list(self.last_reminder_sent.keys())[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_simple_engagement = None

def get_simple_engagement(bot: Bot) -> SimpleEngagementService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    global _simple_engagement
    if _simple_engagement is None:
        _simple_engagement = SimpleEngagementService(bot)
    return _simple_engagement

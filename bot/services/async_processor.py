"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–µ
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
@module bot.services.async_processor
"""

import asyncio
import queue
import threading
import uuid
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Callable, Dict, List, Optional, Union

from loguru import logger


class TaskPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á"""

    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4


class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á"""

    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


@dataclass
class AsyncTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""

    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    func: Callable = None
    args: tuple = field(default_factory=tuple)
    kwargs: dict = field(default_factory=dict)
    priority: TaskPriority = TaskPriority.NORMAL
    status: TaskStatus = TaskStatus.PENDING
    created_at: datetime = field(default_factory=datetime.utcnow)
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Any = None
    error: Optional[Exception] = None
    retry_count: int = 0
    max_retries: int = 3
    ttl: Optional[int] = None  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–¥–∞—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    def __lt__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        return self.priority.value > other.priority.value


class AsyncProcessor:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–¥–∞—á
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
    """

    def __init__(self, max_workers: int = 4, queue_size: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

        Args:
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
            queue_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        """
        self.max_workers = max_workers
        self.queue_size = queue_size
        self._task_queue: queue.PriorityQueue = queue.PriorityQueue(maxsize=queue_size)
        self._workers: List[threading.Thread] = []
        self._running = False
        self._tasks: Dict[str, AsyncTask] = {}
        self._task_lock = threading.Lock()
        self._stats = {
            "total_tasks": 0,
            "completed_tasks": 0,
            "failed_tasks": 0,
            "cancelled_tasks": 0,
            "active_workers": 0,
        }

        logger.info(f"‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≤–æ—Ä–∫–µ—Ä–æ–≤: {max_workers})")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        if self._running:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._running = True

        # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
        for i in range(self.max_workers):
            worker = threading.Thread(
                target=self._worker_loop, name=f"AsyncWorker-{i+1}", daemon=True
            )
            worker.start()
            self._workers.append(worker)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–¥–∞—á
        cleanup_thread = threading.Thread(
            target=self._cleanup_loop, name="TaskCleanup", daemon=True
        )
        cleanup_thread.start()

        logger.info(f"üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å {self.max_workers} –≤–æ—Ä–∫–µ—Ä–∞–º–∏")

    def stop(self, timeout: int = 30):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
        """
        if not self._running:
            return

        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        self._running = False

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
        for worker in self._workers:
            worker.join(timeout=timeout)

        self._workers.clear()
        logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def submit_task(
        self,
        func: Callable,
        *args,
        priority: TaskPriority = TaskPriority.NORMAL,
        max_retries: int = 3,
        ttl: Optional[int] = None,
        **kwargs,
    ) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å

        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
            max_retries: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–¥–∞—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏

        Returns:
            ID –∑–∞–¥–∞—á–∏
        """
        if not self._running:
            raise RuntimeError("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        task = AsyncTask(
            func=func, args=args, kwargs=kwargs, priority=priority, max_retries=max_retries, ttl=ttl
        )

        try:
            self._task_queue.put(task, timeout=5)

            with self._task_lock:
                self._tasks[task.id] = task
                self._stats["total_tasks"] += 1

            logger.debug(f"üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.name})")
            return task.id

        except queue.Full:
            logger.error("‚ùå –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
            raise RuntimeError("–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")

    def get_task_status(self, task_id: str) -> Optional[TaskStatus]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏

        Args:
            task_id: ID –∑–∞–¥–∞—á–∏

        Returns:
            –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        with self._task_lock:
            task = self._tasks.get(task_id)
            return task.status if task else None

    def get_task_result(self, task_id: str) -> Any:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏

        Args:
            task_id: ID –∑–∞–¥–∞—á–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
        """
        with self._task_lock:
            task = self._tasks.get(task_id)
            if task and task.status == TaskStatus.COMPLETED:
                return task.result
            elif task and task.status == TaskStatus.FAILED:
                raise task.error
            return None

    def cancel_task(self, task_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É

        Args:
            task_id: ID –∑–∞–¥–∞—á–∏

        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        """
        with self._task_lock:
            task = self._tasks.get(task_id)
            if task and task.status == TaskStatus.PENDING:
                task.status = TaskStatus.CANCELLED
                self._stats["cancelled_tasks"] += 1
                logger.info(f"‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {task_id}")
                return True
            return False

    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        with self._task_lock:
            return {
                **self._stats,
                "queue_size": self._task_queue.qsize(),
                "active_tasks": len(
                    [t for t in self._tasks.values() if t.status == TaskStatus.PROCESSING]
                ),
                "pending_tasks": len(
                    [t for t in self._tasks.values() if t.status == TaskStatus.PENDING]
                ),
                "running": self._running,
            }

    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.debug(f"üîÑ –í–æ—Ä–∫–µ—Ä {threading.current_thread().name} –∑–∞–ø—É—â–µ–Ω")

        while self._running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = self._task_queue.get(timeout=1)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
                if task.status == TaskStatus.CANCELLED:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
                if task.ttl and datetime.utcnow() - task.created_at > timedelta(seconds=task.ttl):
                    task.status = TaskStatus.CANCELLED
                    self._stats["cancelled_tasks"] += 1
                    continue

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                self._execute_task(task)

                self._task_queue.task_done()

            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")

        logger.debug(f"üõë –í–æ—Ä–∫–µ—Ä {threading.current_thread().name} –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _execute_task(self, task: AsyncTask):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task.status = TaskStatus.PROCESSING
        task.started_at = datetime.utcnow()

        logger.debug(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task.id}")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if asyncio.iscoroutinefunction(task.func):
                # –î–ª—è async —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    result = loop.run_until_complete(task.func(*task.args, **task.kwargs))
                finally:
                    loop.close()
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                result = task.func(*task.args, **task.kwargs)

            task.result = result
            task.status = TaskStatus.COMPLETED
            task.completed_at = datetime.utcnow()
            self._stats["completed_tasks"] += 1

            logger.debug(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.id}")

        except Exception as e:
            task.error = e
            task.retry_count += 1

            if task.retry_count <= task.max_retries:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ {task.id}, –ø–æ–ø—ã—Ç–∫–∞ {task.retry_count}/{task.max_retries}: {e}"
                )
                task.status = TaskStatus.PENDING
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                try:
                    self._task_queue.put(task, timeout=1)
                except queue.Full:
                    task.status = TaskStatus.FAILED
                    self._stats["failed_tasks"] += 1
            else:
                task.status = TaskStatus.FAILED
                task.completed_at = datetime.utcnow()
                self._stats["failed_tasks"] += 1
                logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {task.id} - {e}")

    def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á"""
        while self._running:
            try:
                asyncio.sleep(300)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

                with self._task_lock:
                    now = datetime.utcnow()
                    tasks_to_remove = []

                    for task_id, task in self._tasks.items():
                        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
                        if (
                            task.status
                            in [TaskStatus.COMPLETED, TaskStatus.FAILED, TaskStatus.CANCELLED]
                            and task.completed_at
                            and now - task.completed_at > timedelta(hours=1)
                        ):
                            tasks_to_remove.append(task_id)

                    for task_id in tasks_to_remove:
                        del self._tasks[task_id]

                    if tasks_to_remove:
                        logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(tasks_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
async_processor = AsyncProcessor(max_workers=4)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
def async_task(
    priority: TaskPriority = TaskPriority.NORMAL, max_retries: int = 3, ttl: Optional[int] = None
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

    Args:
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
        max_retries: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–¥–∞—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """

    def decorator(func):
        def wrapper(*args, **kwargs):
            task_id = async_processor.submit_task(
                func, *args, priority=priority, max_retries=max_retries, ttl=ttl, **kwargs
            )
            return task_id

        wrapper.original_func = func
        wrapper.task_id = None
        return wrapper

    return decorator


def high_priority_task(max_retries: int = 5):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á"""
    return async_task(priority=TaskPriority.HIGH, max_retries=max_retries)


def low_priority_task(max_retries: int = 1):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á"""
    return async_task(priority=TaskPriority.LOW, max_retries=max_retries)


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
class BackgroundTasks:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á PandaPal"""

    @staticmethod
    @async_task(priority=TaskPriority.LOW)
    def cleanup_old_messages(user_id: int, older_than_days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from datetime import datetime, timedelta

        from bot.database import get_db
        from bot.models import ChatHistory

        cutoff_date = datetime.utcnow() - timedelta(days=older_than_days)

        with get_db() as db:
            deleted_count = (
                db.query(ChatHistory)
                .filter(
                    ChatHistory.user_telegram_id == user_id, ChatHistory.timestamp < cutoff_date
                )
                .delete()
            )

            db.commit()
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    @staticmethod
    @high_priority_task()
    def send_parent_notification(parent_id: int, message: str, child_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—é"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
        logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é {parent_id}: {message} (—Ä–µ–±–µ–Ω–æ–∫: {child_id})")

    @staticmethod
    @async_task(priority=TaskPriority.NORMAL)
    def generate_analytics_report(user_id: int, period_days: int = 7):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        logger.info(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {period_days} –¥–Ω–µ–π")

    @staticmethod
    @low_priority_task()
    def backup_user_data(user_id: int):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
async def wait_for_task(task_id: str, timeout: int = 300) -> Any:
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏

    Raises:
        TimeoutError: –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —Å—Ä–æ–∫
    """
    start_time = datetime.utcnow()

    while True:
        status = async_processor.get_task_status(task_id)

        if status == TaskStatus.COMPLETED:
            return async_processor.get_task_result(task_id)
        elif status == TaskStatus.FAILED:
            return async_processor.get_task_result(task_id)  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        elif status == TaskStatus.CANCELLED:
            raise RuntimeError("–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        if datetime.utcnow() - start_time > timedelta(seconds=timeout):
            raise TimeoutError(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —Å—Ä–æ–∫")

        await asyncio.sleep(1)


def get_processor_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    return async_processor.get_stats()

"""
–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini Vision API
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@module bot.services.vision_service
"""

import asyncio
import io
import base64
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum

import google.generativeai as genai
from loguru import logger
from aiogram.types import PhotoSize

from bot.config import settings
from bot.services.cache_service import cache_service
from bot.services.moderation_service import ContentModerationService


class ImageCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    EDUCATIONAL = "educational"
    MATHEMATICS = "mathematics"
    SCIENCE = "science"
    HISTORY = "history"
    ART = "art"
    TEXT = "text"
    DIAGRAM = "diagram"
    CHART = "chart"
    PHOTO = "photo"
    DRAWING = "drawing"
    INAPPROPRIATE = "inappropriate"
    UNKNOWN = "unknown"


class ImageSafetyLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    SAFE = "safe"
    SUSPICIOUS = "suspicious"
    UNSAFE = "unsafe"


@dataclass
class ImageAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    category: ImageCategory
    safety_level: ImageSafetyLevel
    description: str
    educational_content: Optional[str]
    subjects_detected: List[str]
    confidence: float
    moderation_flags: List[str]
    suggested_activities: List[str]


class VisionService:
    """
    –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini Vision
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑—Ä–µ–Ω–∏—è"""
        self.api_key = settings.gemini_api_key
        self.model_name = settings.gemini_model
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=self.api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.model = genai.GenerativeModel(
            model_name=self.model_name,
            generation_config={
                "temperature": 0.4,  # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                "top_p": 0.8,
                "top_k": 40,
                "max_output_tokens": 1024,
            },
            safety_settings=[
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.moderation_service = ContentModerationService()
        
        logger.info("üñºÔ∏è –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def analyze_image(
        self, 
        image_data: bytes, 
        user_message: Optional[str] = None,
        user_age: Optional[int] = None
    ) -> ImageAnalysisResult:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            image_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö
            user_message: –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_age: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            ImageAnalysisResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            image_hash = await self._get_image_hash(image_data)
            cache_key = cache_service.generate_key("image_analysis", image_hash, user_message)
            
            cached_result = await cache_service.get(cache_key)
            if cached_result:
                logger.debug("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
                return ImageAnalysisResult(**cached_result)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompt = self._build_analysis_prompt(user_message, user_age)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Gemini
            image_parts = self._prepare_image_for_gemini(image_data)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            response = await self._analyze_with_gemini(image_parts, analysis_prompt)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = self._parse_analysis_result(response)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            result = await self._apply_moderation(result, user_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await cache_service.set(cache_key, result.__dict__, ttl=3600)  # 1 —á–∞—Å
            
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result.category.value}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return self._create_error_result(str(e))
    
    async def generate_educational_response(
        self, 
        analysis_result: ImageAnalysisResult,
        user_message: Optional[str] = None,
        user_age: Optional[int] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_age: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        try:
            if analysis_result.safety_level == ImageSafetyLevel.UNSAFE:
                return self.moderation_service.get_safe_response_alternative("inappropriate_image")
            
            # –°—Ç—Ä–æ–∏–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            educational_prompt = self._build_educational_prompt(
                analysis_result, user_message, user_age
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self._generate_educational_content(educational_prompt)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç
            adapted_response = self._adapt_response_for_age(response, user_age)
            
            logger.info(f"üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {analysis_result.category.value}")
            
            return adapted_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "üòî –ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
    
    async def create_learning_task_from_image(
        self, 
        analysis_result: ImageAnalysisResult,
        user_age: Optional[int] = None,
        subject: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_age: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subject: –ü—Ä–µ–¥–º–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict[str, Any]: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
        """
        try:
            if analysis_result.safety_level != ImageSafetyLevel.SAFE:
                return {
                    "error": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á",
                    "reason": "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            detected_subject = subject or self._detect_primary_subject(analysis_result)
            difficulty = self._calculate_difficulty(user_age, detected_subject)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = {
                "type": "image_analysis_task",
                "subject": detected_subject,
                "difficulty": difficulty,
                "description": analysis_result.description,
                "question": self._generate_task_question(analysis_result, detected_subject),
                "hints": self._generate_task_hints(analysis_result, detected_subject),
                "expected_answers": self._generate_expected_answers(analysis_result, detected_subject),
                "educational_value": analysis_result.educational_content,
                "age_appropriate": self._is_age_appropriate(analysis_result, user_age)
            }
            
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: {detected_subject}")
            
            return task
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return {
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É",
                "reason": str(e)
            }
    
    def _build_analysis_prompt(self, user_message: Optional[str], user_age: Optional[int]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        age_context = ""
        if user_age:
            age_context = f"–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_age} –ª–µ—Ç. "
        
        message_context = ""
        if user_message:
            message_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_message}'. "
        
        return f"""
        {age_context}{message_context}
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ PandaPal, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ—Ç—è–º —É—á–∏—Ç—å—Å—è.
        
        –û–ü–ò–®–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï:
        - –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?
        - –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ª—é–¥–∏, –∂–∏–≤–æ—Ç–Ω—ã–µ –∏–ª–∏ —è–≤–ª–µ–Ω–∏—è –≤–∏–¥–Ω—ã?
        - –ï—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç, —á–∏—Å–ª–∞, —Ñ–æ—Ä–º—É–ª—ã –∏–ª–∏ —Å—Ö–µ–º—ã?
        
        –û–ü–†–ï–î–ï–õ–ò –ö–ê–¢–ï–ì–û–†–ò–Æ:
        - educational (–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)
        - mathematics (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —á–∏—Å–ª–∞, –≥—Ä–∞—Ñ–∏–∫–∏)
        - science (–Ω–∞—É–∫–∞, –ø—Ä–∏—Ä–æ–¥–∞, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã)
        - history (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
        - art (–∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ä–∏—Å—É–Ω–∫–∏, –∫–∞—Ä—Ç–∏–Ω—ã)
        - text (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–Ω–∏–≥–∏, —Å—Ç–∞—Ç—å–∏)
        - diagram (—Å—Ö–µ–º—ã, –¥–∏–∞–≥—Ä–∞–º–º—ã)
        - chart (–≥—Ä–∞—Ñ–∏–∫–∏, —Ç–∞–±–ª–∏—Ü—ã)
        - photo (–æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
        - drawing (—Ä–∏—Å—É–Ω–∫–∏, —ç—Å–∫–∏–∑—ã)
        - inappropriate (–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç)
        - unknown (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ)
        
        –û–¶–ï–ù–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
        - safe (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π)
        - suspicious (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
        - unsafe (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        
        –í–´–Ø–í–ò –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ:
        - –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –∏–∑—É—á–∞—Ç—å –ø–æ —ç—Ç–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é?
        - –ö–∞–∫–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å?
        - –ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è?
        
        –û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON:
        {{
            "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            "safety_level": "—É—Ä–æ–≤–µ–Ω—å_–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "educational_content": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å",
            "subjects_detected": ["–ø—Ä–µ–¥–º–µ—Ç1", "–ø—Ä–µ–¥–º–µ—Ç2"],
            "confidence": 0.95,
            "moderation_flags": ["—Ñ–ª–∞–≥1", "—Ñ–ª–∞–≥2"],
            "suggested_activities": ["–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å1", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å2"]
        }}
        """
    
    def _prepare_image_for_gemini(self, image_data: bytes) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Gemini"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º JPEG)
        mime_type = "image/jpeg"
        
        return {
            "mime_type": mime_type,
            "data": image_base64
        }
    
    async def _analyze_with_gemini(self, image_parts: Dict[str, Any], prompt: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            content = [prompt, image_parts]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.model.generate_content(content)
            
            return response.text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ Gemini: {e}")
            raise
    
    def _parse_analysis_result(self, response: str) -> ImageAnalysisResult:
        """–ü–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Gemini"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import json
            import re
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                data = json.loads(json_str)
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                data = {
                    "category": "unknown",
                    "safety_level": "safe",
                    "description": response[:200],
                    "educational_content": None,
                    "subjects_detected": [],
                    "confidence": 0.5,
                    "moderation_flags": [],
                    "suggested_activities": []
                }
            
            return ImageAnalysisResult(
                category=ImageCategory(data.get("category", "unknown")),
                safety_level=ImageSafetyLevel(data.get("safety_level", "safe")),
                description=data.get("description", ""),
                educational_content=data.get("educational_content"),
                subjects_detected=data.get("subjects_detected", []),
                confidence=float(data.get("confidence", 0.5)),
                moderation_flags=data.get("moderation_flags", []),
                suggested_activities=data.get("suggested_activities", [])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._create_error_result(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    
    async def _apply_moderation(self, result: ImageAnalysisResult, user_message: Optional[str]) -> ImageAnalysisResult:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if result.description:
                is_safe, reason = self.moderation_service.is_safe_content(result.description)
                if not is_safe:
                    result.safety_level = ImageSafetyLevel.UNSAFE
                    result.moderation_flags.append(f"description_blocked: {reason}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_message:
                is_safe, reason = self.moderation_service.is_safe_content(user_message)
                if not is_safe:
                    result.safety_level = ImageSafetyLevel.UNSAFE
                    result.moderation_flags.append(f"message_blocked: {reason}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            result.moderation_flags.append(f"moderation_error: {e}")
            return result
    
    def _build_educational_prompt(
        self, 
        analysis_result: ImageAnalysisResult,
        user_message: Optional[str],
        user_age: Optional[int]
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        age_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_age} –ª–µ—Ç. " if user_age else ""
        
        message_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: '{user_message}'. " if user_message else ""
        
        subjects_text = ", ".join(analysis_result.subjects_detected) if analysis_result.subjects_detected else "–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è"
        
        return f"""
        {age_context}{message_context}
        
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞.
        
        –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–¢:
        - –û–ø–∏—Å–∞–Ω–∏–µ: {analysis_result.description}
        - –ü—Ä–µ–¥–º–µ—Ç—ã: {subjects_text}
        - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result.educational_content or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
        
        –°–û–ó–î–ê–ô –û–¢–í–ï–¢, –ö–û–¢–û–†–´–ô:
        1. –û–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        2. –°–≤—è–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å —É—á–µ–±–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        3. –ó–∞–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        4. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
        5. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –¥–µ—Ç–µ–π
        
        –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º!
        """
    
    async def _generate_educational_content(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return "üòî –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
    
    def _adapt_response_for_age(self, response: str, user_age: Optional[int]) -> str:
        """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_age:
            return response
        
        if user_age <= 8:
            # –£–ø—Ä–æ—â–∞–µ–º —è–∑—ã–∫ –¥–ª—è –º–ª–∞–¥—à–∏—Ö —à–∫–æ–ª—å–Ω–∏–∫–æ–≤
            response = response.replace("—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "–ø–æ—ç—Ç–æ–º—É")
            response = response.replace("–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "–Ω—É–∂–Ω–æ")
            response = response.replace("–æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å", "—Å–¥–µ–ª–∞—Ç—å")
        
        elif user_age >= 14:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö —à–∫–æ–ª—å–Ω–∏–∫–æ–≤
            pass
        
        return response
    
    def _detect_primary_subject(self, analysis_result: ImageAnalysisResult) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞"""
        if not analysis_result.subjects_detected:
            return "–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è"
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã
        category_subject_map = {
            ImageCategory.MATHEMATICS: "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            ImageCategory.SCIENCE: "–±–∏–æ–ª–æ–≥–∏—è",
            ImageCategory.HISTORY: "–∏—Å—Ç–æ—Ä–∏—è",
            ImageCategory.ART: "–∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
            ImageCategory.TEXT: "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
            ImageCategory.DIAGRAM: "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            ImageCategory.CHART: "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        }
        
        return category_subject_map.get(analysis_result.category, "–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è")
    
    def _calculate_difficulty(self, user_age: Optional[int], subject: str) -> str:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏"""
        if not user_age:
            return "—Å—Ä–µ–¥–Ω—è—è"
        
        if user_age <= 8:
            return "–ª–µ–≥–∫–∞—è"
        elif user_age <= 12:
            return "—Å—Ä–µ–¥–Ω—è—è"
        else:
            return "—Å–ª–æ–∂–Ω–∞—è"
    
    def _generate_task_question(self, analysis_result: ImageAnalysisResult, subject: str) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á–∏"""
        base_questions = {
            "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ —á–∏—Å–ª–∞—Ö –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?",
            "–±–∏–æ–ª–æ–≥–∏—è": "–ö–∞–∫–∏–µ –∂–∏–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–º—ã —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
            "–∏—Å—Ç–æ—Ä–∏—è": "–ö–∞–∫–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ –∏–∑–æ–±—Ä–∞–∂—ë–Ω?",
            "–∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ": "–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º—ã —Ç—ã –∑–∞–º–µ—á–∞–µ—à—å?",
            "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": "–ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –µ–≥–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.",
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–û–ø–∏—à–∏ —Å—Ö–µ–º—É –∏–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ.",
            "–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è": "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        }
        
        return base_questions.get(subject, "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
    
    def _generate_task_hints(self, analysis_result: ImageAnalysisResult, subject: str) -> List[str]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        return [
            "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "–ü–æ–¥—É–º–∞–π –æ —Ç–æ–º, —á—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ",
            "–û–ø–∏—à–∏ —Å–Ω–∞—á–∞–ª–∞ –æ–±—â–µ–µ, –∞ –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª–∏"
        ]
    
    def _generate_expected_answers(self, analysis_result: ImageAnalysisResult, subject: str) -> List[str]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        return [
            analysis_result.description,
            "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "–°–≤—è–∑—å —Å –∏–∑—É—á–∞–µ–º—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º"
        ]
    
    def _is_age_appropriate(self, analysis_result: ImageAnalysisResult, user_age: Optional[int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        if analysis_result.safety_level != ImageSafetyLevel.SAFE:
            return False
        
        if not user_age:
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        return True
    
    async def _get_image_hash(self, image_data: bytes) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import hashlib
        return hashlib.md5(image_data).hexdigest()
    
    def _create_error_result(self, error_message: str) -> ImageAnalysisResult:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π"""
        return ImageAnalysisResult(
            category=ImageCategory.UNKNOWN,
            safety_level=ImageSafetyLevel.UNSAFE,
            description=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_message}",
            educational_content=None,
            subjects_detected=[],
            confidence=0.0,
            moderation_flags=[f"analysis_error: {error_message}"],
            suggested_activities=[]
        )

"""
üõ†Ô∏è –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–û–°–õ–ï –û–®–ò–ë–û–ö
Graceful degradation –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Callable, List
from dataclasses import dataclass
from enum import Enum
import traceback
import functools

from loguru import logger
from sqlalchemy.exc import OperationalError, DisconnectionError
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError, TelegramRetryAfter
import aiohttp
from aiohttp import ClientError, ServerTimeoutError


class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    LOW = "low"           # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É
    MEDIUM = "medium"     # –°—Ä–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏, —á–∞—Å—Ç–∏—á–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è
    HIGH = "high"         # –°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    CRITICAL = "critical" # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞


@dataclass
class ErrorInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error_type: str
    severity: ErrorSeverity
    message: str
    timestamp: datetime
    retry_count: int = 0
    max_retries: int = 3
    last_retry: Optional[datetime] = None
    recovery_strategy: Optional[str] = None


class ErrorRecoveryService:
    """üõ†Ô∏è –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.error_history: List[ErrorInfo] = []
        self.recovery_strategies: Dict[str, Callable] = {}
        self.circuit_breakers: Dict[str, bool] = {}  # Circuit breaker pattern
        self.max_error_history = 100
        self.is_monitoring = False
        self._monitoring_task: Optional[asyncio.Task] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self._init_recovery_strategies()
    
    def _init_recovery_strategies(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        self.recovery_strategies = {
            "database_connection": self._recover_database_connection,
            "telegram_api": self._recover_telegram_api,
            "gemini_api": self._recover_gemini_api,
            "web_server": self._recover_web_server,
            "rate_limit": self._recover_rate_limit,
            "timeout": self._recover_timeout,
            "network": self._recover_network,
            "memory": self._recover_memory,
            "disk_space": self._recover_disk_space,
        }
    
    def handle_error(
        self, 
        error: Exception, 
        context: str = "",
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        retry_func: Optional[Callable] = None,
        max_retries: int = 3
    ) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        
        error_info = ErrorInfo(
            error_type=type(error).__name__,
            severity=severity,
            message=str(error),
            timestamp=datetime.now(),
            max_retries=max_retries
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._add_to_history(error_info)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self._log_error(error_info, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        strategy = self._determine_recovery_strategy(error_info)
        error_info.recovery_strategy = strategy
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if strategy and retry_func:
            return asyncio.create_task(
                self._execute_recovery(error_info, retry_func)
            )
        
        return False
    
    def _add_to_history(self, error_info: ErrorInfo):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.error_history.append(error_info)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.error_history) > self.max_error_history:
            self.error_history = self.error_history[-self.max_error_history:]
    
    def _log_error(self, error_info: ErrorInfo, context: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"""
        
        log_message = f"‚ùå {error_info.error_type}: {error_info.message}"
        if context:
            log_message += f" | Context: {context}"
        
        if error_info.severity == ErrorSeverity.CRITICAL:
            logger.critical(log_message)
        elif error_info.severity == ErrorSeverity.HIGH:
            logger.error(log_message)
        elif error_info.severity == ErrorSeverity.MEDIUM:
            logger.warning(log_message)
        else:
            logger.info(log_message)
    
    def _determine_recovery_strategy(self, error_info: ErrorInfo) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        error_type = error_info.error_type.lower()
        error_message = error_info.message.lower()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if "operationalerror" in error_type or "disconnectionerror" in error_type:
            return "database_connection"
        
        # Telegram API
        elif "telegramapi" in error_type or "telegramnetwork" in error_type:
            if "rate limit" in error_message or "too many requests" in error_message:
                return "rate_limit"
            else:
                return "telegram_api"
        
        # Gemini AI
        elif "google" in error_message or "gemini" in error_message:
            return "gemini_api"
        
        # –¢–∞–π–º–∞—É—Ç—ã
        elif "timeout" in error_message or "timed out" in error_message:
            return "timeout"
        
        # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        elif "connection" in error_message or "network" in error_message:
            return "network"
        
        # –ü–∞–º—è—Ç—å
        elif "memory" in error_message or "out of memory" in error_message:
            return "memory"
        
        # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        elif "disk" in error_message or "space" in error_message:
            return "disk_space"
        
        # –í–µ–±-—Å–µ—Ä–≤–µ—Ä
        elif "http" in error_type or "server" in error_message:
            return "web_server"
        
        return None
    
    async def _execute_recovery(self, error_info: ErrorInfo, retry_func: Callable) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        if error_info.retry_count >= error_info.max_retries:
            logger.error(f"üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {error_info.error_type}")
            return False
        
        error_info.retry_count += 1
        error_info.last_retry = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        strategy = self.recovery_strategies.get(error_info.recovery_strategy)
        if not strategy:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {error_info.recovery_strategy}")
            return False
        
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {error_info.retry_count}/{error_info.max_retries} –¥–ª—è {error_info.error_type}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            await strategy(error_info)
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(min(error_info.retry_count * 2, 10))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            result = await retry_func()
            
            if result:
                logger.success(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {error_info.error_type}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {error_info.error_type}")
                return False
                
        except Exception as recovery_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {error_info.error_type}: {recovery_error}")
            return False
    
    async def _recover_database_connection(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from bot.database import engine
            
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            engine.dispose()
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            from bot.database import DatabaseService
            if DatabaseService.check_connection():
                logger.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
            raise
    
    async def _recover_telegram_api(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram API"""
        try:
            from bot.main import bot
            
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram API...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook
            await bot.delete_webhook()
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            me = await bot.get_me()
            if me:
                logger.success("‚úÖ Telegram API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram API")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Telegram API: {e}")
            raise
    
    async def _recover_gemini_api(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Gemini API"""
        try:
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Gemini API...")
            
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
            from bot.services.ai_service import AIService
            ai_service = AIService()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
            test_response = await ai_service.generate_response("–¢–µ—Å—Ç")
            if test_response:
                logger.success("‚úÖ Gemini API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Gemini API")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Gemini API: {e}")
            raise
    
    async def _recover_web_server(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            import os
            port = os.getenv("PORT", "8000")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(f"http://localhost:{port}/health", timeout=5) as response:
                    if response.status == 200:
                        logger.success("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    else:
                        raise Exception(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    async def _recover_rate_limit(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ rate limit"""
        logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–Ω—è—Ç–∏—è rate limit...")
        await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
    
    async def _recover_timeout(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
        logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞...")
        await asyncio.sleep(5)
    
    async def _recover_network(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        await asyncio.sleep(3)
    
    async def _recover_memory(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é"""
        logger.info("üîÑ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
        import gc
        gc.collect()
        await asyncio.sleep(2)
    
    async def _recover_disk_space(self, error_info: ErrorInfo):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–∏—Å–∫–æ–≤—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º"""
        logger.info("üîÑ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await asyncio.sleep(1)
    
    def get_error_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        now = datetime.now()
        last_hour = now - timedelta(hours=1)
        last_day = now - timedelta(days=1)
        
        recent_errors = [e for e in self.error_history if e.timestamp > last_hour]
        daily_errors = [e for e in self.error_history if e.timestamp > last_day]
        
        return {
            "total_errors": len(self.error_history),
            "errors_last_hour": len(recent_errors),
            "errors_last_day": len(daily_errors),
            "error_types": {
                error_type: len([e for e in self.error_history if e.error_type == error_type])
                for error_type in set(e.error_type for e in self.error_history)
            },
            "severity_distribution": {
                severity.value: len([e for e in self.error_history if e.severity == severity])
                for severity in ErrorSeverity
            },
            "recent_errors": [
                {
                    "type": e.error_type,
                    "severity": e.severity.value,
                    "message": e.message[:100],
                    "timestamp": e.timestamp.isoformat(),
                    "retry_count": e.retry_count
                }
                for e in recent_errors[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
            ]
        }
    
    def clear_error_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""
        self.error_history.clear()
        logger.info("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω–∞")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def auto_recovery(
    error_severity: ErrorSeverity = ErrorSeverity.MEDIUM,
    max_retries: int = 3,
    context: str = ""
):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            recovery_service = ErrorRecoveryService()
            
            for attempt in range(max_retries + 1):
                try:
                    return await func(*args, **kwargs)
                    
                except Exception as e:
                    if attempt == max_retries:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                        recovery_service.handle_error(
                            e, context, ErrorSeverity.CRITICAL
                        )
                        raise
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    success = recovery_service.handle_error(
                        e, context, error_severity, 
                        lambda: func(*args, **kwargs), max_retries
                    )
                    
                    if not success:
                        await asyncio.sleep(min(attempt * 2, 10))
                        
            return None
            
        return wrapper
    return decorator


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
error_recovery_service = ErrorRecoveryService()

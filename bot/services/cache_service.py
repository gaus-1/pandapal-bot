"""
–°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –¥–∞–Ω–Ω—ã–º

"""

import asyncio
import hashlib
import json
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

from loguru import logger

# Redis imports –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ in-memory cache
REDIS_AVAILABLE = False

from bot.config import settings


@dataclass
class CacheConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    default_ttl: int = 3600  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    max_memory_mb: int = 100  # –ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏ –¥–ª—è –∫—ç—à–∞
    compression_enabled: bool = True
    serialization_format: str = "json"


class MemoryCache:
    """In-memory –∫—ç—à –∫–∞–∫ fallback –∫–æ–≥–¥–∞ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""

    def __init__(self, max_size: int = 1000):
        self._cache: Dict[str, Dict[str, Any]] = {}
        self._max_size = max_size
        self._access_times: Dict[str, datetime] = {}

    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if key not in self._cache:
            return None

        cache_item = self._cache[key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if cache_item.get("expires_at"):
            if datetime.utcnow() > datetime.fromisoformat(cache_item["expires_at"]):
                del self._cache[key]
                del self._access_times[key]
                return None

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞
        self._access_times[key] = datetime.utcnow()

        return cache_item["value"]

    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        # –ï—Å–ª–∏ –∫—ç—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if len(self._cache) >= self._max_size:
            await self._evict_oldest()

        expires_at = None
        if ttl:
            expires_at = (datetime.utcnow() + timedelta(seconds=ttl)).isoformat()

        self._cache[key] = {
            "value": value,
            "expires_at": expires_at,
            "created_at": datetime.utcnow().isoformat(),
        }
        self._access_times[key] = datetime.utcnow()

        return True

    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if key in self._cache:
            del self._cache[key]
            del self._access_times[key]
            return True
        return False

    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
        if key not in self._cache:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        cache_item = self._cache[key]
        if cache_item.get("expires_at"):
            if datetime.utcnow() > datetime.fromisoformat(cache_item["expires_at"]):
                del self._cache[key]
                del self._access_times[key]
                return False

        return True

    async def clear(self) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        self._cache.clear()
        self._access_times.clear()
        return True

    async def _evict_oldest(self):
        """–£–¥–∞–ª–∏—Ç—å —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        if not self._access_times:
            return

        oldest_key = min(self._access_times.keys(), key=lambda k: self._access_times[k])
        del self._cache[oldest_key]
        del self._access_times[oldest_key]

    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        now = datetime.utcnow()
        expired_count = 0

        for item in self._cache.values():
            if item.get("expires_at"):
                if now > datetime.fromisoformat(item["expires_at"]):
                    expired_count += 1

        return {
            "total_items": len(self._cache),
            "expired_items": expired_count,
            "max_size": self._max_size,
            "memory_usage_mb": len(str(self._cache)) / 1024 / 1024,
        }


class CacheService:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Redis –∏ fallback –Ω–∞ in-memory –∫—ç—à
    """

    def __init__(self):
        self.config = CacheConfig()
        self._redis_client: Optional[aioredis.Redis] = None
        self._memory_cache = MemoryCache()
        self._use_redis = False

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
        if REDIS_AVAILABLE:
            self._init_redis()
        else:
            logger.warning("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory –∫—ç—à (Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

    def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            redis_url = getattr(settings, "redis_url", "redis://localhost:6379/0")

            self._redis_client = aioredis.from_url(
                redis_url,
                encoding="utf-8",
                decode_responses=True,
                socket_connect_timeout=5,
                socket_timeout=5,
                retry_on_timeout=True,
                health_check_interval=30,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            # asyncio.create_task(self._test_redis_connection())

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self._redis_client = None

    async def _test_redis_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            if self._redis_client:
                await self._redis_client.ping()
                self._use_redis = True
                logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self._use_redis = False
            self._redis_client = None

    async def get(self, key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            if self._use_redis and self._redis_client:
                value = await self._redis_client.get(key)
                if value:
                    return json.loads(value)
                return None
            else:
                return await self._memory_cache.get(key)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return None

    async def set(
        self, key: str, value: Any, ttl: Optional[int] = None, serialize: bool = True
    ) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            serialize: –ù—É–∂–Ω–æ –ª–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            if ttl is None:
                ttl = self.config.default_ttl

            if self._use_redis and self._redis_client:
                if serialize:
                    value = json.dumps(value, ensure_ascii=False, default=str)

                await self._redis_client.setex(key, ttl, value)
                return True
            else:
                await self._memory_cache.set(key, value, ttl)
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à {key}: {e}")
            return False

    async def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        try:
            if self._use_redis and self._redis_client:
                result = await self._redis_client.delete(key)
                return result > 0
            else:
                return await self._memory_cache.delete(key)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return False

    async def exists(self, key: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ –∫—ç—à–µ

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            True –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            if self._use_redis and self._redis_client:
                result = await self._redis_client.exists(key)
                return result > 0
            else:
                return await self._memory_cache.exists(key)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ {key}: {e}")
            return False

    async def clear(self, pattern: str = "*") -> bool:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à

        Args:
            pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Redis)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            if self._use_redis and self._redis_client:
                if pattern == "*":
                    await self._redis_client.flushdb()
                else:
                    keys = await self._redis_client.keys(pattern)
                    if keys:
                        await self._redis_client.delete(*keys)
                return True
            else:
                return await self._memory_cache.clear()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return False

    def generate_key(self, prefix: str, *args, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        Args:
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        """
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        key_parts = [prefix]

        for arg in args:
            if isinstance(arg, (dict, list)):
                key_parts.append(json.dumps(arg, sort_keys=True))
            else:
                key_parts.append(str(arg))

        for key, value in sorted(kwargs.items()):
            if isinstance(value, (dict, list)):
                key_parts.append(f"{key}:{json.dumps(value, sort_keys=True)}")
            else:
                key_parts.append(f"{key}:{value}")

        key_string = ":".join(key_parts)

        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        if len(key_string) > 250:
            key_hash = hashlib.md5(key_string.encode()).hexdigest()
            return f"{prefix}:hash:{key_hash}"

        return key_string

    async def get_or_set(
        self, key: str, fetch_func, ttl: Optional[int] = None, *args, **kwargs
    ) -> Any:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            fetch_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è fetch_func
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è fetch_func

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç fetch_func
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_value = await self.get(key)
        if cached_value is not None:
            return cached_value

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        try:
            if asyncio.iscoroutinefunction(fetch_func):
                value = await fetch_func(*args, **kwargs)
            else:
                value = fetch_func(*args, **kwargs)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await self.set(key, value, ttl)

            return value

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ fetch_func –¥–ª—è –∫–ª—é—á–∞ {key}: {e}")
            raise

    async def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            if self._use_redis and self._redis_client:
                info = await self._redis_client.info()
                return {
                    "type": "redis",
                    "connected": True,
                    "used_memory_mb": info.get("used_memory", 0) / 1024 / 1024,
                    "connected_clients": info.get("connected_clients", 0),
                    "total_commands_processed": info.get("total_commands_processed", 0),
                    "keyspace_hits": info.get("keyspace_hits", 0),
                    "keyspace_misses": info.get("keyspace_misses", 0),
                    "hit_rate": self._calculate_hit_rate(info),
                }
            else:
                stats = await self._memory_cache.get_stats()
                stats["type"] = "memory"
                stats["connected"] = False
                return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            return {"type": "unknown", "connected": False, "error": str(e)}

    def _calculate_hit_rate(self, info: Dict[str, Any]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        hits = info.get("keyspace_hits", 0)
        misses = info.get("keyspace_misses", 0)
        total = hits + misses

        if total == 0:
            return 0.0

        return (hits / total) * 100

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._redis_client:
            await self._redis_client.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
cache_service = CacheService()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
def cached(ttl: int = 3600, key_prefix: str = "cache"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π

    Args:
        ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        key_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞
    """

    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            key = cache_service.generate_key(key_prefix, func.__name__, *args, **kwargs)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            cached_result = await cache_service.get(key)
            if cached_result is not None:
                return cached_result

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if asyncio.iscoroutinefunction(func):
                result = await func(*args, **kwargs)
            else:
                result = func(*args, **kwargs)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await cache_service.set(key, result, ttl)

            return result

        return wrapper

    return decorator


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
class UserCache:
    """–ö—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""

    @staticmethod
    async def get_user(telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        key = cache_service.generate_key("user", telegram_id)
        return await cache_service.get(key)

    @staticmethod
    async def set_user(telegram_id: int, user_data: Dict[str, Any], ttl: int = 1800) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à"""
        key = cache_service.generate_key("user", telegram_id)
        return await cache_service.set(key, user_data, ttl)

    @staticmethod
    async def invalidate_user(telegram_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        key = cache_service.generate_key("user", telegram_id)
        return await cache_service.delete(key)


class ModerationCache:
    """–ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

    @staticmethod
    async def get_moderation_result(content_hash: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞"""
        key = cache_service.generate_key("moderation", content_hash)
        return await cache_service.get(key)

    @staticmethod
    async def set_moderation_result(
        content_hash: str, result: Dict[str, Any], ttl: int = 7200
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –∫—ç—à"""
        key = cache_service.generate_key("moderation", content_hash)
        return await cache_service.set(key, result, ttl)

    @staticmethod
    async def invalidate_moderation(content_hash: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞"""
        key = cache_service.generate_key("moderation", content_hash)
        return await cache_service.delete(key)


class AIResponseCache:
    """–ö—ç—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ AI"""

    @staticmethod
    async def get_response(query_hash: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç AI –∏–∑ –∫—ç—à–∞"""
        key = cache_service.generate_key("ai_response", query_hash)
        return await cache_service.get(key)

    @staticmethod
    async def set_response(query_hash: str, response: str, ttl: int = 3600) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç AI –≤ –∫—ç—à"""
        key = cache_service.generate_key("ai_response", query_hash)
        return await cache_service.set(key, response, ttl)

    @staticmethod
    async def invalidate_response(query_hash: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç AI –∏–∑ –∫—ç—à–∞"""
        key = cache_service.generate_key("ai_response", query_hash)
        return await cache_service.delete(key)

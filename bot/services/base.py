"""
–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è SOLID –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –û–û–ü –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
@module bot.services.base
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, Generic, Optional, TypeVar

from sqlalchemy.orm import Session

T = TypeVar('T')


class BaseService(ABC, Generic[T]):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
    –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """

    def __init__(self, db: Optional[Session] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.db = db

    @abstractmethod
    def validate_data(self, data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –†–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        pass

    def log_operation(self, operation: str, **kwargs) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å–∞

        Args:
            operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        from loguru import logger
        logger.info(f"üîß {self.__class__.__name__}: {operation}", **kwargs)


class DatabaseService(BaseService[T]):
    """
    –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ (OCP)
    """

    def __init__(self, db: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ë–î

        Args:
            db: –°–µ—Å—Å–∏—è SQLAlchemy
        """
        super().__init__(db)

    @abstractmethod
    def create(self, data: Dict[str, Any]) -> T:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è

        Returns:
            T: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        """
        pass

    @abstractmethod
    def get_by_id(self, id: int) -> Optional[T]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID

        Args:
            id: ID –∑–∞–ø–∏—Å–∏

        Returns:
            Optional[T]: –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ None
        """
        pass

    @abstractmethod
    def update(self, id: int, data: Dict[str, Any]) -> Optional[T]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

        Args:
            id: ID –∑–∞–ø–∏—Å–∏
            data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            Optional[T]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ None
        """
        pass

    @abstractmethod
    def delete(self, id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

        Args:
            id: ID –∑–∞–ø–∏—Å–∏

        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        pass

    def commit(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î"""
        if self.db:
            self.db.commit()
            self.log_operation("commit")

    def rollback(self) -> None:
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if self.db:
            self.db.rollback()
            self.log_operation("rollback")


class SingletonService(BaseService[T]):
    """
    –°–µ—Ä–≤–∏—Å —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º Singleton
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
    """

    _instance: Optional['SingletonService'] = None
    _initialized: bool = False

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, db: Optional[Session] = None):
        if not self._initialized:
            super().__init__(db)
            self._initialized = True

    def validate_data(self, data: Dict[str, Any]) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è singleton —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return isinstance(data, dict) and len(data) > 0


class CacheService(BaseService[T]):
    """
    –°–µ—Ä–≤–∏—Å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤ (LSP)
    """

    def __init__(self, db: Optional[Session] = None, cache_size: int = 100):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∫—ç—à–µ–º

        Args:
            db: –°–µ—Å—Å–∏—è –ë–î
            cache_size: –†–∞–∑–º–µ—Ä –∫—ç—à–∞
        """
        super().__init__(db)
        self.cache: Dict[str, Any] = {}
        self.cache_size = cache_size

    def get_from_cache(self, key: str) -> Optional[T]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            Optional[T]: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None
        """
        return self.cache.get(key)

    def set_to_cache(self, key: str, value: T) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if len(self.cache) >= self.cache_size:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
            oldest_key = next(iter(self.cache))
            del self.cache[oldest_key]

        self.cache[key] = value

    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cache.clear()
        self.log_operation("cache_cleared")


class ValidationMixin:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (ISP)
    """

    @staticmethod
    def validate_telegram_id(telegram_id: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID"""
        return isinstance(telegram_id, int) and telegram_id > 0

    @staticmethod
    def validate_age(age: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        from bot.config import MAX_AGE, MIN_AGE
        return isinstance(age, int) and MIN_AGE <= age <= MAX_AGE

    @staticmethod
    def validate_grade(grade: int) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞"""
        from bot.config import MAX_GRADE, MIN_GRADE
        return isinstance(grade, int) and MIN_GRADE <= grade <= MAX_GRADE

    @staticmethod
    def validate_text(text: str, max_length: int = 4000) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        return isinstance(text, str) and len(text.strip()) > 0 and len(text) <= max_length

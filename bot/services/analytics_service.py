"""
–°–µ—Ä–≤–∏—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è PandaPal
–°–æ–±–∏—Ä–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –æ–±—É—á–µ–Ω–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@module bot.services.analytics_service
"""

import asyncio
import json
import statistics
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple

from loguru import logger
from sqlalchemy import and_, func, or_
from sqlalchemy.orm import Session

from bot.models import ChatHistory, LearningSession, User, UserProgress
from bot.services.cache_service import cache_service


class AnalyticsPeriod(Enum):
    """–ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    DAY = "day"
    WEEK = "week"
    MONTH = "month"
    QUARTER = "quarter"
    YEAR = "year"


class UserSegment(Enum):
    """–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    NEW_USERS = "new_users"
    ACTIVE_USERS = "active_users"
    ENGAGED_USERS = "engaged_users"
    AT_RISK_USERS = "at_risk_users"
    POWER_USERS = "power_users"


@dataclass
class UserAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id: int
    total_messages: int
    ai_interactions: int
    voice_messages: int
    blocked_messages: int
    learning_sessions: int
    subjects_covered: List[str]
    average_session_duration: float
    last_activity: datetime
    engagement_score: float
    safety_score: float
    learning_progress: Dict[str, Any]


@dataclass
class LearningAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""

    total_sessions: int
    active_users: int
    popular_subjects: List[Tuple[str, int]]
    average_session_duration: float
    completion_rate: float
    difficulty_distribution: Dict[str, int]
    progress_trends: Dict[str, float]
    achievement_stats: Dict[str, int]


@dataclass
class SafetyAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    total_blocks: int
    block_categories: Dict[str, int]
    risk_users: List[int]
    moderation_effectiveness: float
    false_positive_rate: float
    escalation_incidents: int
    safety_trends: Dict[str, float]


@dataclass
class ParentDashboardData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è"""

    child_id: int
    period: AnalyticsPeriod
    activity_summary: Dict[str, Any]
    learning_summary: Dict[str, Any]
    safety_summary: Dict[str, Any]
    recommendations: List[str]
    charts_data: Dict[str, Any]


class AnalyticsService:
    """
    –°–µ—Ä–≤–∏—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ PandaPal
    –°–æ–±–∏—Ä–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    """

    def __init__(self, db_session: Session):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.db = db_session
        self.cache_ttl = 3600  # 1 —á–∞—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

        logger.info("üìä –°–µ—Ä–≤–∏—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def get_user_analytics(
        self, user_id: int, period: AnalyticsPeriod = AnalyticsPeriod.MONTH
    ) -> UserAnalytics:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            period: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            UserAnalytics: –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        cache_key = cache_service.generate_key("user_analytics", user_id, period.value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return UserAnalytics(**cached_result)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        end_date = datetime.utcnow()
        start_date = self._calculate_period_start(end_date, period)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        user_data = await self._get_user_data(user_id, start_date, end_date)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = UserAnalytics(
            user_id=user_id,
            total_messages=user_data["total_messages"],
            ai_interactions=user_data["ai_interactions"],
            voice_messages=user_data["voice_messages"],
            blocked_messages=user_data["blocked_messages"],
            learning_sessions=user_data["learning_sessions"],
            subjects_covered=user_data["subjects_covered"],
            average_session_duration=user_data["average_session_duration"],
            last_activity=user_data["last_activity"],
            engagement_score=self._calculate_engagement_score(user_data),
            safety_score=self._calculate_safety_score(user_data),
            learning_progress=user_data["learning_progress"],
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, analytics.__dict__, self.cache_ttl)

        return analytics

    async def get_learning_analytics(
        self, period: AnalyticsPeriod = AnalyticsPeriod.MONTH
    ) -> LearningAnalytics:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è

        Args:
            period: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            LearningAnalytics: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        """
        cache_key = cache_service.generate_key("learning_analytics", period.value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return LearningAnalytics(**cached_result)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        end_date = datetime.utcnow()
        start_date = self._calculate_period_start(end_date, period)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        learning_data = await self._get_learning_data(start_date, end_date)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = LearningAnalytics(
            total_sessions=learning_data["total_sessions"],
            active_users=learning_data["active_users"],
            popular_subjects=learning_data["popular_subjects"],
            average_session_duration=learning_data["average_session_duration"],
            completion_rate=learning_data["completion_rate"],
            difficulty_distribution=learning_data["difficulty_distribution"],
            progress_trends=learning_data["progress_trends"],
            achievement_stats=learning_data["achievement_stats"],
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, analytics.__dict__, self.cache_ttl)

        return analytics

    async def get_safety_analytics(
        self, period: AnalyticsPeriod = AnalyticsPeriod.MONTH
    ) -> SafetyAnalytics:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        Args:
            period: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            SafetyAnalytics: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        cache_key = cache_service.generate_key("safety_analytics", period.value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return SafetyAnalytics(**cached_result)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        end_date = datetime.utcnow()
        start_date = self._calculate_period_start(end_date, period)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        safety_data = await self._get_safety_data(start_date, end_date)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = SafetyAnalytics(
            total_blocks=safety_data["total_blocks"],
            block_categories=safety_data["block_categories"],
            risk_users=safety_data["risk_users"],
            moderation_effectiveness=safety_data["moderation_effectiveness"],
            false_positive_rate=safety_data["false_positive_rate"],
            escalation_incidents=safety_data["escalation_incidents"],
            safety_trends=safety_data["safety_trends"],
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, analytics.__dict__, self.cache_ttl)

        return analytics

    async def get_parent_dashboard(
        self, parent_id: int, child_id: int, period: AnalyticsPeriod = AnalyticsPeriod.WEEK
    ) -> ParentDashboardData:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è

        Args:
            parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—è
            child_id: ID —Ä–µ–±–µ–Ω–∫–∞
            period: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            ParentDashboardData: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        """
        cache_key = cache_service.generate_key(
            "parent_dashboard", parent_id, child_id, period.value
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return ParentDashboardData(**cached_result)

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–µ–±–µ–Ω–∫–∞
        child_analytics = await self.get_user_analytics(child_id, period)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        end_date = datetime.utcnow()
        start_date = self._calculate_period_start(end_date, period)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = ParentDashboardData(
            child_id=child_id,
            period=period,
            activity_summary=self._build_activity_summary(child_analytics),
            learning_summary=self._build_learning_summary(child_analytics),
            safety_summary=self._build_safety_summary(child_analytics),
            recommendations=self._generate_recommendations(child_analytics),
            charts_data=self._build_charts_data(child_id, start_date, end_date),
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, dashboard_data.__dict__, self.cache_ttl)

        return dashboard_data

    async def get_user_segments(self) -> Dict[UserSegment, List[int]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            Dict[UserSegment, List[int]]: –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        cache_key = cache_service.generate_key("user_segments")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return cached_result

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        segments = {
            UserSegment.NEW_USERS: await self._get_new_users(),
            UserSegment.ACTIVE_USERS: await self._get_active_users(),
            UserSegment.ENGAGED_USERS: await self._get_engaged_users(),
            UserSegment.AT_RISK_USERS: await self._get_at_risk_users(),
            UserSegment.POWER_USERS: await self._get_power_users(),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, segments, self.cache_ttl)

        return segments

    async def get_trend_analysis(
        self, metric: str, period: AnalyticsPeriod = AnalyticsPeriod.MONTH
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –º–µ—Ç—Ä–∏–∫–∏

        Args:
            metric: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            period: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            Dict[str, Any]: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        cache_key = cache_service.generate_key("trend_analysis", metric, period.value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return cached_result

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
        end_date = datetime.utcnow()
        start_date = self._calculate_period_start(end_date, period)

        trend_data = await self._calculate_trend(metric, start_date, end_date)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, trend_data, self.cache_ttl)

        return trend_data

    async def get_comprehensive_report(
        self, period: AnalyticsPeriod = AnalyticsPeriod.MONTH
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º

        Args:
            period: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            Dict[str, Any]: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        cache_key = cache_service.generate_key("comprehensive_report", period.value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return cached_result

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        user_analytics = await self.get_learning_analytics(period)
        learning_analytics = await self.get_learning_analytics(period)
        safety_analytics = await self.get_safety_analytics(period)
        user_segments = await self.get_user_segments()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = {
            "period": period.value,
            "generated_at": datetime.utcnow().isoformat(),
            "learning": learning_analytics.__dict__,
            "safety": safety_analytics.__dict__,
            "user_segments": {k.value: v for k, v in user_segments.items()},
            "key_insights": self._generate_key_insights(
                user_analytics, learning_analytics, safety_analytics
            ),
            "recommendations": self._generate_system_recommendations(
                user_analytics, learning_analytics, safety_analytics
            ),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await cache_service.set(cache_key, report, self.cache_ttl)

        return report

    def _calculate_period_start(self, end_date: datetime, period: AnalyticsPeriod) -> datetime:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞"""
        if period == AnalyticsPeriod.DAY:
            return end_date - timedelta(days=1)
        elif period == AnalyticsPeriod.WEEK:
            return end_date - timedelta(weeks=1)
        elif period == AnalyticsPeriod.MONTH:
            return end_date - timedelta(days=30)
        elif period == AnalyticsPeriod.QUARTER:
            return end_date - timedelta(days=90)
        elif period == AnalyticsPeriod.YEAR:
            return end_date - timedelta(days=365)
        else:
            return end_date - timedelta(days=30)

    async def _get_user_data(
        self, user_id: int, start_date: datetime, end_date: datetime
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        # –ó–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î

        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        return {
            "total_messages": 150,
            "ai_interactions": 120,
            "voice_messages": 15,
            "blocked_messages": 3,
            "learning_sessions": 25,
            "subjects_covered": ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–∏—Å—Ç–æ—Ä–∏—è"],
            "average_session_duration": 15.5,
            "last_activity": datetime.utcnow(),
            "learning_progress": {
                "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"level": 5, "points": 1200},
                "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": {"level": 4, "points": 980},
                "–∏—Å—Ç–æ—Ä–∏—è": {"level": 3, "points": 750},
            },
        }

    async def _get_learning_data(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ë–î"""
        # –ó–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        return {
            "total_sessions": 1500,
            "active_users": 120,
            "popular_subjects": [("–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 450), ("—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", 380), ("–∏—Å—Ç–æ—Ä–∏—è", 290)],
            "average_session_duration": 18.2,
            "completion_rate": 0.85,
            "difficulty_distribution": {"–ª–µ–≥–∫–∏–π": 40, "—Å—Ä–µ–¥–Ω–∏–π": 35, "—Å–ª–æ–∂–Ω—ã–π": 25},
            "progress_trends": {"–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 0.12, "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": 0.08, "–∏—Å—Ç–æ—Ä–∏—è": 0.15},
            "achievement_stats": {"–æ—Ç–ª–∏—á–Ω–∏–∫": 25, "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": 18, "–ª–∏–¥–µ—Ä": 12},
        }

    async def _get_safety_data(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î"""
        # –ó–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return {
            "total_blocks": 45,
            "block_categories": {"–Ω–∞—Å–∏–ª–∏–µ": 15, "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏": 8, "–ø–æ–ª–∏—Ç–∏–∫–∞": 12, "—Å–ø–∞–º": 10},
            "risk_users": [123456789, 987654321],
            "moderation_effectiveness": 0.92,
            "false_positive_rate": 0.03,
            "escalation_incidents": 2,
            "safety_trends": {"–Ω–∞—Å–∏–ª–∏–µ": -0.05, "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏": 0.02, "–ø–æ–ª–∏—Ç–∏–∫–∞": -0.01},
        }

    def _calculate_engagement_score(self, user_data: Dict[str, Any]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–µ–∫—Å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        messages_score = min(user_data["total_messages"] / 100, 1.0)
        sessions_score = min(user_data["learning_sessions"] / 20, 1.0)
        subjects_score = min(len(user_data["subjects_covered"]) / 5, 1.0)

        return (messages_score + sessions_score + subjects_score) / 3.0

    def _calculate_safety_score(self, user_data: Dict[str, Any]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–µ–∫—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        total_messages = user_data["total_messages"]
        blocked_messages = user_data["blocked_messages"]

        if total_messages == 0:
            return 1.0

        safety_ratio = 1.0 - (blocked_messages / total_messages)
        return max(0.0, safety_ratio)

    def _build_activity_summary(self, analytics: UserAnalytics) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        return {
            "total_interactions": analytics.total_messages,
            "ai_usage": analytics.ai_interactions,
            "voice_usage": analytics.voice_messages,
            "engagement_level": (
                "high"
                if analytics.engagement_score > 0.7
                else "medium" if analytics.engagement_score > 0.4 else "low"
            ),
            "activity_trend": "increasing" if analytics.engagement_score > 0.6 else "stable",
        }

    def _build_learning_summary(self, analytics: UserAnalytics) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        return {
            "sessions_count": analytics.learning_sessions,
            "subjects_covered": len(analytics.subjects_covered),
            "average_duration": analytics.average_session_duration,
            "learning_progress": analytics.learning_progress,
            "top_subject": (
                max(analytics.learning_progress.items(), key=lambda x: x[1]["points"])[0]
                if analytics.learning_progress
                else None
            ),
        }

    def _build_safety_summary(self, analytics: UserAnalytics) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "blocked_messages": analytics.blocked_messages,
            "safety_score": analytics.safety_score,
            "safety_level": (
                "excellent"
                if analytics.safety_score > 0.9
                else "good" if analytics.safety_score > 0.7 else "needs_attention"
            ),
            "risk_level": (
                "low"
                if analytics.safety_score > 0.8
                else "medium" if analytics.safety_score > 0.6 else "high"
            ),
        }

    def _generate_recommendations(self, analytics: UserAnalytics) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
        recommendations = []

        if analytics.engagement_score < 0.4:
            recommendations.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–æ—â—Ä–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞")

        if analytics.safety_score < 0.7:
            recommendations.append("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞")

        if len(analytics.subjects_covered) < 2:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä—É–≥ –∏–∑—É—á–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

        if analytics.average_session_duration < 10:
            recommendations.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—á–µ–±–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

        if not recommendations:
            recommendations.append("–†–µ–±–µ–Ω–æ–∫ –æ—Ç–ª–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")

        return recommendations

    def _build_charts_data(
        self, user_id: int, start_date: datetime, end_date: datetime
    ) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        return {
            "activity_timeline": {
                "labels": ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
                "data": [12, 19, 15, 22, 18, 25, 20],
            },
            "subject_distribution": {
                "labels": ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"],
                "data": [35, 30, 20, 15],
            },
            "safety_trend": {
                "labels": ["–ù–µ–¥–µ–ª—è 1", "–ù–µ–¥–µ–ª—è 2", "–ù–µ–¥–µ–ª—è 3", "–ù–µ–¥–µ–ª—è 4"],
                "data": [95, 97, 94, 96],
            },
        }

    async def _get_new_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        return [123456789, 987654321]

    async def _get_active_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        return [111111111, 222222222, 333333333]

    async def _get_engaged_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        return [444444444, 555555555]

    async def _get_at_risk_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞"""
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∑–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return [666666666]

    async def _get_power_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å power –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return [777777777, 888888888]

    async def _calculate_trend(
        self, metric: str, start_date: datetime, end_date: datetime
    ) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–Ω–¥ –º–µ—Ç—Ä–∏–∫–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤
        return {
            "metric": metric,
            "trend": "increasing",
            "change_percentage": 12.5,
            "confidence": 0.85,
            "data_points": 30,
        }

    def _generate_key_insights(
        self,
        user_analytics: UserAnalytics,
        learning_analytics: LearningAnalytics,
        safety_analytics: SafetyAnalytics,
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        insights = []

        if learning_analytics.completion_rate > 0.8:
            insights.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

        if safety_analytics.moderation_effectiveness > 0.9:
            insights.append("–û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

        if learning_analytics.average_session_duration > 20:
            insights.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–≤–æ–¥—è—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏")

        return insights

    def _generate_system_recommendations(
        self,
        user_analytics: UserAnalytics,
        learning_analytics: LearningAnalytics,
        safety_analytics: SafetyAnalytics,
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
        recommendations = []

        if learning_analytics.completion_rate < 0.7:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–µ—Å—Å–∏–π")

        if safety_analytics.false_positive_rate > 0.05:
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π")

        return recommendations

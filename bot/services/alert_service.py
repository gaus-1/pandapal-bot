"""
–°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è PandaPal
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π

"""

import asyncio
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple

from loguru import logger
from sqlalchemy import and_, func, or_
from sqlalchemy.orm import Session

from bot.models import AnalyticsAlert, ParentalSettings, User
from bot.services.cache_service import cache_service


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤"""

    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"


class AlertType(Enum):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤"""

    SAFETY_VIOLATION = "safety_violation"
    HIGH_BLOCKED_RATIO = "high_blocked_ratio"
    LOW_ENGAGEMENT = "low_engagement"
    LONG_INACTIVITY = "long_inactivity"
    SUSPICIOUS_ACTIVITY = "suspicious_activity"
    LEARNING_PROGRESS = "learning_progress"
    SYSTEM_ERROR = "system_error"
    PARENTAL_CONTROL = "parental_control"


@dataclass
class AlertRule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""

    alert_type: AlertType
    alert_level: AlertLevel
    threshold: float
    condition: str
    message_template: str
    cooldown_minutes: int = 60


class AlertService:
    """
    –°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    """

    def __init__(self, db_session: Session):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.db = db_session
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_rules = self._initialize_alert_rules()

        logger.info("üö® –°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _initialize_alert_rules(self) -> Dict[AlertType, AlertRule]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        return {
            AlertType.SAFETY_VIOLATION: AlertRule(
                alert_type=AlertType.SAFETY_VIOLATION,
                alert_level=AlertLevel.CRITICAL,
                threshold=1.0,  # –õ—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                condition="blocked_messages > 0",
                message_template="üö® –ö–†–ò–¢–ò–ß–ù–û: –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}",
            ),
            AlertType.HIGH_BLOCKED_RATIO: AlertRule(
                alert_type=AlertType.HIGH_BLOCKED_RATIO,
                alert_level=AlertLevel.WARNING,
                threshold=0.2,  # 20% –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                condition="blocked_ratio > 0.2",
                message_template="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ({ratio:.1%}) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
            ),
            AlertType.LOW_ENGAGEMENT: AlertRule(
                alert_type=AlertType.LOW_ENGAGEMENT,
                alert_level=AlertLevel.INFO,
                threshold=0.3,  # –ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
                condition="engagement_score < 0.3",
                message_template="üìä –ò–ù–§–û: –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ PandaPal. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–æ—â—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞",
            ),
            AlertType.LONG_INACTIVITY: AlertRule(
                alert_type=AlertType.LONG_INACTIVITY,
                alert_level=AlertLevel.WARNING,
                threshold=72.0,  # 72 —á–∞—Å–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                condition="inactivity_hours > 72",
                message_template="‚è∞ –í–ù–ò–ú–ê–ù–ò–ï: –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª PandaPal –±–æ–ª–µ–µ {hours} —á–∞—Å–æ–≤",
            ),
            AlertType.SUSPICIOUS_ACTIVITY: AlertRule(
                alert_type=AlertType.SUSPICIOUS_ACTIVITY,
                alert_level=AlertLevel.CRITICAL,
                threshold=10.0,  # –ë–æ–ª–µ–µ 10 –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                condition="suspicious_actions > 10",
                message_template="üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞: {details}",
            ),
            AlertType.LEARNING_PROGRESS: AlertRule(
                alert_type=AlertType.LEARNING_PROGRESS,
                alert_level=AlertLevel.INFO,
                threshold=0.8,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                condition="progress_score > 0.8",
                message_template="üéâ –û–¢–õ–ò–ß–ù–û: –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—É—á–µ–Ω–∏–∏! –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}",
            ),
            AlertType.SYSTEM_ERROR: AlertRule(
                alert_type=AlertType.SYSTEM_ERROR,
                alert_level=AlertLevel.WARNING,
                threshold=5.0,  # –ë–æ–ª–µ–µ 5 –æ—à–∏–±–æ–∫
                condition="error_count > 5",
                message_template="‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ PandaPal. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º",
            ),
            AlertType.PARENTAL_CONTROL: AlertRule(
                alert_type=AlertType.PARENTAL_CONTROL,
                alert_level=AlertLevel.INFO,
                threshold=1.0,  # –õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                condition="settings_changed",
                message_template="‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò: –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            ),
        }

    async def check_user_alerts(self, user_id: int) -> List[AnalyticsAlert]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            List[AnalyticsAlert]: –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        """
        cache_key = cache_service.generate_key("user_alerts", user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_alerts = await cache_service.get(cache_key)
        if cached_alerts:
            return cached_alerts

        new_alerts = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                return new_alerts

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
            for alert_type, rule in self.alert_rules.items():
                alert = await self._check_alert_rule(user, rule)
                if alert:
                    new_alerts.append(alert)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await cache_service.set(cache_key, new_alerts, self.cache_ttl)

            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(new_alerts)} –Ω–æ–≤—ã—Ö")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        return new_alerts

    async def check_all_alerts(self) -> Dict[int, List[AnalyticsAlert]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            Dict[int, List[AnalyticsAlert]]: –°–ª–æ–≤–∞—Ä—å —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        all_alerts = {}

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = self.db.query(User).filter_by(is_active=True).all()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user in active_users:
                user_alerts = await self.check_user_alerts(user.telegram_id)
                if user_alerts:
                    all_alerts[user.telegram_id] = user_alerts

            logger.info(
                f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sum(len(alerts) for alerts in all_alerts.values())} –Ω–æ–≤—ã—Ö"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")

        return all_alerts

    async def _check_alert_rule(self, user: User, rule: AlertRule) -> Optional[AnalyticsAlert]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            rule: –ü—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞

        Returns:
            Optional[AnalyticsAlert]: –ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if await self._is_alert_in_cooldown(user.telegram_id, rule.alert_type):
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞
            should_alert, alert_data = await self._evaluate_condition(user, rule)

            if not should_alert:
                return None

            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
            alert = await self._create_alert(user, rule, alert_data)

            if alert:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                self.db.add(alert)
                self.db.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º cooldown
                await self._update_alert_cooldown(user.telegram_id, rule.alert_type)

                logger.info(
                    f"üö® –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç {rule.alert_type.value} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}"
                )

            return alert

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ {rule.alert_type.value}: {e}")
            return None

    async def _evaluate_condition(self, user: User, rule: AlertRule) -> Tuple[bool, Dict[str, Any]]:
        """
        –û—Ü–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            rule: –ü—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞

        Returns:
            Tuple[bool, Dict[str, Any]]: (–¥–æ–ª–∂–µ–Ω –ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–µ—Ä—Ç, –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞)
        """
        now = datetime.utcnow()
        alert_data = {}

        if rule.alert_type == AlertType.SAFETY_VIOLATION:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            start_time = now - timedelta(hours=24)
            blocked_count = (
                self.db.query(func.count())
                .select_from(
                    self.db.query().filter(
                        and_(
                            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                        )
                    )
                )
                .scalar()
                or 0
            )

            should_alert = blocked_count > 0
            alert_data = {"blocked_count": blocked_count}

        elif rule.alert_type == AlertType.HIGH_BLOCKED_RATIO:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            start_time = now - timedelta(hours=24)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            total_messages = 100  # –ó–∞–≥–ª—É—à–∫–∞
            blocked_messages = 25  # –ó–∞–≥–ª—É—à–∫–∞

            blocked_ratio = blocked_messages / total_messages if total_messages > 0 else 0
            should_alert = blocked_ratio > rule.threshold
            alert_data = {"blocked_ratio": blocked_ratio, "total_messages": total_messages}

        elif rule.alert_type == AlertType.LOW_ENGAGEMENT:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            engagement_score = 0.25  # –ó–∞–≥–ª—É—à–∫–∞ - –¥–æ–ª–∂–Ω–æ –±—Ä–∞—Ç—å—Å—è –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            should_alert = engagement_score < rule.threshold
            alert_data = {"engagement_score": engagement_score}

        elif rule.alert_type == AlertType.LONG_INACTIVITY:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            last_activity = user.last_activity or user.created_at
            inactivity_hours = (now - last_activity).total_seconds() / 3600
            should_alert = inactivity_hours > rule.threshold
            alert_data = {"inactivity_hours": inactivity_hours}

        elif rule.alert_type == AlertType.SUSPICIOUS_ACTIVITY:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            suspicious_actions = 0  # –ó–∞–≥–ª—É—à–∫–∞
            should_alert = suspicious_actions > rule.threshold
            alert_data = {"suspicious_actions": suspicious_actions}

        elif rule.alert_type == AlertType.LEARNING_PROGRESS:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            progress_score = 0.85  # –ó–∞–≥–ª—É—à–∫–∞
            should_alert = progress_score > rule.threshold
            alert_data = {"progress_score": progress_score}

        elif rule.alert_type == AlertType.SYSTEM_ERROR:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
            error_count = 0  # –ó–∞–≥–ª—É—à–∫–∞
            should_alert = error_count > rule.threshold
            alert_data = {"error_count": error_count}

        elif rule.alert_type == AlertType.PARENTAL_CONTROL:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            settings_changed = False  # –ó–∞–≥–ª—É—à–∫–∞
            should_alert = settings_changed
            alert_data = {"settings_changed": settings_changed}

        else:
            should_alert = False
            alert_data = {}

        return should_alert, alert_data

    async def _create_alert(
        self, user: User, rule: AlertRule, alert_data: Dict[str, Any]
    ) -> Optional[AnalyticsAlert]:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            rule: –ü—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞
            alert_data: –î–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞

        Returns:
            Optional[AnalyticsAlert]: –ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = rule.message_template.format(**alert_data)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            parent_id = None
            child_id = None

            if user.user_type == "child":
                child_id = user.telegram_id
                parent_id = user.parent_telegram_id
            elif user.user_type == "parent":
                parent_id = user.telegram_id

            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
            alert = AnalyticsAlert(
                alert_type=rule.alert_type.value,
                alert_level=rule.alert_level.value,
                alert_message=message,
                alert_data=alert_data,
                parent_telegram_id=parent_id,
                child_telegram_id=child_id,
                is_sent=False,
            )

            return alert

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            return None

    async def send_alert_notification(self, alert: AnalyticsAlert) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–ª–µ—Ä—Ç–µ

        Args:
            alert: –ê–ª–µ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            if not alert.parent_telegram_id:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ {alert.id}")
                return False

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

            logger.info(
                f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—é {alert.parent_telegram_id}: {alert.alert_message}"
            )

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            alert.is_sent = True
            self.db.commit()

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ {alert.id}: {e}")
            return False

    async def resolve_alert(self, alert_id: int, resolved_by: str) -> bool:
        """
        –†–∞–∑—Ä–µ—à–∏—Ç—å –∞–ª–µ—Ä—Ç

        Args:
            alert_id: ID –∞–ª–µ—Ä—Ç–∞
            resolved_by: –ö—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª –∞–ª–µ—Ä—Ç

        Returns:
            bool: True –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω
        """
        try:
            alert = self.db.query(AnalyticsAlert).filter_by(id=alert_id).first()
            if not alert:
                return False

            alert.resolved_at = datetime.utcnow()
            alert.resolved_by = resolved_by
            self.db.commit()

            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç {alert_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {resolved_by}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ {alert_id}: {e}")
            return False

    async def get_active_alerts(self, parent_id: Optional[int] = None) -> List[AnalyticsAlert]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã

        Args:
            parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            List[AnalyticsAlert]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        """
        try:
            query = self.db.query(AnalyticsAlert).filter(AnalyticsAlert.resolved_at.is_(None))

            if parent_id:
                query = query.filter_by(parent_telegram_id=parent_id)

            alerts = query.order_by(AnalyticsAlert.triggered_at.desc()).all()
            return alerts

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []

    async def get_alert_statistics(self, days: int = 30) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        """
        try:
            start_date = datetime.utcnow() - timedelta(days=days)

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_alerts = (
                self.db.query(func.count(AnalyticsAlert.id))
                .filter(AnalyticsAlert.triggered_at >= start_date)
                .scalar()
            )

            resolved_alerts = (
                self.db.query(func.count(AnalyticsAlert.id))
                .filter(
                    and_(
                        AnalyticsAlert.triggered_at >= start_date,
                        AnalyticsAlert.resolved_at.isnot(None),
                    )
                )
                .scalar()
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            alerts_by_type = (
                self.db.query(AnalyticsAlert.alert_type, func.count(AnalyticsAlert.id))
                .filter(AnalyticsAlert.triggered_at >= start_date)
                .group_by(AnalyticsAlert.alert_type)
                .all()
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
            alerts_by_level = (
                self.db.query(AnalyticsAlert.alert_level, func.count(AnalyticsAlert.id))
                .filter(AnalyticsAlert.triggered_at >= start_date)
                .group_by(AnalyticsAlert.alert_level)
                .all()
            )

            return {
                "total_alerts": total_alerts,
                "resolved_alerts": resolved_alerts,
                "unresolved_alerts": total_alerts - resolved_alerts,
                "resolution_rate": (
                    (resolved_alerts / total_alerts * 100) if total_alerts > 0 else 0
                ),
                "alerts_by_type": dict(alerts_by_type),
                "alerts_by_level": dict(alerts_by_level),
                "period_days": days,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return {}

    async def _is_alert_in_cooldown(self, user_id: int, alert_type: AlertType) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–ª–µ—Ä—Ç –≤ cooldown

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ –≤ cooldown
        """
        try:
            rule = self.alert_rules.get(alert_type)
            if not rule:
                return False

            cooldown_time = datetime.utcnow() - timedelta(minutes=rule.cooldown_minutes)

            recent_alert = (
                self.db.query(AnalyticsAlert)
                .filter(
                    and_(
                        or_(
                            AnalyticsAlert.parent_telegram_id == user_id,
                            AnalyticsAlert.child_telegram_id == user_id,
                        ),
                        AnalyticsAlert.alert_type == alert_type.value,
                        AnalyticsAlert.triggered_at >= cooldown_time,
                    )
                )
                .first()
            )

            return recent_alert is not None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cooldown: {e}")
            return False

    async def _update_alert_cooldown(self, user_id: int, alert_type: AlertType):
        """
        –û–±–Ω–æ–≤–∏—Ç—å cooldown –¥–ª—è –∞–ª–µ—Ä—Ç–∞

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞
        """
        try:
            # Cooldown –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cooldown: {e}")

    async def cleanup_old_alerts(self, days: int = 90):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            cutoff_date = datetime.utcnow() - timedelta(days=days)

            deleted_count = (
                self.db.query(AnalyticsAlert)
                .filter(
                    and_(
                        AnalyticsAlert.triggered_at < cutoff_date,
                        AnalyticsAlert.resolved_at.isnot(None),
                    )
                )
                .delete()
            )

            self.db.commit()

            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")

"""
ü§ñ –°–ò–°–¢–ï–ú–ê 24/7 –†–ê–ë–û–¢–´ TELEGRAM –ë–û–¢–ê
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ webhook, fallback –Ω–∞ polling, –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Callable
from dataclasses import dataclass, field
from enum import Enum
import json
import traceback

from loguru import logger
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError, TelegramRetryAfter
from aiogram.types import Update, Message, CallbackQuery, InlineQuery
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web, ClientSession
import aiohttp
from sqlalchemy.exc import OperationalError


class BotMode(Enum):
    """–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    WEBHOOK = "webhook"
    POLLING = "polling"
    HYBRID = "hybrid"  # Webhook + fallback –Ω–∞ polling


@dataclass
class QueuedMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    update_id: int
    update_data: Dict[str, Any]
    timestamp: datetime
    retry_count: int = 0
    max_retries: int = 3
    priority: int = 1  # 1 = –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 5 = –Ω–∏–∑—à–∏–π


@dataclass
class BotHealth:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    mode: BotMode
    is_running: bool
    last_activity: datetime
    messages_processed: int = 0
    errors_count: int = 0
    webhook_url: Optional[str] = None
    polling_active: bool = False
    queue_size: int = 0


class Bot24_7Service:
    """ü§ñ –°–µ—Ä–≤–∏—Å 24/7 —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot: Bot, dispatcher: Dispatcher):
        self.bot = bot
        self.dispatcher = dispatcher
        self.current_mode = BotMode.WEBHOOK
        self.health = BotHealth(
            mode=self.current_mode,
            is_running=False,
            last_activity=datetime.now()
        )
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.processed_updates: set = set()
        
        # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_queue: List[QueuedMessage] = []
        self.queue_processor_task: Optional[asyncio.Task] = None
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.health_monitor_task: Optional[asyncio.Task] = None
        self.webhook_monitor_task: Optional[asyncio.Task] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.webhook_url = None
        self.polling_fallback_enabled = True
        self.queue_processing_enabled = True
        self.max_queue_size = 1000
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "messages_processed": 0,
            "errors_recovered": 0,
            "mode_switches": 0,
            "queue_overflows": 0,
            "uptime_start": datetime.now()
        }
    
    async def start_24_7_mode(self, webhook_url: Optional[str] = None):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ 24/7 —Ä–∞–±–æ—Ç—ã"""
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ 24/7 —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        
        self.webhook_url = webhook_url
        self.health.is_running = True
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            if webhook_url and await self._test_webhook_setup():
                self.current_mode = BotMode.WEBHOOK
                await self._setup_webhook()
            elif self.polling_fallback_enabled:
                self.current_mode = BotMode.POLLING
                await self._start_polling()
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ webhook, –Ω–∏ polling")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            await self._start_background_tasks()
            
            self.health.mode = self.current_mode
            logger.success(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ {self.current_mode.value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await self._emergency_fallback()
    
    async def _test_webhook_setup(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
        try:
            if not self.webhook_url:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook URL
            async with ClientSession() as session:
                async with session.get(self.webhook_url, timeout=10) as response:
                    return response.status == 200
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def _setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            logger.info("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            await self.bot.delete_webhook()
            await asyncio.sleep(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            await self.bot.set_webhook(
                url=self.webhook_url,
                allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
            webhook_info = await self.bot.get_webhook_info()
            if webhook_info.url == self.webhook_url:
                logger.success("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.health.webhook_url = self.webhook_url
            else:
                raise Exception("Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            raise
    
    async def _start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            
            # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling
            await self.bot.delete_webhook()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            polling_task = asyncio.create_task(self._polling_loop())
            self.health.polling_active = True
            
            logger.success("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
    
    async def _polling_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling"""
        while self.health.is_running and self.current_mode == BotMode.POLLING:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates = await self.bot.get_updates(
                    offset=-1,
                    limit=10,
                    timeout=30,
                    allowed_updates=["message", "callback_query", "inline_query"]
                )
                
                if updates:
                    for update in updates:
                        await self._process_update(update)
                        self.health.last_activity = datetime.now()
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except TelegramRetryAfter as e:
                logger.warning(f"‚ö†Ô∏è Rate limit, –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                
            except (TelegramAPIError, TelegramNetworkError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                await self._handle_polling_error(e)
                
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
                await asyncio.sleep(5)
    
    async def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
        self.health_monitor_task = asyncio.create_task(self._health_monitor_loop())
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        if self.current_mode == BotMode.WEBHOOK:
            self.webhook_monitor_task = asyncio.create_task(self._webhook_monitor_loop())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.queue_processing_enabled:
            self.queue_processor_task = asyncio.create_task(self._queue_processor_loop())
        
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    
    async def _health_monitor_loop(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        while self.health.is_running:
            try:
                await self._check_bot_health()
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(10)
    
    async def _webhook_monitor_loop(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ webhook"""
        while self.health.is_running and self.current_mode == BotMode.WEBHOOK:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
                webhook_info = await self.bot.get_webhook_info()
                
                if not webhook_info.url or webhook_info.url != self.webhook_url:
                    logger.warning("‚ö†Ô∏è Webhook –ø–æ—Ç–µ—Ä—è–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
                    await self._setup_webhook()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if self.health.last_activity < datetime.now() - timedelta(minutes=5):
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 5 –º–∏–Ω—É—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                    await self._test_bot_connection()
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ webhook: {e}")
                await self._switch_to_polling()
                break
    
    async def _queue_processor_loop(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.health.is_running:
            try:
                if self.message_queue:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    self.message_queue.sort(key=lambda x: (x.priority, x.timestamp))
                    
                    message = self.message_queue.pop(0)
                    await self._process_queued_message(message)
                
                await asyncio.sleep(0.1)  # –ß–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
                await asyncio.sleep(1)
    
    async def _check_bot_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            me = await self.bot.get_me()
            if not me:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.health.messages_processed = self.stats["messages_processed"]
            self.health.errors_count = self.stats["errors_recovered"]
            self.health.queue_size = len(self.message_queue)
            
            logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞: —Å–æ–æ–±—â–µ–Ω–∏–π={self.stats['messages_processed']}, –æ—à–∏–±–æ–∫={self.stats['errors_recovered']}, –æ—á–µ—Ä–µ–¥—å={len(self.message_queue)}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞: {e}")
            await self._handle_health_issues()
    
    async def _process_update(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if update.update_id in self.processed_updates:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id}")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            self.processed_updates.add(update.update_id)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
            if len(self.processed_updates) > 1000:
                self.processed_updates = set(list(self.processed_updates)[-500:])
            
            # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
            if len(self.message_queue) >= self.max_queue_size:
                if self._is_critical_message(update):
                    await self._process_critical_message(update)
                else:
                    self.stats["queue_overflows"] += 1
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–±—Ä–æ—à–µ–Ω–æ")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            queued_msg = QueuedMessage(
                update_id=update.update_id,
                update_data=update.model_dump(),
                timestamp=datetime.now(),
                priority=self._get_message_priority(update)
            )
            
            self.message_queue.append(queued_msg)
            self.stats["messages_processed"] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.stats["errors_recovered"] += 1
    
    async def _process_queued_message(self, message: QueuedMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            update = Update.model_validate(message.update_data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ dispatcher
            await self.dispatcher.feed_update(self.bot, update)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            if message.retry_count < message.max_retries:
                message.retry_count += 1
                message.timestamp = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.message_queue.append(message)
            else:
                logger.error(f"üíÄ –°–æ–æ–±—â–µ–Ω–∏–µ {message.update_id} –æ—Ç–±—Ä–æ—à–µ–Ω–æ –ø–æ—Å–ª–µ {message.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    def _is_critical_message(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if update.message:
            text = update.message.text or ""
            # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            critical_commands = ["/start", "/help", "/emergency"]
            return any(cmd in text.lower() for cmd in critical_commands)
        return False
    
    def _get_message_priority(self, update: Update) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self._is_critical_message(update):
            return 1  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        if update.message:
            return 2  # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        if update.callback_query:
            return 3  # Callback –∑–∞–ø—Ä–æ—Å—ã
        
        return 4  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    async def _process_critical_message(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            await self.dispatcher.feed_update(self.bot, update)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_polling_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ polling"""
        if isinstance(error, TelegramNetworkError):
            logger.warning("‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ webhook")
            await self._switch_to_webhook()
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {error}")
            await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    async def _switch_to_polling(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling"""
        if self.current_mode == BotMode.POLLING:
            return
        
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling...")
        
        try:
            await self.bot.delete_webhook()
            self.current_mode = BotMode.POLLING
            self.health.mode = self.current_mode
            self.stats["mode_switches"] += 1
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling
            await self._start_polling()
            
            logger.success("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ polling: {e}")
    
    async def _switch_to_webhook(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ webhook"""
        if not self.webhook_url or self.current_mode == BotMode.WEBHOOK:
            return
        
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ webhook...")
        
        try:
            if await self._test_webhook_setup():
                await self._setup_webhook()
                self.current_mode = BotMode.WEBHOOK
                self.health.mode = self.current_mode
                self.stats["mode_switches"] += 1
                
                logger.success("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ webhook –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ polling")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ webhook: {e}")
    
    async def _test_bot_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
        try:
            me = await self.bot.get_me()
            logger.debug(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º OK: @{me.username}")
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–æ—Ç–∞: {e}")
            await self._handle_connection_issues()
    
    async def _handle_health_issues(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º"""
        logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if self.current_mode == BotMode.WEBHOOK:
            await self._switch_to_polling()
        else:
            await self._switch_to_webhook()
    
    async def _handle_connection_issues(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º")
        await self._emergency_fallback()
    
    async def _emergency_fallback(self):
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π fallback —Ä–µ–∂–∏–º"""
        logger.critical("üö® –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ polling
            await self.bot.delete_webhook()
            await asyncio.sleep(5)
            
            self.current_mode = BotMode.POLLING
            self.health.mode = self.current_mode
            
            await self._start_polling()
            
            logger.success("‚úÖ –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.critical(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.health.is_running = False
    
    async def stop_24_7_mode(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ 24/7"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ 24/7")
        
        self.health.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            self.health_monitor_task,
            self.webhook_monitor_task,
            self.queue_processor_task
        ]
        
        for task in tasks:
            if task and not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
        # –û—á–∏—â–∞–µ–º webhook
        try:
            await self.bot.delete_webhook()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook: {e}")
        
        logger.success("‚úÖ –†–µ–∂–∏–º 24/7 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        uptime = datetime.now() - self.stats["uptime_start"]
        
        return {
            "mode": self.health.mode.value,
            "is_running": self.health.is_running,
            "last_activity": self.health.last_activity.isoformat(),
            "messages_processed": self.stats["messages_processed"],
            "errors_recovered": self.stats["errors_recovered"],
            "mode_switches": self.stats["mode_switches"],
            "queue_size": len(self.message_queue),
            "queue_overflows": self.stats["queue_overflows"],
            "uptime_seconds": int(uptime.total_seconds()),
            "webhook_url": self.health.webhook_url,
            "polling_active": self.health.polling_active,
            "timestamp": datetime.now().isoformat()
        }
    
    async def force_health_check(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            await self._check_bot_health()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ 24/7
bot_24_7_service: Optional[Bot24_7Service] = None

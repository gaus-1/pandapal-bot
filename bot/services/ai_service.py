"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini AI
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å –ò–ò, –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç, –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@module bot.services.ai_service
"""

import google.generativeai as genai
from typing import Optional, List, Dict
from loguru import logger

from bot.config import settings, AI_SYSTEM_PROMPT
from bot.services.moderation_service import ContentModerationService


class GeminiAIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini AI
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
    - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤—Ö–æ–¥—è—â–µ–≥–æ –∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ)
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–∏–º–µ—Ä–æ–≤
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ –∏ –º–æ–¥–µ–ª–∏
        """
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
        genai.configure(api_key=settings.gemini_api_key)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_config = {
            'temperature': settings.ai_temperature,
            'top_p': 0.95,
            'top_k': 40,
            'max_output_tokens': settings.ai_max_tokens,
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Gemini (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        self.safety_settings = [
            {
                'category': 'HARM_CATEGORY_HARASSMENT',
                'threshold': 'BLOCK_MEDIUM_AND_ABOVE'  # –ë–ª–æ–∫–∏—Ä—É–µ–º harassment
            },
            {
                'category': 'HARM_CATEGORY_HATE_SPEECH',
                'threshold': 'BLOCK_MEDIUM_AND_ABOVE'  # –ë–ª–æ–∫–∏—Ä—É–µ–º hate speech
            },
            {
                'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                'threshold': 'BLOCK_MEDIUM_AND_ABOVE'  # –ë–ª–æ–∫–∏—Ä—É–µ–º 18+ –∫–æ–Ω—Ç–µ–Ω—Ç
            },
            {
                'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',
                'threshold': 'BLOCK_MEDIUM_AND_ABOVE'  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            },
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.model = genai.GenerativeModel(
            model_name=settings.gemini_model,
            generation_config=self.generation_config,
            safety_settings=self.safety_settings,
            system_instruction=AI_SYSTEM_PROMPT  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç PandaPalAI
        )
        
        # –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.moderation = ContentModerationService()
        
        logger.info(f"‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –º–æ–¥–µ–ª—å {settings.gemini_model}")
    
    async def generate_response(
        self,
        user_message: str,
        chat_history: List[Dict[str, str]] = None,
        user_age: Optional[int] = None,
        user_grade: Optional[int] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_history: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
            user_age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —è–∑—ã–∫–∞)
            user_grade: –ö–ª–∞—Å—Å (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
        
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç AI
        
        Raises:
            ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
        """
        try:
            # –®–ê–ì 1: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            is_safe, reason = self.moderation.is_safe_content(user_message)
            
            if not is_safe:
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {reason}")
                self.moderation.log_blocked_content(0, user_message, reason)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–∫–∞–∑
                return self.moderation.get_safe_response_alternative(reason)
            
            # –®–ê–ì 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑—Ä–∞—Å—Ç –∏ –∫–ª–∞—Å—Å)
            context_instruction = self._build_context_instruction(user_age, user_grade)
            
            # –®–ê–ì 3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_message = f"{context_instruction}\n\n–í–æ–ø—Ä–æ—Å —Ä–µ–±—ë–Ω–∫–∞: {user_message}"
            
            # –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            if chat_history:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                chat = self.model.start_chat(history=chat_history)
                response = chat.send_message(full_message)
            else:
                # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
                response = self.model.generate_content(full_message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            ai_response = response.text
            
            # –®–ê–ì 5: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            ai_response = self.moderation.sanitize_ai_response(ai_response)
            
            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª (–¥–ª–∏–Ω–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI: {e}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return (
                "–û–π, –∫–∞–∂–µ—Ç—Å—è —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã üîß "
                "–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å!"
            )
    
    def _build_context_instruction(
        self, 
        age: Optional[int], 
        grade: Optional[int]
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–∞
        –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
        
        Args:
            age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
            grade: –ö–ª–∞—Å—Å
        
        Returns:
            str: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AI
        """
        context_parts = []
        
        if age:
            if age <= 10:
                context_parts.append(
                    "–†–µ–±—ë–Ω–∫—É 6-10 –ª–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –û–ß–ï–ù–¨ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, "
                    "–∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏."
                )
            elif age <= 13:
                context_parts.append(
                    "–†–µ–±—ë–Ω–∫—É 11-13 –ª–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫, "
                    "–º–æ–∂–Ω–æ —á—É—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –æ–±—ä—è—Å–Ω—è–π –∏—Ö."
                )
            else:
                context_parts.append(
                    "–ü–æ–¥—Ä–æ—Å—Ç–∫—É 14-18 –ª–µ—Ç. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ "
                    "–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."
                )
        
        if grade:
            context_parts.append(
                f"–£—á–µ–Ω–∏–∫ {grade} –∫–ª–∞—Å—Å–∞. –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É {grade} –∫–ª–∞—Å—Å–∞."
            )
        
        if context_parts:
            return "–ö–û–ù–¢–ï–ö–°–¢: " + " ".join(context_parts)
        
        return ""
    
    async def explain_topic(
        self,
        topic: str,
        subject: str,
        grade: Optional[int] = None
    ) -> str:
        """
        –û–±—ä—è—Å–Ω–∏—Ç—å —É—á–µ–±–Ω—É—é —Ç–µ–º—É
        
        Args:
            topic: –¢–µ–º–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            subject: –ü—Ä–µ–¥–º–µ—Ç (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞ –∏ —Ç.–¥.)
            grade: –ö–ª–∞—Å—Å (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
        
        Returns:
            str: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        """
        prompt = f"""
–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É "{topic}" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}" –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {grade or 5} –∫–ª–∞—Å—Å–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
2. –° –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏
3. –ü–æ—à–∞–≥–æ–≤–æ, –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
4. –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è (2-3 —à—Ç—É–∫–∏)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìö –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ
üîç –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
üí° –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏
‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
"""
        return await self.generate_response(prompt, user_grade=grade)
    
    async def solve_problem(
        self,
        problem_text: str,
        subject: str,
        show_steps: bool = True
    ) -> str:
        """
        –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É —Å –ø–æ—à–∞–≥–æ–≤—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        
        Args:
            problem_text: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            subject: –ü—Ä–µ–¥–º–µ—Ç
            show_steps: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è
        
        Returns:
            str: –†–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        """
        prompt = f"""
–†–µ—à–∏ –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}":

{problem_text}

{'–ü–æ–∫–∞–∂–∏ –ü–û–î–†–û–ë–ù–û–ï –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.' if show_steps else '–ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.'}

–§–æ—Ä–º–∞—Ç:
üìù –£—Å–ª–æ–≤–∏–µ (–∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ —á—Ç–æ –¥–∞–Ω–æ)
üî¢ –†–µ—à–µ–Ω–∏–µ (–ø–æ—à–∞–≥–æ–≤–æ)
‚úÖ –û—Ç–≤–µ—Ç
üí° –ü–æ—á–µ–º—É —Ç–∞–∫ (–æ–±—ä—è—Å–Ω–∏ –ª–æ–≥–∏–∫—É)
"""
        return await self.generate_response(prompt)
    
    async def check_answer(
        self,
        problem: str,
        user_answer: str,
        correct_answer: Optional[str] = None
    ) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –∏ –¥–∞—Ç—å —Ñ–∏–¥–±–µ–∫
        
        Args:
            problem: –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏
            user_answer: –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
            correct_answer: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
        
        Returns:
            str: –§–∏–¥–±–µ–∫ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        """
        prompt = f"""
–ó–∞–¥–∞—á–∞: {problem}

–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {user_answer}
{f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}' if correct_answer else ''}

–ü—Ä–æ–≤–µ—Ä—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç?
2. –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –ø–æ—Ö–≤–∞–ª–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É
3. –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –æ–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫—É –ú–Ø–ì–ö–û –∏ –ø–æ–¥—Å–∫–∞–∂–∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
4. –î–∞–π —Å–æ–≤–µ—Ç –∫–∞–∫ —Ä–µ—à–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏

–ë—É–¥—å –¥–æ–±—Ä—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º! üêº
"""
        return await self.generate_response(prompt)
    
    def get_model_info(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        –ù–ï –†–ê–°–ö–†–´–í–ê–¢–¨ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        """
        return {
            'model': settings.gemini_model,
            'temperature': str(settings.ai_temperature),
            'max_tokens': str(settings.ai_max_tokens),
            'public_name': 'PandaPalAI',  # –¢–æ, —á—Ç–æ –≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        }


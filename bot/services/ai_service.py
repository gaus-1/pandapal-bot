"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini AI
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å –ò–ò, –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç, –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini Vision API
@module bot.services.ai_service
"""

import base64
import hashlib
import io
from typing import Dict, List, Optional, Union

import google.generativeai as genai
from loguru import logger
from PIL import Image

from bot.config import AI_SYSTEM_PROMPT, settings
from bot.services.cache_service import AIResponseCache, UserCache, cache_service
from bot.services.moderation_service import ContentModerationService


class GeminiAIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini AI

    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
    - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤—Ö–æ–¥—è—â–µ–≥–æ –∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ)
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–∏–º–µ—Ä–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini Vision API
    - –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
    - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–π
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ –∏ –º–æ–¥–µ–ª–∏
        """
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
        genai.configure(api_key=settings.gemini_api_key)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_config = {
            "temperature": settings.ai_temperature,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": settings.ai_max_tokens,
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Gemini (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        self.safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",  # –ë–ª–æ–∫–∏—Ä—É–µ–º harassment
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",  # –ë–ª–æ–∫–∏—Ä—É–µ–º hate speech
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",  # –ë–ª–æ–∫–∏—Ä—É–µ–º 18+ –∫–æ–Ω—Ç–µ–Ω—Ç
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            },
        ]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.model = genai.GenerativeModel(
            model_name=settings.gemini_model,
            generation_config=self.generation_config,
            safety_settings=self.safety_settings,
            system_instruction=AI_SYSTEM_PROMPT,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç PandaPalAI
        )

        # –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.moderation = ContentModerationService()

        logger.info(f"‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –º–æ–¥–µ–ª—å {settings.gemini_model}")

    async def generate_response(
        self,
        user_message: str,
        chat_history: List[Dict[str, str]] = None,
        user_age: Optional[int] = None,
        user_grade: Optional[int] = None,
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞

        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_history: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
            user_age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —è–∑—ã–∫–∞)
            user_grade: –ö–ª–∞—Å—Å (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)

        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç AI

        Raises:
            ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ AI
            query_hash = hashlib.md5(f"{user_message}:{user_age}:{user_grade}".encode()).hexdigest()
            cached_response = await AIResponseCache.get_response(query_hash)

            if cached_response:
                logger.debug(f"üíæ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_message[:50]}...")
                return cached_response

            # –®–ê–ì 1: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            is_safe, reason = self.moderation.is_safe_content(user_message)

            if not is_safe:
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {reason}")
                self.moderation.log_blocked_content(0, user_message, reason)

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–∫–∞–∑
                return self.moderation.get_safe_response_alternative(reason)

            # –®–ê–ì 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑—Ä–∞—Å—Ç –∏ –∫–ª–∞—Å—Å)
            context_instruction = self._build_context_instruction(user_age, user_grade)

            # –®–ê–ì 3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_message = f"{context_instruction}\n\n–í–æ–ø—Ä–æ—Å —Ä–µ–±—ë–Ω–∫–∞: {user_message}"

            # –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            if chat_history:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                chat = self.model.start_chat(history=chat_history)
                response = chat.send_message(full_message)
            else:
                # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
                response = self.model.generate_content(full_message)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            ai_response = response.text

            # –®–ê–ì 5: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            ai_response = self.moderation.sanitize_ai_response(ai_response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫—ç—à
            await AIResponseCache.set_response(query_hash, ai_response, ttl=1800)  # 30 –º–∏–Ω—É—Ç

            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª (–¥–ª–∏–Ω–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤)")

            return ai_response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI: {e}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return (
                "–û–π, –∫–∞–∂–µ—Ç—Å—è —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã üîß "
                "–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å!"
            )

    def _build_context_instruction(self, age: Optional[int], grade: Optional[int]) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–∞
        –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞

        Args:
            age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
            grade: –ö–ª–∞—Å—Å

        Returns:
            str: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AI
        """
        context_parts = []

        if age:
            if age <= 10:
                context_parts.append(
                    "–†–µ–±—ë–Ω–∫—É 6-10 –ª–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –û–ß–ï–ù–¨ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, "
                    "–∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏."
                )
            elif age <= 13:
                context_parts.append(
                    "–†–µ–±—ë–Ω–∫—É 11-13 –ª–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫, "
                    "–º–æ–∂–Ω–æ —á—É—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –æ–±—ä—è—Å–Ω—è–π –∏—Ö."
                )
            else:
                context_parts.append(
                    "–ü–æ–¥—Ä–æ—Å—Ç–∫—É 14-18 –ª–µ—Ç. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ "
                    "–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."
                )

        if grade:
            context_parts.append(
                f"–£—á–µ–Ω–∏–∫ {grade} –∫–ª–∞—Å—Å–∞. –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É {grade} –∫–ª–∞—Å—Å–∞."
            )

        if context_parts:
            return "–ö–û–ù–¢–ï–ö–°–¢: " + " ".join(context_parts)

        return ""

    async def explain_topic(self, topic: str, subject: str, grade: Optional[int] = None) -> str:
        """
        –û–±—ä—è—Å–Ω–∏—Ç—å —É—á–µ–±–Ω—É—é —Ç–µ–º—É

        Args:
            topic: –¢–µ–º–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            subject: –ü—Ä–µ–¥–º–µ—Ç (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞ –∏ —Ç.–¥.)
            grade: –ö–ª–∞—Å—Å (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)

        Returns:
            str: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        """
        prompt = f"""
–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É "{topic}" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}" –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {grade or 5} –∫–ª–∞—Å—Å–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
2. –° –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏
3. –ü–æ—à–∞–≥–æ–≤–æ, –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
4. –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è (2-3 —à—Ç—É–∫–∏)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìö –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ
üîç –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
üí° –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏
‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
"""
        return await self.generate_response(prompt, user_grade=grade)

    async def solve_problem(self, problem_text: str, subject: str, show_steps: bool = True) -> str:
        """
        –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É —Å –ø–æ—à–∞–≥–æ–≤—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º

        Args:
            problem_text: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            subject: –ü—Ä–µ–¥–º–µ—Ç
            show_steps: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è

        Returns:
            str: –†–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        """
        prompt = f"""
–†–µ—à–∏ –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}":

{problem_text}

{'–ü–æ–∫–∞–∂–∏ –ü–û–î–†–û–ë–ù–û–ï –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.' if show_steps else '–ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.'}

–§–æ—Ä–º–∞—Ç:
üìù –£—Å–ª–æ–≤–∏–µ (–∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ —á—Ç–æ –¥–∞–Ω–æ)
üî¢ –†–µ—à–µ–Ω–∏–µ (–ø–æ—à–∞–≥–æ–≤–æ)
‚úÖ –û—Ç–≤–µ—Ç
üí° –ü–æ—á–µ–º—É —Ç–∞–∫ (–æ–±—ä—è—Å–Ω–∏ –ª–æ–≥–∏–∫—É)
"""
        return await self.generate_response(prompt)

    async def check_answer(
        self, problem: str, user_answer: str, correct_answer: Optional[str] = None
    ) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –∏ –¥–∞—Ç—å —Ñ–∏–¥–±–µ–∫

        Args:
            problem: –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏
            user_answer: –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
            correct_answer: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)

        Returns:
            str: –§–∏–¥–±–µ–∫ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        """
        prompt = f"""
–ó–∞–¥–∞—á–∞: {problem}

–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {user_answer}
{f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}' if correct_answer else ''}

–ü—Ä–æ–≤–µ—Ä—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç?
2. –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –ø–æ—Ö–≤–∞–ª–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É
3. –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –æ–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫—É –ú–Ø–ì–ö–û –∏ –ø–æ–¥—Å–∫–∞–∂–∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
4. –î–∞–π —Å–æ–≤–µ—Ç –∫–∞–∫ —Ä–µ—à–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏

–ë—É–¥—å –¥–æ–±—Ä—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º! üêº
"""
        return await self.generate_response(prompt)

    def get_model_info(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        –ù–ï –†–ê–°–ö–†–´–í–ê–¢–¨ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        """
        return {
            "model": settings.gemini_model,
            "temperature": str(settings.ai_temperature),
            "max_tokens": str(settings.ai_max_tokens),
            "public_name": "PandaPalAI",  # –¢–æ, —á—Ç–æ –≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        }

    # ============ –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ============

    def _prepare_image_for_gemini(self, image_data: bytes):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Gemini API

        Args:
            image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            PIL Image –æ–±—ä–µ–∫—Ç –¥–ª—è Gemini
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if len(image_data) > 20 * 1024 * 1024:  # 20MB –ª–∏–º–∏—Ç
                raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 20MB)")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ PIL Image
            import io

            image = Image.open(io.BytesIO(image_data))

            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(image_data)} –±–∞–π—Ç)")
            return image

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

    async def analyze_image(
        self,
        image_data: bytes,
        user_message: str = "",
        user_age: Optional[int] = None,
        user_grade: Optional[int] = None,
    ) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini Vision API

        Args:
            image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
            user_grade: –ö–ª–∞—Å—Å —Ä–µ–±—ë–Ω–∫–∞

        Returns:
            str: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç AI
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_hash = hashlib.md5(image_data).hexdigest()
            cache_key = f"image_analysis:{image_hash}:{user_message}"
            cached_response = await AIResponseCache.get_response(cache_key)

            if cached_response:
                logger.debug(f"üíæ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
                return cached_response

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            prepared_image = self._prepare_image_for_gemini(image_data)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context_instruction = self._build_context_instruction(user_age, user_grade)

            if user_message:
                prompt = f"{context_instruction}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—Å–∞–ª: '{user_message}'\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ä–µ–±—ë–Ω–∫–∞, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º."
            else:
                prompt = f"{context_instruction}\n\n–†–µ–±—ë–Ω–æ–∫ –ø—Ä–∏—Å–ª–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å, –∞–¥–∞–ø—Ç–∏—Ä—É—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞. –ï—Å–ª–∏ —ç—Ç–æ —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (–∑–∞–¥–∞—á–∞, —Å—Ö–µ–º–∞, —Ä–∏—Å—É–Ω–æ–∫) - –ø–æ–º–æ–≥–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
            model = genai.GenerativeModel(settings.gemini_model)
            response = model.generate_content([prepared_image, prompt])

            if not response.text:
                return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ! üêº"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await AIResponseCache.set_response(cache_key, response.text, ttl=3600)  # 1 —á–∞—Å

            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return response.text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üêº"

    async def moderate_image_content(self, image_data: bytes) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ç–µ–π

        Args:
            image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            tuple[bool, str]: (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –ø—Ä–∏—á–∏–Ω–∞_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            prepared_image = self._prepare_image_for_gemini(image_data)

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            moderation_prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–π 6-18 –ª–µ—Ç.
            
            –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ:
            - –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–∞—Å–∏–ª–∏–µ, –æ—Ä—É–∂–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏)
            - –í–∑—Ä–æ—Å–ª–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (18+)
            - –û–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            - –¢–µ–∫—Å—Ç —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            
            –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:
            - "SAFE" - –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            - "BLOCK" - –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            
            –ï—Å–ª–∏ BLOCK, –¥–æ–±–∞–≤—å –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ: BLOCK: –ø—Ä–∏—á–∏–Ω–∞
            """

            model = genai.GenerativeModel(settings.gemini_model)
            response = model.generate_content([prepared_image, moderation_prompt])

            result = response.text.strip().upper()

            if result.startswith("SAFE"):
                return True, ""
            elif result.startswith("BLOCK:"):
                reason = result.replace("BLOCK:", "").strip()
                logger.warning(f"üö´ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {reason}")
                return False, reason
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                logger.warning(f"üö´ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result}")
                return False, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

    async def create_educational_task_from_image(
        self,
        image_data: bytes,
        subject: str = "–æ–±—â–∏–π",
        user_age: Optional[int] = None,
        user_grade: Optional[int] = None,
    ) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            subject: –ü—Ä–µ–¥–º–µ—Ç (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, –±–∏–æ–ª–æ–≥–∏—è –∏ —Ç.–¥.)
            user_age: –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
            user_grade: –ö–ª–∞—Å—Å —Ä–µ–±—ë–Ω–∫–∞

        Returns:
            str: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            prepared_image = self._prepare_image_for_gemini(image_data)

            context_instruction = self._build_context_instruction(user_age, user_grade)

            prompt = f"""
            {context_instruction}
            
            –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".
            
            –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
            - –ü–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±—ë–Ω–∫–∞
            - –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏ –ø–æ–Ω—è—Ç–Ω–æ–π
            - –°–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ç–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            - –° —á—ë—Ç–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
            
            –§–æ—Ä–º–∞—Ç:
            üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ‚ùì –í–æ–ø—Ä–æ—Å/–∑–∞–¥–∞—á–∞
            üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
            
            –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º! üéì
            """

            model = genai.GenerativeModel(settings.gemini_model)
            response = model.generate_content([prepared_image, prompt])

            logger.info(f"üéì –°–æ–∑–¥–∞–Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return response.text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ! üêº"

    def _build_context_instruction(self, user_age: Optional[int], user_grade: Optional[int]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        context_parts = []
        if user_age:
            context_parts.append(f"–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {user_age} –ª–µ—Ç.")
        if user_grade:
            context_parts.append(f"–ö–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è: {user_grade}.")

        if context_parts:
            return (
                "–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å —Ä–µ–±—ë–Ω–∫–æ–º. "
                + " ".join(context_parts)
                + " –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–≤–æ–π —è–∑—ã–∫, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å."
            )
        return "–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å —Ä–µ–±—ë–Ω–∫–æ–º. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–≤–æ–π —è–∑—ã–∫, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ—Ä—ã."

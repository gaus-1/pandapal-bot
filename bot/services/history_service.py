"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é AI (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
@module bot.services.history_service
"""

from typing import List, Dict
from sqlalchemy import select, desc
from sqlalchemy.orm import Session

from bot.models import ChatHistory, User
from bot.config import settings
from loguru import logger


class ChatHistoryService:
    """
    –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–∞–º—è—Ç—å AI –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    def __init__(self, db: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            db: –°–µ—Å—Å–∏—è SQLAlchemy
        """
        self.db = db
        self.history_limit = settings.chat_history_limit  # 50 —Å–æ–æ–±—â–µ–Ω–∏–π
    
    def add_message(
        self, 
        telegram_id: int, 
        message_text: str, 
        message_type: str
    ) -> ChatHistory:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('user', 'ai', 'system')
        
        Returns:
            ChatHistory: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
        
        Raises:
            ValueError: –ï—Å–ª–∏ message_type –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type not in ['user', 'ai', 'system']:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π message_type: {message_type}")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = ChatHistory(
            user_telegram_id=telegram_id,
            message_text=message_text,
            message_type=message_type
        )
        
        self.db.add(message)
        self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–µ –∫–æ–º–º–∏—Ç—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
        self._cleanup_old_messages(telegram_id)
        
        logger.debug(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: user={telegram_id}, type={message_type}")
        
        return message
    
    def get_recent_history(
        self, 
        telegram_id: int, 
        limit: int = None
    ) -> List[ChatHistory]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ settings)
        
        Returns:
            List[ChatHistory]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        """
        if limit is None:
            limit = self.history_limit
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        stmt = (
            select(ChatHistory)
            .where(ChatHistory.user_telegram_id == telegram_id)
            .order_by(desc(ChatHistory.timestamp))
            .limit(limit)
        )
        
        messages = self.db.execute(stmt).scalars().all()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ)
        return list(reversed(messages))
    
    def get_conversation_context(self, telegram_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è AI
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        
        Example:
            >>> context = service.get_conversation_context(123456)
            >>> print(context)
            User: –ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π
            AI: –ü—Ä–∏–≤–µ—Ç! –ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É. –ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å?
            User: 2+2*2
            AI: –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ –ø–æ—Ä—è–¥–∫—É...
        """
        messages = self.get_recent_history(telegram_id)
        
        if not messages:
            return ""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        context_lines = []
        for msg in messages:
            role = {
                'user': 'User',
                'ai': 'AI',
                'system': 'System'
            }.get(msg.message_type, 'Unknown')
            
            context_lines.append(f"{role}: {msg.message_text}")
        
        return "\n".join(context_lines)
    
    def get_formatted_history_for_ai(
        self, 
        telegram_id: int
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Gemini API
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            List[Dict]: –ò—Å—Ç–æ—Ä–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'role': 'user', 'parts': ['text']}, ...]
        """
        messages = self.get_recent_history(telegram_id)
        
        formatted = []
        for msg in messages:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à message_type –≤ —Ñ–æ—Ä–º–∞—Ç Gemini
            role = 'user' if msg.message_type == 'user' else 'model'
            
            formatted.append({
                'role': role,
                'parts': [msg.message_text]
            })
        
        return formatted
    
    def _cleanup_old_messages(self, telegram_id: int) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        stmt = (
            select(ChatHistory)
            .where(ChatHistory.user_telegram_id == telegram_id)
            .order_by(desc(ChatHistory.timestamp))
        )
        
        all_messages = self.db.execute(stmt).scalars().all()
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        if len(all_messages) > self.history_limit:
            messages_to_delete = all_messages[self.history_limit:]
            
            for msg in messages_to_delete:
                self.db.delete(msg)
            
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(messages_to_delete)} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user={telegram_id}")
    
    def clear_history(self, telegram_id: int) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        stmt = select(ChatHistory).where(
            ChatHistory.user_telegram_id == telegram_id
        )
        
        messages = self.db.execute(stmt).scalars().all()
        count = len(messages)
        
        for msg in messages:
            self.db.delete(msg)
        
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è user={telegram_id}, —É–¥–∞–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return count
    
    def get_message_count(self, telegram_id: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        stmt = select(ChatHistory).where(
            ChatHistory.user_telegram_id == telegram_id
        )
        
        messages = self.db.execute(stmt).scalars().all()
        return len(messages)



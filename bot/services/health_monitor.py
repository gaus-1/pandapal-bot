"""
üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ò–°–û–í
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ graceful degradation
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
from enum import Enum

from loguru import logger
from sqlalchemy.exc import OperationalError
import aiohttp
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError


class ServiceStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""
    HEALTHY = "healthy"
    DEGRADED = "degraded" 
    FAILED = "failed"
    RECOVERING = "recovering"


@dataclass
class ServiceHealth:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    name: str
    status: ServiceStatus
    last_check: datetime
    last_error: Optional[str] = None
    failure_count: int = 0
    recovery_attempts: int = 0
    max_failures: int = 3
    max_recovery_attempts: int = 5


class HealthMonitor:
    """üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.services: Dict[str, ServiceHealth] = {}
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.is_running = False
        self._monitoring_task: Optional[asyncio.Task] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤
        self._init_services()
        
    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services_config = {
            "database": {"max_failures": 5, "check_interval": 10},
            "telegram_api": {"max_failures": 3, "check_interval": 15},
            "gemini_ai": {"max_failures": 3, "check_interval": 20},
            "web_server": {"max_failures": 2, "check_interval": 5},
        }
        
        for service_name, config in services_config.items():
            self.services[service_name] = ServiceHealth(
                name=service_name,
                status=ServiceStatus.HEALTHY,
                last_check=datetime.now(),
                max_failures=config["max_failures"],
            )
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        self._monitoring_task = asyncio.create_task(self._monitoring_loop())
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω–∞")
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        if self._monitoring_task:
            self._monitoring_task.cancel()
            try:
                await self._monitoring_task
            except asyncio.CancelledError:
                pass
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                await self._check_all_services()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)  # –ö—Ä–∞—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _check_all_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        tasks = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for service_name in self.services.keys():
            task = asyncio.create_task(self._check_service(service_name))
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        await asyncio.gather(*tasks, return_exceptions=True)
    
    async def _check_service(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        service = self.services[service_name]
        
        try:
            is_healthy = await self._perform_health_check(service_name)
            
            if is_healthy:
                await self._handle_healthy_service(service)
            else:
                await self._handle_unhealthy_service(service, "Health check failed")
                
        except Exception as e:
            await self._handle_unhealthy_service(service, str(e))
        
        service.last_check = datetime.now()
        return service.status == ServiceStatus.HEALTHY
    
    async def _perform_health_check(self, service_name: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        
        if service_name == "database":
            return await self._check_database()
        elif service_name == "telegram_api":
            return await self._check_telegram_api()
        elif service_name == "gemini_ai":
            return await self._check_gemini_ai()
        elif service_name == "web_server":
            return await self._check_web_server()
        
        return False
    
    async def _check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from bot.database import DatabaseService
            return DatabaseService.check_connection()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    async def _check_telegram_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API"""
        try:
            from main import bot
            await bot.get_me()
            return True
        except (TelegramAPIError, TelegramNetworkError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API: {e}")
            return False
    
    async def _check_gemini_ai(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Gemini AI"""
        try:
            from bot.services.ai_service import GeminiAIService
            ai_service = GeminiAIService()
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            response = await ai_service.generate_response("–¢–µ—Å—Ç")
            return response is not None and len(response) > 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini AI: {e}")
            return False
    
    async def _check_web_server(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import os
            port = os.getenv("PORT", "8000")
            url = f"http://localhost:{port}/health"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=5) as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def _handle_healthy_service(self, service: ServiceHealth):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        if service.status != ServiceStatus.HEALTHY:
            logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            service.status = ServiceStatus.HEALTHY
            service.failure_count = 0
            service.recovery_attempts = 0
            service.last_error = None
    
    async def _handle_unhealthy_service(self, service: ServiceHealth, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        service.failure_count += 1
        service.last_error = error
        
        logger.warning(f"–°–µ—Ä–≤–∏—Å {service.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({service.failure_count}/{service.max_failures}): {error}")
        
        if service.failure_count >= service.max_failures:
            if service.status != ServiceStatus.FAILED:
                logger.error(f"–°–µ—Ä–≤–∏—Å {service.name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å FAILED")
                service.status = ServiceStatus.FAILED
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                await self._start_recovery(service)
    
    async def _start_recovery(self, service: ServiceHealth):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        if service.recovery_attempts >= service.max_recovery_attempts:
            logger.error(f"–°–µ—Ä–≤–∏—Å {service.name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {service.max_recovery_attempts} –ø–æ–ø—ã—Ç–æ–∫")
            return
        
        service.status = ServiceStatus.RECOVERING
        service.recovery_attempts += 1
        
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ {service.name} ({service.recovery_attempts}/{service.max_recovery_attempts})")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        await self._perform_recovery(service)
    
    async def _perform_recovery(self, service: ServiceHealth):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if service.name == "database":
                await self._recover_database()
            elif service.name == "telegram_api":
                await self._recover_telegram_api()
            elif service.name == "gemini_ai":
                await self._recover_gemini_ai()
            elif service.name == "web_server":
                await self._recover_web_server()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {service.name}: {e}")
    
    async def _recover_database(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from bot.database import engine
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            engine.dispose()
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
    
    async def _recover_telegram_api(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram API"""
        try:
            from main import bot
            # –°–±—Ä–æ—Å webhook –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling
            await bot.delete_webhook()
            logger.info("üîÑ –°–±—Ä–æ—Å Telegram webhook")
            await asyncio.sleep(3)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Telegram API: {e}")
    
    async def _recover_gemini_ai(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Gemini AI"""
        try:
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
            from bot.services.ai_service import GeminiAIService
            logger.info("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI")
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Gemini AI: {e}")
    
    async def _recover_web_server(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        await asyncio.sleep(1)
    
    def get_service_status(self, service_name: str) -> Optional[ServiceHealth]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        return self.services.get(service_name)
    
    def get_overall_health(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        healthy_services = sum(1 for s in self.services.values() if s.status == ServiceStatus.HEALTHY)
        total_services = len(self.services)
        
        return {
            "overall_status": "healthy" if healthy_services == total_services else "degraded",
            "healthy_services": healthy_services,
            "total_services": total_services,
            "services": {name: {
                "status": service.status.value,
                "last_check": service.last_check.isoformat(),
                "failure_count": service.failure_count,
                "last_error": service.last_error
            } for name, service in self.services.items()},
            "timestamp": datetime.now().isoformat()
        }
    
    async def force_health_check(self, service_name: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        if service_name not in self.services:
            return False
        
        return await self._check_service(service_name)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
health_monitor = HealthMonitor()

"""
–°–µ—Ä–≤–∏—Å —Ä–æ—Ç–∞—Ü–∏–∏ API —Ç–æ–∫–µ–Ω–æ–≤ Gemini AI.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ API –∫–ª—é—á–∞–º–∏
Google Gemini –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é —Ä–æ—Ç–∞—Ü–∏—é,
–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–≤–æ—Ç—ã.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –∫–≤–æ—Ç—ã
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –°–±—Ä–æ—Å –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–æ–≤–æ–º –¥–Ω–µ)
"""

import asyncio
import random
from typing import List, Optional

from loguru import logger

from bot.config import settings


class TokenRotator:
    """
    –†–æ—Ç–∞—Ç–æ—Ä API —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∫–ª—é—á–∞–º–∏ Gemini AI.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –∫–≤–æ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    –ø—É—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á.

    Attributes:
        tokens (List[str]): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API —Ç–æ–∫–µ–Ω–æ–≤.
        current_index (int): –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
        failed_tokens (Set[str]): –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—Ç–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤.

        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
        –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏.
        """
        self.tokens = self._prepare_tokens()
        self.current_index = 0
        self.failed_tokens = set()  # –¢–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç

        logger.info(f"üîÑ Token Rotator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏")

    def _prepare_tokens(self) -> List[str]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è,
        —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã.

        Returns:
            List[str]: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.

        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
        """
        tokens = []

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω
        if settings.gemini_api_key:
            tokens.append(settings.gemini_api_key.strip())

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–∏–∑ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        if settings.gemini_api_keys:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            additional_tokens = [
                token.strip() for token in settings.gemini_api_keys.split(",") if token.strip()
            ]
            tokens.extend(additional_tokens)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        tokens = list(dict.fromkeys(tokens))

        if not tokens:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API —Ç–æ–∫–µ–Ω–æ–≤!")

        return tokens

    def get_current_token(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π.

        Returns:
            Optional[str]: –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ None, –µ—Å–ª–∏ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã.
        """
        if not self.tokens:
            return None

        available_tokens = [t for t in self.tokens if t not in self.failed_tokens]

        if not available_tokens:
            logger.error("‚ùå –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
            return None

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
        if self.tokens[self.current_index] in self.failed_tokens:
            self.current_index = (self.current_index + 1) % len(self.tokens)

        return self.tokens[self.current_index]

    def mark_token_failed(self, token: str, reason: str = "quota_exceeded") -> None:
        """
        –ü–æ–º–µ—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.

        Args:
            token (str): –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π.
            reason (str): –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "quota_exceeded").
        """
        if token in self.tokens:
            self.failed_tokens.add(token)
            logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π: {reason}")

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω
            self.next_token()

    def next_token(self) -> Optional[str]:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω –≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.

        Returns:
            Optional[str]: –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.
        """
        if not self.tokens:
            return None

        self.current_index = (self.current_index + 1) % len(self.tokens)
        return self.get_current_token()

    def reset_failed_tokens(self) -> None:
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è,
        –∫–æ–≥–¥–∞ –∫–≤–æ—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è.
        """
        self.failed_tokens.clear()
        logger.info("üîÑ –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω")

    def get_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:
                - total_tokens (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                - available_tokens (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                - failed_tokens (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                - current_index (int): –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                - current_token (str): –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        """
        total = len(self.tokens)
        failed = len(self.failed_tokens)
        available = total - failed

        return {
            "total_tokens": total,
            "available_tokens": available,
            "failed_tokens": failed,
            "current_index": self.current_index,
            "current_token": self.get_current_token()[:10] + "..."
            if self.get_current_token()
            else None,
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_token_rotator = None


def get_token_rotator() -> TokenRotator:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—Ç–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤.

    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    —Ä–æ—Ç–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Returns:
        TokenRotator: –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—Ç–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    global _token_rotator
    if _token_rotator is None:
        _token_rotator = TokenRotator()
    return _token_rotator

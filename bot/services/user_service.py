"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

"""

from typing import Optional

from loguru import logger
from sqlalchemy import select
from sqlalchemy.orm import Session

from bot.config import MAX_AGE, MAX_GRADE, MIN_AGE, MIN_GRADE
from bot.models import User


class UserService:
    """
    –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """

    def __init__(self, db: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞

        Args:
            db: –°–µ—Å—Å–∏—è SQLAlchemy
        """
        self.db = db

    def get_or_create_user(
        self,
        telegram_id: int,
        username: Optional[str] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
    ) -> User:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (/start)

        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –∏–∑ Telegram
            first_name: –ò–º—è –∏–∑ Telegram
            last_name: –§–∞–º–∏–ª–∏—è –∏–∑ Telegram

        Returns:
            User: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == telegram_id)
        user = self.db.execute(stmt).scalar_one_or_none()

        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram (–º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
            user.username = username
            user.first_name = first_name
            user.last_name = last_name
            user.is_active = True

            logger.info(f"üë§ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} ({first_name})")
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                user_type="child",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ä–µ–±—ë–Ω–æ–∫
                is_active=True,
            )

            self.db.add(user)
            self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

            logger.info(f"‚ú® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {telegram_id} ({first_name})")

        return user

    def update_user_profile(
        self,
        telegram_id: int,
        age: Optional[int] = None,
        grade: Optional[int] = None,
        user_type: Optional[str] = None,
    ) -> Optional[User]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            telegram_id: Telegram ID
            age: –í–æ–∑—Ä–∞—Å—Ç (6-18)
            grade: –ö–ª–∞—Å—Å (1-11)
            user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (child/parent)

        Returns:
            User: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

        Raises:
            ValueError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        user = self.get_user_by_telegram_id(telegram_id)

        if not user:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        if age is not None:
            if age < MIN_AGE or age > MAX_AGE:
                raise ValueError(f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE} –ª–µ—Ç")
            user.age = age

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
        if grade is not None:
            if grade < MIN_GRADE or grade > MAX_GRADE:
                raise ValueError(f"–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_GRADE} –¥–æ {MAX_GRADE}")
            user.grade = grade

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type is not None:
            if user_type not in ["child", "parent"]:
                raise ValueError("user_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å child/parent")
            user.user_type = user_type

        self.db.flush()
        logger.info(f"üìù –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: {telegram_id}")

        return user

    def get_user_by_telegram_id(self, telegram_id: int) -> Optional[User]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID

        Args:
            telegram_id: Telegram ID

        Returns:
            User: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None
        """
        stmt = select(User).where(User.telegram_id == telegram_id)
        return self.db.execute(stmt).scalar_one_or_none()

    def link_parent_to_child(self, child_telegram_id: int, parent_telegram_id: int) -> bool:
        """
        –°–≤—è–∑–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è —Å —Ä–µ–±—ë–Ω–∫–æ–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è

        Args:
            child_telegram_id: Telegram ID —Ä–µ–±—ë–Ω–∫–∞
            parent_telegram_id: Telegram ID —Ä–æ–¥–∏—Ç–µ–ª—è

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        child = self.get_user_by_telegram_id(child_telegram_id)
        parent = self.get_user_by_telegram_id(parent_telegram_id)

        if not child or not parent:
            logger.error(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: child={child_telegram_id}, parent={parent_telegram_id}"
            )
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if child.user_type != "child":
            logger.error(f"‚ùå {child_telegram_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–±—ë–Ω–∫–æ–º")
            return False

        if parent.user_type != "parent":
            logger.error(f"‚ùå {parent_telegram_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª–µ–º")
            return False

        # –°–≤—è–∑—ã–≤–∞–µ–º
        child.parent_telegram_id = parent_telegram_id
        self.db.flush()

        logger.info(f"üë®‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å {parent_telegram_id} —Å–≤—è–∑–∞–Ω —Å —Ä–µ–±—ë–Ω–∫–æ–º {child_telegram_id}")

        return True

    def get_user_display_name(self, user: User) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if user.first_name:
            name = user.first_name
            if user.last_name:
                name += f" {user.last_name}"
            return name

        if user.username:
            return f"@{user.username}"

        return f"User{user.telegram_id}"

    def is_registered(self, telegram_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        Args:
            telegram_id: Telegram ID

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        user = self.get_user_by_telegram_id(telegram_id)
        return user is not None

    def deactivate_user(self, telegram_id: int) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)

        Args:
            telegram_id: Telegram ID

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        user = self.get_user_by_telegram_id(telegram_id)

        if not user:
            return False

        user.is_active = False
        self.db.flush()

        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {telegram_id}")

        return True

"""
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@module bot.database
"""

from contextlib import contextmanager
from typing import Generator

from loguru import logger
from sqlalchemy import create_engine, text
from sqlalchemy.orm import Session, sessionmaker
from sqlalchemy.pool import NullPool

from bot.config import settings
from bot.models import Base

# –°–æ–∑–¥–∞—ë–º engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
# NullPool –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å = –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
engine = create_engine(
    settings.database_url,
    poolclass=NullPool,
    echo=False,  # True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    future=True,
    connect_args={
        "sslmode": "require",  # –¢—Ä–µ–±—É–µ–º SSL –¥–ª—è Render PostgreSQL
        "connect_timeout": 10,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
    }
)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def init_db() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

    –í–ù–ò–ú–ê–ù–ò–ï: –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏!
    """
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


@contextmanager
def get_db() -> Generator[Session, None, None]:
    """
    Context manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ```python
    with get_db() as db:
        user = db.query(User).filter_by(telegram_id=123).first()
    ```

    Yields:
        Session: –°–µ—Å—Å–∏—è SQLAlchemy
    """
    db = SessionLocal()
    try:
        yield db
        db.commit()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    except Exception as e:
        db.rollback()  # –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        logger.error(f"‚ùå Database error: {e}")
        raise
    finally:
        db.close()  # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é


class DatabaseService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    """

    @staticmethod
    def get_db_session() -> Session:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ë–î
        –ù–ï –ó–ê–ë–£–î–¨–¢–ï –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!

        Returns:
            Session: –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
        """
        return SessionLocal()

    @staticmethod
    def check_connection() -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            db_url_clean = settings.database_url.replace(
                settings.database_url.split('@')[0].split('//')[1], 
                '***:***'
            )
            logger.info(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_url_clean}")
            
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–µ–Ω: {result.fetchone()}")
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∞–∫—Ç–∏–≤–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            logger.error(f"‚ùå URL –ë–î (–±–µ–∑ –ø–∞—Ä–æ–ª—è): {db_url_clean}")
            return False

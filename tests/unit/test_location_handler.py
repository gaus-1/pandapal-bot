"""
–†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è–º
"""

import pytest
from unittest.mock import AsyncMock, Mock
from aiogram.types import Message, Location, User as TgUser, Chat

from bot.handlers.location import router, get_location_keyboard
from bot.models import User
from bot.database import get_db
from bot.services.user_service import UserService


class TestLocationKeyboard:
    """–¢–µ—Å—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    
    @pytest.mark.unit
    def test_location_keyboard_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = get_location_keyboard()
        
        assert keyboard is not None
        assert keyboard.resize_keyboard is True
        assert keyboard.one_time_keyboard is True
        assert len(keyboard.keyboard) == 2  # 2 —Å—Ç—Ä–æ–∫–∏
        assert len(keyboard.keyboard[0]) == 1  # –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        assert len(keyboard.keyboard[1]) == 1  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    
    @pytest.mark.unit
    def test_location_button_request_location(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"""
        keyboard = get_location_keyboard()
        
        location_button = keyboard.keyboard[0][0]
        assert location_button.text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        assert location_button.request_location is True
    
    @pytest.mark.unit
    def test_cancel_button_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        keyboard = get_location_keyboard()
        
        cancel_button = keyboard.keyboard[1][0]
        assert cancel_button.text == "üîô –û—Ç–º–µ–Ω–∞"
        assert cancel_button.request_location is None


class TestLocationRouter:
    """–¢–µ—Å—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    
    @pytest.mark.unit
    def test_router_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ä–æ—É—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        assert router is not None
        assert router.name == "location"
    
    @pytest.mark.unit
    def test_router_has_handlers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ä–æ—É—Ç–µ—Ä –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—É—Ç–µ—Ä –∏–º–µ–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        assert "message" in router.observers
        
        # –ü–æ–ª—É—á–∞–µ–º observer –¥–ª—è message
        message_observer = router.observers["message"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ observer –Ω–µ –ø—É—Å—Ç–æ–π
        assert message_observer is not None
        
        # –£ —Ä–æ—É—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        # (—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö)


class TestLocationLinks:
    """–¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—ã"""
    
    @pytest.mark.unit
    def test_yandex_maps_link_format(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã"""
        lat = 55.7558
        lon = 37.6173
        
        yandex_url = f"https://yandex.ru/maps/?ll={lon},{lat}&z=16&pt={lon},{lat}"
        
        assert "yandex.ru/maps" in yandex_url
        assert str(lat) in yandex_url
        assert str(lon) in yandex_url
        assert yandex_url.startswith("https://")
    
    @pytest.mark.unit
    def test_google_maps_link_format(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ Google Maps"""
        lat = 55.7558
        lon = 37.6173
        
        google_url = f"https://www.google.com/maps?q={lat},{lon}"
        
        assert "google.com/maps" in google_url
        assert str(lat) in google_url
        assert str(lon) in google_url
        assert google_url.startswith("https://")
    
    @pytest.mark.unit
    def test_2gis_link_format(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ 2GIS"""
        lat = 55.7558
        lon = 37.6173
        
        gis_url = f"https://2gis.ru/geo/{lon},{lat}"
        
        assert "2gis.ru/geo" in gis_url
        assert str(lat) in gis_url
        assert str(lon) in gis_url
        assert gis_url.startswith("https://")


class TestLocationHandlerLogic:
    """–¢–µ—Å—Ç—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    
    @pytest.mark.unit
    def test_location_message_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
        lat = 55.7558
        lon = 37.6173
        child_name = "–í–∞—Å—è"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        yandex_url = f"https://yandex.ru/maps/?ll={lon},{lat}&z=16&pt={lon},{lat}"
        google_url = f"https://www.google.com/maps?q={lat},{lon}"
        gis_url = f"https://2gis.ru/geo/{lon},{lat}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        assert yandex_url.count("http") == 1
        assert google_url.count("http") == 1
        assert gis_url.count("http") == 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        assert -90 <= lat <= 90  # –®–∏—Ä–æ—Ç–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        assert -180 <= lon <= 180  # –î–æ–ª–≥–æ—Ç–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    
    @pytest.mark.unit
    def test_coordinates_precision(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        # Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 6 –∑–Ω–∞–∫–æ–≤
        lat = 55.755826
        lon = 37.617300
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        assert isinstance(lat, float)
        assert isinstance(lon, float)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lat_str = f"{lat:.6f}"
        lon_str = f"{lon:.6f}"
        
        assert len(lat_str.split('.')[-1]) <= 6
        assert len(lon_str.split('.')[-1]) <= 6


class TestLocationSecurity:
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    
    @pytest.mark.unit
    def test_no_parent_scenario(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        """
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
        user = User(
            telegram_id=123456,
            first_name="–í–∞—Å—è",
            parent_telegram_id=None  # –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è!
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ parent_telegram_id = None
        assert user.parent_telegram_id is None
        
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        # "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å"
    
    @pytest.mark.unit
    def test_with_parent_scenario(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —Ä–æ–¥–∏—Ç–µ–ª–µ–º
        –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
        """
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
        user = User(
            telegram_id=123456,
            first_name="–í–∞—Å—è",
            parent_telegram_id=999999  # –ï—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å!
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ parent_telegram_id —É–∫–∞–∑–∞–Ω
        assert user.parent_telegram_id is not None
        assert user.parent_telegram_id == 999999


class TestLocationDataNotSaved:
    """–¢–µ—Å—Ç—ã —á—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î"""
    
    @pytest.mark.unit
    def test_location_not_in_models(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        from bot import models
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –º–æ–¥–µ–ª–∏ Location/UserLocation/etc
        model_names = [
            name for name in dir(models) 
            if not name.startswith('_')
        ]
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å User, ChatHistory –∏ –¥—Ä., –Ω–æ –ù–ï Location
        assert "Location" not in model_names
        assert "UserLocation" not in model_names
        assert "GeoHistory" not in model_names
        
        # –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –º—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é


class TestLocationIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_location_handler_registered(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–æ—É—Ç–µ—Ä–µ"""
        from bot.handlers import routers
        from bot.handlers.location import router as location_router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ location_router –≤ —Å–ø–∏—Å–∫–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
        assert location_router in routers
    
    @pytest.mark.integration
    def test_location_button_in_main_menu(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "üìç –ì–¥–µ —è" –µ—Å—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
        from bot.keyboards.main_kb import get_main_menu_keyboard
        
        keyboard = get_main_menu_keyboard()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
        all_buttons_text = []
        for row in keyboard.keyboard:
            for button in row:
                all_buttons_text.append(button.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        assert "üìç –ì–¥–µ —è" in all_buttons_text


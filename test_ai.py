#!/usr/bin/env python3
"""
–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_gemini_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API"""
    try:
        import google.generativeai as genai
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False
            
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=api_key)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        model_name = os.getenv('GEMINI_MODEL', 'gemini-2.0-flash')
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        
        model = genai.GenerativeModel(model_name)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        response = model.generate_content("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        
        if response.text:
            print(f"‚úÖ AI –æ—Ç–≤–µ—Ç–∏–ª: {response.text[:100]}...")
            return True
        else:
            print("‚ùå AI –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini AI...")
    success = test_gemini_connection()
    
    if success:
        print("üéâ AI —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("üí• AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    sys.exit(0 if success else 1)

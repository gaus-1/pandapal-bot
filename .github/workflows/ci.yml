name: 🧪 CI/CD Pipeline для PandaPal

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🐍 Backend Tests (Python)
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pandapal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock
    
    - name: 🗄️ Setup test database
      run: |
        python -c "
        from bot.database import init_db
        init_db()
        print('✅ Test database initialized')
        "
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pandapal_test
        TELEGRAM_BOT_TOKEN: test_token
        GEMINI_API_KEY: test_key
        SECRET_KEY: test_secret_key_for_testing_only
    
    - name: 🧪 Run backend tests
      run: |
        pytest tests/ -v --cov=bot --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pandapal_test
        TELEGRAM_BOT_TOKEN: test_token
        GEMINI_API_KEY: test_key
        SECRET_KEY: test_secret_key_for_testing_only
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # ⚛️ Frontend Tests (React/TypeScript)
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: 🔍 Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: 🧪 Run frontend tests
      run: |
        cd frontend
        npm run test:coverage
    
    - name: 📊 Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 🔒 Security Tests
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: 🔍 Run Bandit (Python security)
      run: |
        bandit -r bot/ -f json -o bandit-report.json || true
    
    - name: 🔍 Run Safety (dependencies check)
      run: |
        safety check --json --output safety-report.json || true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 🚀 Deploy to Render (только для main)
  deploy:
    needs: [backend-tests, frontend-tests, security-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🚀 Deploy to Render
      run: |
        echo "✅ Все тесты прошли успешно!"
        echo "🚀 Готов к деплою на Render"
        echo "📊 Backend coverage: $(cat backend-coverage.txt || echo 'N/A')"
        echo "📊 Frontend coverage: $(cat frontend-coverage.txt || echo 'N/A')"

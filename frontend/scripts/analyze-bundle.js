/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º 2025: –±–∞–Ω–¥–ª < 250KB
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const distPath = path.join(__dirname, '../dist');

console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞ PandaPal Go 2025+\n');

if (!fs.existsSync(distPath)) {
  console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run build');
  process.exit(1);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ KB
 */
const getFileSize = (filePath) => {
  const stats = fs.statSync(filePath);
  return (stats.size / 1024).toFixed(2);
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
 */
const getAllFiles = (dirPath, arrayOfFiles = []) => {
  const files = fs.readdirSync(dirPath);

  files.forEach((file) => {
    const fullPath = path.join(dirPath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
    } else {
      arrayOfFiles.push(fullPath);
    }
  });

  return arrayOfFiles;
};

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
const allFiles = getAllFiles(distPath);

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
const filesByType = {
  js: [],
  css: [],
  assets: [],
  html: [],
};

allFiles.forEach((file) => {
  const ext = path.extname(file);
  const relativePath = path.relative(distPath, file);
  const size = getFileSize(file);

  if (ext === '.js') {
    filesByType.js.push({ path: relativePath, size: parseFloat(size) });
  } else if (ext === '.css') {
    filesByType.css.push({ path: relativePath, size: parseFloat(size) });
  } else if (ext === '.html') {
    filesByType.html.push({ path: relativePath, size: parseFloat(size) });
  } else {
    filesByType.assets.push({ path: relativePath, size: parseFloat(size) });
  }
});

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
Object.keys(filesByType).forEach((type) => {
  filesByType[type].sort((a, b) => b.size - a.size);
});

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
console.log('üì¶ JavaScript —Ñ–∞–π–ª—ã:');
console.log('‚îÅ'.repeat(80));
let totalJS = 0;
filesByType.js.forEach((file) => {
  totalJS += file.size;
  const emoji = file.size > 250 ? 'üî¥' : file.size > 100 ? 'üü°' : 'üü¢';
  console.log(`${emoji} ${file.path.padEnd(50)} ${file.size.toFixed(2).padStart(10)} KB`);
});
console.log('‚îÅ'.repeat(80));
console.log(`üìä –í—Å–µ–≥–æ JS: ${totalJS.toFixed(2)} KB`);

if (totalJS > 250) {
  console.log('‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä JS > 250KB (—Å—Ç–∞–Ω–¥–∞—Ä—Ç 2025)');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ lazy loading –¥–ª—è Three.js');
} else {
  console.log('‚úÖ –†–∞–∑–º–µ—Ä JS —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º 2025!');
}

console.log('\nüé® CSS —Ñ–∞–π–ª—ã:');
console.log('‚îÅ'.repeat(80));
let totalCSS = 0;
filesByType.css.forEach((file) => {
  totalCSS += file.size;
  console.log(`  ${file.path.padEnd(50)} ${file.size.toFixed(2).padStart(10)} KB`);
});
console.log('‚îÅ'.repeat(80));
console.log(`üìä –í—Å–µ–≥–æ CSS: ${totalCSS.toFixed(2)} KB\n`);

console.log('üñºÔ∏è  Assets —Ñ–∞–π–ª—ã (—Ç–æ–ø-10):');
console.log('‚îÅ'.repeat(80));
let totalAssets = 0;
filesByType.assets.slice(0, 10).forEach((file) => {
  totalAssets += file.size;
  console.log(`  ${file.path.padEnd(50)} ${file.size.toFixed(2).padStart(10)} KB`);
});
console.log('‚îÅ'.repeat(80));
console.log(`üìä –í—Å–µ–≥–æ Assets (—Ç–æ–ø-10): ${totalAssets.toFixed(2)} KB\n`);

// –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
const total = totalJS + totalCSS + totalAssets;
console.log('üì¶ –û–ë–©–ò–ô –†–ê–ó–ú–ï–†:');
console.log('‚îÅ'.repeat(80));
console.log(`  JavaScript:  ${totalJS.toFixed(2).padStart(10)} KB`);
console.log(`  CSS:         ${totalCSS.toFixed(2).padStart(10)} KB`);
console.log(`  Assets:      ${totalAssets.toFixed(2).padStart(10)} KB`);
console.log('‚îÅ'.repeat(80));
console.log(`  –ò–¢–û–ì–û:       ${total.toFixed(2).padStart(10)} KB\n`);

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
console.log('‚îÅ'.repeat(80));

if (totalJS > 250) {
  console.log('1. ‚ö†Ô∏è  –†–∞–∑–¥–µ–ª–∏—Ç–µ Three.js –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π chunk —Å lazy loading');
  console.log('2. ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dynamic import –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
}

if (totalCSS > 50) {
  console.log('3. ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ CSS –∫–ª–∞—Å—Å—ã (PurgeCSS)');
}

const largeAssets = filesByType.assets.filter((f) => f.size > 100);
if (largeAssets.length > 0) {
  console.log(`4. ‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–∏–µ –∞—Å—Å–µ—Ç—ã: ${largeAssets.length} —Ñ–∞–π–ª–æ–≤ > 100KB`);
}

if (total < 500) {
  console.log('‚úÖ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–ª–∏—á–Ω—ã–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ 2025!');
} else if (total < 1000) {
  console.log('‚ö†Ô∏è  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–µ–º–ª–µ–º—ã–π, –Ω–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å');
} else {
  console.log('üî¥ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π –∏–≥—Ä—ã');
}

console.log('‚îÅ'.repeat(80));

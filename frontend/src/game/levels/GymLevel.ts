import { Level } from './Level';
import type { ColorScheme } from '../utils/ColorPalette';
import { ColorPalette } from '../utils/ColorPalette';
import type { Game } from '../core/Game';

/**
 * –£—Ä–æ–≤–µ–Ω—å 1: –°–ø–æ—Ä—Ç–∑–∞–ª üèÄ
 *
 * –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è:
 * - –ù–∞—á–∞–ª–æ: –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ (–ø—É—Å—Ç–æ–π —Å–ø–æ—Ä—Ç–∑–∞–ª, —Ç–∏—Ö–æ)
 * - –°–µ—Ä–µ–¥–∏–Ω–∞: –£–¥–∏–≤–ª–µ–Ω–∏–µ (–º—è—á –æ–∂–∏–≤–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è)
 * - –ö–æ–Ω–µ—Ü: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ (–≤—Å–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–æ –ø–æ –º–µ—Å—Ç–∞–º)
 */
export class GymLevel extends Level {
  constructor(game: Game) {
    super(game);
  }
  protected initColorScheme(): ColorScheme {
    return ColorPalette.GYM;
  }

  getLevelName(): string {
    return '–°–ø–æ—Ä—Ç–∑–∞–ª';
  }

  getLevelDescription(): string {
    return '–ü–æ–º–æ–≥–∏ –ø–∞–Ω–¥–µ —Ä–∞–∑–ª–æ–∂–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!';
  }

  protected getMathDifficulty(): number {
    return 1; // –õ–µ–≥–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–∏—Ä–ø–∏—á–µ–π –≤ —Ñ–æ—Ä–º–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
   */
  protected createBricksLayout(): Array<{ x: number; y: number; hits: number }> {
    const bricks: Array<{ x: number; y: number; hits: number }> = [];
    const brickWidth = this.canvasWidth * 0.12;
    const brickHeight = 30;
    const padding = 10;
    const offsetX = (this.canvasWidth - (brickWidth + padding) * 6) / 2;
    const offsetY = 80;

    // 3 —Ä—è–¥–∞ –∫–∏—Ä–ø–∏—á–µ–π
    for (let row = 0; row < 3; row++) {
      for (let col = 0; col < 6; col++) {
        bricks.push({
          x: offsetX + col * (brickWidth + padding),
          y: offsetY + row * (brickHeight + padding),
          hits: 1,
        });
      }
    }

    return bricks;
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ —Å–ø–æ—Ä—Ç–∑–∞–ª–∞
   */
  protected renderBackground(ctx: CanvasRenderingContext2D): void {
    // –ë–∞–∑–æ–≤—ã–π —Ñ–æ–Ω
    super.renderBackground(ctx);

    // –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–∞
    ctx.strokeStyle = ColorPalette.withAlpha(this.colorScheme.secondary, 0.3);
    ctx.lineWidth = 2;

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 1; i < 5; i++) {
      const y = (this.canvasHeight / 5) * i;
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(this.canvasWidth, y);
      ctx.stroke();
    }

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 1; i < 4; i++) {
      const x = (this.canvasWidth / 4) * i;
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, this.canvasHeight);
      ctx.stroke();
    }

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
    ctx.beginPath();
    ctx.arc(
      this.canvasWidth / 2,
      this.canvasHeight / 2,
      60,
      0,
      Math.PI * 2
    );
    ctx.stroke();

    // –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.text, 0.2);
    ctx.font = 'bold 48px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–°–ü–û–†–¢–ó–ê–õ', this.canvasWidth / 2, this.canvasHeight - 30);
  }
}

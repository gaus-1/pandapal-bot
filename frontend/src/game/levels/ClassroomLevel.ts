import { Level } from './Level';
import type { ColorScheme } from '../utils/ColorPalette';
import { ColorPalette } from '../utils/ColorPalette';
import type { Game } from '../core/Game';

/**
 * –£—Ä–æ–≤–µ–Ω—å 2: –ö–ª–∞—Å—Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ üìê
 *
 * –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è:
 * - –ù–∞—á–∞–ª–æ: –ò–Ω—Ç–µ—Ä–µ—Å (–¥–æ—Å–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)
 * - –°–µ—Ä–µ–¥–∏–Ω–∞: –û—Ç–∫—Ä—ã—Ç–∏–µ (—Ä–µ—à–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã, –æ–Ω–∏ –æ–∂–∏–≤–∞—é—Ç)
 * - –ö–æ–Ω–µ—Ü: –ì–æ—Ä–¥–æ—Å—Ç—å (–≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω—ã)
 */
export class ClassroomLevel extends Level {
  constructor(game: Game) {
    super(game);
  }
  protected initColorScheme(): ColorScheme {
    return ColorPalette.CLASSROOM;
  }

  getLevelName(): string {
    return '–ö–ª–∞—Å—Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏';
  }

  getLevelDescription(): string {
    return '–†–µ—à–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –¥–æ—Å–∫–µ!';
  }

  protected getMathDifficulty(): number {
    return 2; // –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
  }

  /**
   * –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ –∫–ª–∞—Å—Å–Ω–æ–π –¥–æ—Å–∫–∏
   */
  protected createBricksLayout(): Array<{ x: number; y: number; hits: number }> {
    const bricks: Array<{ x: number; y: number; hits: number }> = [];
    const brickWidth = this.canvasWidth * 0.12;
    const brickHeight = 30;
    const padding = 10;
    const offsetX = (this.canvasWidth - (brickWidth + padding) * 6) / 2;
    const offsetY = 60;

    // 4 —Ä—è–¥–∞ –∫–∏—Ä–ø–∏—á–µ–π
    for (let row = 0; row < 4; row++) {
      for (let col = 0; col < 6; col++) {
        bricks.push({
          x: offsetX + col * (brickWidth + padding),
          y: offsetY + row * (brickHeight + padding),
          hits: row === 3 ? 2 : 1, // –ù–∏–∂–Ω–∏–π —Ä—è–¥ —Ç—Ä–µ–±—É–µ—Ç 2 —É–¥–∞—Ä–∞
        });
      }
    }

    return bricks;
  }

  protected renderBackground(ctx: CanvasRenderingContext2D): void {
    super.renderBackground(ctx);

    // –î–æ—Å–∫–∞
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.secondary, 0.2);
    ctx.fillRect(50, 40, this.canvasWidth - 100, 200);
    ctx.strokeStyle = this.colorScheme.text;
    ctx.lineWidth = 3;
    ctx.strokeRect(50, 40, this.canvasWidth - 100, 200);

    // –ü–∞—Ä—Ç—ã (—Å–∏–ª—É—ç—Ç—ã)
    for (let i = 0; i < 3; i++) {
      const x = 100 + i * 150;
      const y = this.canvasHeight - 150;

      ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.primary, 0.15);
      ctx.fillRect(x, y, 80, 40);
      ctx.fillRect(x + 20, y + 40, 40, 60);
    }

    // –ù–∞–∑–≤–∞–Ω–∏–µ
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.text, 0.2);
    ctx.font = 'bold 36px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–ö–õ–ê–°–°', this.canvasWidth / 2, this.canvasHeight - 30);
  }
}

import { Brick } from '../entities/Brick';
import { Ball } from '../entities/Ball';
import { Paddle } from '../entities/Paddle';
import { ParticleSystem } from '../entities/Particle';
import { MathProblems } from '../utils/MathProblems';
import type { ColorScheme } from '../utils/ColorPalette';
import { ColorPalette } from '../utils/ColorPalette';
import type { Game } from '../core/Game';

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É—Ä–æ–≤–Ω—è
 * Open/Closed Principle: –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export abstract class Level {
  protected bricks: Brick[] = [];
  protected ball: Ball;
  protected paddle: Paddle;
  protected particles: ParticleSystem;
  protected score: number = 0;
  protected colorScheme: ColorScheme;
  protected isComplete: boolean = false;

  constructor(protected game: Game) {
    console.log('üöß Level Constructor Called!');
    this.colorScheme = this.initColorScheme();
    this.particles = new ParticleSystem();

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    console.log('üéØ Creating paddle...');
    this.paddle = this.createPaddle();
    console.log('‚öΩ Creating ball...');
    this.ball = this.createBall();
    console.log('üß± Creating bricks...');
    this.bricks = this.createBricks();
    console.log('‚úÖ Level Constructor Complete!');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É —É—Ä–æ–≤–Ω—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  protected abstract initColorScheme(): ColorScheme;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
   */
  abstract getLevelName(): string;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
   */
  abstract getLevelDescription(): string;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
   */
  protected abstract getMathDifficulty(): number;

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∏—Ä–ø–∏—á–µ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
   */
  protected abstract createBricksLayout(): Array<{
    x: number;
    y: number;
    hits: number;
  }>;

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  protected createPaddle(): Paddle {
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã Canvas
    const paddleWidth = Math.max(80, this.game.canvas.width * 0.18);
    const paddleHeight = Math.max(16, this.game.canvas.width * 0.025);
    const paddleX = (this.game.canvas.width - paddleWidth) / 2;

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –í–°–ï–ì–î–ê –≤–∏–¥–Ω–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.innerWidth –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const isMobile = window.innerWidth <= 768;
    const isTablet = window.innerWidth > 768 && window.innerWidth <= 1024;

    let paddleY: number;
    if (isMobile) {
      paddleY = this.game.canvas.height - 60;  // –ú–æ–±–∏–ª—å–Ω—ã–µ: –æ—Ç—Å—Ç—É–ø 60px –æ—Ç –Ω–∏–∑–∞
    } else if (isTablet) {
      paddleY = this.game.canvas.height - 70;  // –ü–ª–∞–Ω—à–µ—Ç—ã: –æ—Ç—Å—Ç—É–ø 70px –æ—Ç –Ω–∏–∑–∞
    } else {
      paddleY = this.game.canvas.height - 80;  // –î–µ—Å–∫—Ç–æ–ø—ã: –æ—Ç—Å—Ç—É–ø 80px –æ—Ç –Ω–∏–∑–∞ - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –í–ò–î–ù–ê!
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    console.log(`üîß Paddle Debug: canvas=${this.game.canvas.width}x${this.game.canvas.height}, window=${window.innerWidth}x${window.innerHeight}, paddleY=${paddleY}`);

    return new Paddle(paddleX, paddleY, paddleWidth, paddleHeight);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º—è—á–∞
   */
  protected createBall(): Ball {
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º—è—á–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    const baseRadius = Math.max(12, Math.min(20, this.game.canvas.width * 0.02));
    const x = this.game.canvas.width / 2 - baseRadius;

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú—è—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const isMobile = window.innerWidth <= 768;
    const isTablet = window.innerWidth > 768 && window.innerWidth <= 1024;

    let y: number;
    if (isMobile) {
      y = this.game.canvas.height - 100;  // –ú–æ–±–∏–ª—å–Ω—ã–µ: –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (60px –æ—Ç –Ω–∏–∑–∞)
    } else if (isTablet) {
      y = this.game.canvas.height - 110;  // –ü–ª–∞–Ω—à–µ—Ç—ã: –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (70px –æ—Ç –Ω–∏–∑–∞)
    } else {
      y = this.game.canvas.height - 120;  // –î–µ—Å–∫—Ç–æ–ø—ã: –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (80px –æ—Ç –Ω–∏–∑–∞)
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    console.log(`‚öΩ Ball Debug: canvas=${this.game.canvas.width}x${this.game.canvas.height}, ballY=${y}`);

    const speed = 0.5; // –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≥–µ–π–º–ø–ª–µ—è

    return new Ball(x, y, baseRadius, speed, this.colorScheme);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∏—Ä–ø–∏—á–µ–π
   */
  protected createBricks(): Brick[] {
    const layout = this.createBricksLayout();
    const difficulty = this.getMathDifficulty();
    const problems = MathProblems.generateSet(layout.length, difficulty);

    return layout.map((brick, index) => {
      // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∏—Ä–ø–∏—á–µ–π
      const brickWidth = Math.max(60, this.canvasWidth * 0.14);
      const brickHeight = Math.max(24, this.canvasWidth * 0.03);

      return new Brick(
        brick.x,
        brick.y,
        brickWidth,
        brickHeight,
        problems[index],
        this.colorScheme,
        brick.hits
      );
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∫–∏—Ä–ø–∏—á–∞
   */
  protected onBrickDestroyed(brick: Brick): void {
    const center = brick.getCenter();
    this.particles.createExplosion(
      center.x,
      center.y,
      12,
      this.colorScheme.particle,
      0.4
    );

    this.score += brick.getPoints();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if (this.bricks.filter((b) => b.active).length === 0) {
      this.isComplete = true;
    }
  }

  /**
   * –ì–µ—Ç—Ç–µ—Ä—ã
   */
  getBricks(): Brick[] {
    return this.bricks;
  }

  getBall(): Ball {
    return this.ball;
  }

  getPaddle(): Paddle {
    return this.paddle;
  }

  getParticles(): ParticleSystem {
    return this.particles;
  }

  getScore(): number {
    return this.score;
  }

  public getColorScheme(): ColorScheme {
    return this.colorScheme;
  }

  isLevelComplete(): boolean {
    return this.isComplete;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
   */
  update(deltaTime: number): void {
    this.paddle.update(deltaTime);
    this.ball.update(deltaTime);
    this.bricks.forEach((brick) => brick.update(deltaTime));
    this.particles.update(deltaTime);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ —É—Ä–æ–≤–Ω—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
   */
  protected renderBackground(ctx: CanvasRenderingContext2D): void {
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    const gradient = ctx.createLinearGradient(
      0,
      0,
      0,
      this.game.canvas.height
    );
    gradient.addColorStop(0, this.colorScheme.background);
    gradient.addColorStop(1, ColorPalette.withAlpha(this.colorScheme.primary, 0.3));

    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, this.game.canvas.width, this.game.canvas.height);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è
   */
  render(ctx: CanvasRenderingContext2D): void {
    console.log('üé® Level Render Called!');
    this.renderBackground(ctx);
    this.bricks.forEach((brick) => brick.render(ctx));
    this.particles.render(ctx);
    console.log('üéØ Rendering paddle...');
    this.paddle.render(ctx);
    console.log('‚öΩ Rendering ball...');
    this.ball.render(ctx);
    console.log('‚úÖ Level Render Complete!');
  }

  /**
   * –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è
   */
  reset(): void {
    this.score = 0;
    this.isComplete = false;
    this.bricks = this.createBricks();
    this.particles.clear();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º—è—á —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    const radius = this.ball.radius;
    const x = this.game.canvas.width / 2 - radius;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    const isMobile = window.innerWidth <= 768;
    const isTablet = window.innerWidth > 768 && window.innerWidth <= 1024;

    let y: number;
    if (isMobile) {
      y = this.game.canvas.height - 100;  // –ú–æ–±–∏–ª—å–Ω—ã–µ: –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (60px –æ—Ç –Ω–∏–∑–∞)
    } else if (isTablet) {
      y = this.game.canvas.height - 110;  // –ü–ª–∞–Ω—à–µ—Ç—ã: –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (70px –æ—Ç –Ω–∏–∑–∞)
    } else {
      y = this.game.canvas.height - 120;  // –î–µ—Å–∫—Ç–æ–ø—ã: –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (80px –æ—Ç –Ω–∏–∑–∞)
    }

    this.ball.reset(x, y);
  }
}

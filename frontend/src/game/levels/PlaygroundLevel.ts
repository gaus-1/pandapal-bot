import { Level } from './Level';
import type { ColorScheme } from '../utils/ColorPalette';
import { ColorPalette } from '../utils/ColorPalette';

/**
 * –£—Ä–æ–≤–µ–Ω—å 4: –®–∫–æ–ª—å–Ω—ã–π –¥–≤–æ—Ä üå≥
 *
 * –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è:
 * - –ù–∞—á–∞–ª–æ: –≠–Ω–µ—Ä–≥–∏—è (–º–Ω–æ–≥–æ –∏–≥—Ä—É—à–µ–∫)
 * - –°–µ—Ä–µ–¥–∏–Ω–∞: –ò–≥—Ä–∞ (–≤–µ—Å–µ–ª–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
 * - –ö–æ–Ω–µ—Ü: –ü–æ—Ä—è–¥–æ–∫ (–≤—Å–µ —É–±—Ä–∞–Ω–æ)
 */
export class PlaygroundLevel extends Level {
  protected initColorScheme(): ColorScheme {
    return ColorPalette.PLAYGROUND;
  }

  getLevelName(): string {
    return '–®–∫–æ–ª—å–Ω—ã–π –¥–≤–æ—Ä';
  }

  getLevelDescription(): string {
    return '–£–±–µ—Ä–∏ –∏–≥—Ä—É—à–∫–∏ –ø–æ—Å–ª–µ –∏–≥—Ä—ã!';
  }

  protected getMathDifficulty(): number {
    return 4; // –°–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
  }

  /**
   * –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ –¥–µ—Ä–µ–≤–∞
   */
  protected createBricksLayout(): Array<{ x: number; y: number; hits: number }> {
    const bricks: Array<{ x: number; y: number; hits: number }> = [];
    const brickWidth = this.canvasWidth * 0.12;
    const brickHeight = 30;
    const padding = 10;
    const offsetY = 60;

    // –ö—Ä–æ–Ω–∞ –¥–µ—Ä–µ–≤–∞ (5 —Ä—è–¥–æ–≤)
    const rowsConfig = [3, 5, 6, 5, 4];

    rowsConfig.forEach((count, row) => {
      const offsetX = (this.canvasWidth - (brickWidth + padding) * count) / 2;

      for (let col = 0; col < count; col++) {
        bricks.push({
          x: offsetX + col * (brickWidth + padding),
          y: offsetY + row * (brickHeight + padding),
          hits: row >= 3 ? 2 : 1,
        });
      }
    });

    // "–°—Ç–≤–æ–ª" –¥–µ—Ä–µ–≤–∞ (1 –∫–∏—Ä–ø–∏—á –ø–æ —Ü–µ–Ω—Ç—Ä—É)
    const centerX = (this.canvasWidth - brickWidth) / 2;
    bricks.push({
      x: centerX,
      y: offsetY + 5 * (brickHeight + padding),
      hits: 3,
    });

    return bricks;
  }

  protected renderBackground(ctx: CanvasRenderingContext2D): void {
    super.renderBackground(ctx);

    // –ù–µ–±–æ —Å –æ–±–ª–∞–∫–∞–º–∏
    ctx.fillStyle = ColorPalette.withAlpha('#FFFFFF', 0.3);

    // –û–±–ª–∞–∫–∞
    const drawCloud = (x: number, y: number, scale: number) => {
      ctx.beginPath();
      ctx.arc(x, y, 20 * scale, 0, Math.PI * 2);
      ctx.arc(x + 25 * scale, y, 25 * scale, 0, Math.PI * 2);
      ctx.arc(x + 50 * scale, y, 20 * scale, 0, Math.PI * 2);
      ctx.fill();
    };

    drawCloud(100, 80, 0.8);
    drawCloud(this.canvasWidth - 150, 120, 1);
    drawCloud(this.canvasWidth / 2, 60, 0.6);

    // –¢—Ä–∞–≤–∞ –≤–Ω–∏–∑—É
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.secondary, 0.3);
    ctx.beginPath();
    ctx.moveTo(0, this.canvasHeight - 80);
    for (let i = 0; i < this.canvasWidth; i += 20) {
      ctx.lineTo(i, this.canvasHeight - 80 + Math.sin(i * 0.1) * 5);
    }
    ctx.lineTo(this.canvasWidth, this.canvasHeight);
    ctx.lineTo(0, this.canvasHeight);
    ctx.closePath();
    ctx.fill();

    // –ö–∞—á–µ–ª–∏ (—Å–∏–ª—É—ç—Ç)
    const swingX = 100;
    const swingY = this.canvasHeight - 150;

    ctx.strokeStyle = ColorPalette.withAlpha(this.colorScheme.accent, 0.4);
    ctx.lineWidth = 4;

    // –°—Ç–æ–π–∫–∏
    ctx.beginPath();
    ctx.moveTo(swingX, swingY);
    ctx.lineTo(swingX + 60, swingY - 60);
    ctx.moveTo(swingX + 120, swingY);
    ctx.lineTo(swingX + 60, swingY - 60);
    ctx.stroke();

    // –°–∏–¥–µ–Ω—å–µ
    ctx.beginPath();
    ctx.moveTo(swingX + 40, swingY - 20);
    ctx.lineTo(swingX + 40, swingY);
    ctx.moveTo(swingX + 80, swingY - 20);
    ctx.lineTo(swingX + 80, swingY);
    ctx.stroke();

    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.primary, 0.5);
    ctx.fillRect(swingX + 30, swingY, 60, 10);

    // –ù–∞–∑–≤–∞–Ω–∏–µ
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.text, 0.25);
    ctx.font = 'bold 36px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–î–í–û–†', this.canvasWidth / 2, this.canvasHeight - 30);
  }
}

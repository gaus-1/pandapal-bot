import { Level } from './Level';
import type { ColorScheme } from '../utils/ColorPalette';
import { ColorPalette } from '../utils/ColorPalette';
import type { Game } from '../core/Game';

/**
 * –£—Ä–æ–≤–µ–Ω—å 3: –°—Ç–æ–ª–æ–≤–∞—è üçé
 *
 * –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è:
 * - –ù–∞—á–∞–ª–æ: –ì–æ–ª–æ–¥ (–ø—É—Å—Ç–æ–π –ø–æ–¥–Ω–æ—Å)
 * - –°–µ—Ä–µ–¥–∏–Ω–∞: –†–∞–¥–æ—Å—Ç—å (—Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–π –æ–±–µ–¥)
 * - –ö–æ–Ω–µ—Ü: –°—ã—Ç–æ—Å—Ç—å (–ø–æ–ª–Ω—ã–π –ø–æ–¥–Ω–æ—Å, –¥–æ–≤–æ–ª—å–Ω–∞—è –ø–∞–Ω–¥–∞)
 */
export class CanteenLevel extends Level {
  constructor(game: Game) {
    super(game);
  }
  protected initColorScheme(): ColorScheme {
    return ColorPalette.CANTEEN;
  }

  getLevelName(): string {
    return '–°—Ç–æ–ª–æ–≤–∞—è';
  }

  getLevelDescription(): string {
    return '–°–æ–±–µ—Ä–∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ–±–µ–¥!';
  }

  protected getMathDifficulty(): number {
    return 3; // –°–ª–æ–∂–Ω–µ–µ
  }

  /**
   * –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ –ø–∏—Ä–∞–º–∏–¥—ã –µ–¥—ã
   */
  protected createBricksLayout(): Array<{ x: number; y: number; hits: number }> {
    const bricks: Array<{ x: number; y: number; hits: number }> = [];
    const brickWidth = this.canvasWidth * 0.12;
    const brickHeight = 30;
    const padding = 10;
    const offsetY = 70;

    // 5 —Ä—è–¥–æ–≤ –≤ —Ñ–æ—Ä–º–µ –ø–∏—Ä–∞–º–∏–¥—ã
    const rowsConfig = [5, 6, 5, 4, 3];

    rowsConfig.forEach((count, row) => {
      const offsetX = (this.canvasWidth - (brickWidth + padding) * count) / 2;

      for (let col = 0; col < count; col++) {
        bricks.push({
          x: offsetX + col * (brickWidth + padding),
          y: offsetY + row * (brickHeight + padding),
          hits: row >= 3 ? 2 : 1,
        });
      }
    });

    return bricks;
  }

  protected renderBackground(ctx: CanvasRenderingContext2D): void {
    super.renderBackground(ctx);

    // –°—Ç–æ–ª—ã
    for (let i = 0; i < 2; i++) {
      const x = 150 + i * 250;
      const y = this.canvasHeight - 140;

      ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.primary, 0.15);
      ctx.beginPath();
      ctx.ellipse(x, y, 60, 40, 0, 0, Math.PI * 2);
      ctx.fill();

      // –°—Ç—É–ª—å—è
      for (let j = 0; j < 2; j++) {
        ctx.beginPath();
        ctx.arc(x - 40 + j * 80, y, 15, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    // –ú–µ–Ω—é –Ω–∞ —Å—Ç–µ–Ω–µ
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.secondary, 0.2);
    ctx.fillRect(this.canvasWidth - 150, 50, 120, 160);
    ctx.strokeStyle = this.colorScheme.text;
    ctx.lineWidth = 2;
    ctx.strokeRect(this.canvasWidth - 150, 50, 120, 160);

    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.text, 0.3);
    ctx.font = 'bold 20px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–ú–ï–ù–Æ', this.canvasWidth - 90, 80);

    // –ù–∞–∑–≤–∞–Ω–∏–µ
    ctx.font = 'bold 40px Arial';
    ctx.fillStyle = ColorPalette.withAlpha(this.colorScheme.text, 0.2);
    ctx.fillText('–°–¢–û–õ–û–í–ê–Ø', this.canvasWidth / 2, this.canvasHeight - 30);
  }
}

/**
 * –ò–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PandaPal Go
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
 *
 * @module components/GameUI
 */

import React, { useState, useEffect } from 'react';
import { useGameStore } from '../stores/gameStore';
import { GameUtils } from '../utils/gameMath';

/**
 * –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
interface GameUIProps {
  /** –í–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */
  visible?: boolean;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã */
  onClose?: () => void;
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã */
  onPause?: () => void;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
const GameStats: React.FC = React.memo(() => {
  const { stats } = useGameStore();
  const [showDetails, setShowDetails] = useState(false);

  const levelProgress = GameUtils.getLevelProgress(stats.experience, stats.level);

  return (
    <div className="bg-white/90 backdrop-blur rounded-lg p-4 shadow-lg">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-lg font-bold text-gray-800">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <button
          onClick={() => setShowDetails(!showDetails)}
          className="text-blue-600 hover:text-blue-800 text-sm"
        >
          {showDetails ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
        </button>
      </div>

      <div className="grid grid-cols-2 gap-4">
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
        <div className="space-y-2">
          <div className="flex items-center gap-2">
            <span className="text-2xl">‚≠ê</span>
            <div>
              <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å</div>
              <div className="font-bold text-lg">{stats.level}</div>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <span className="text-2xl">ü™ô</span>
            <div>
              <div className="text-sm text-gray-600">–ú–æ–Ω–µ—Ç—ã</div>
              <div className="font-bold text-lg">{stats.coins}</div>
            </div>
          </div>
        </div>

        <div className="space-y-2">
          <div className="flex items-center gap-2">
            <span className="text-2xl">üìä</span>
            <div>
              <div className="text-sm text-gray-600">–û—á–∫–∏</div>
              <div className="font-bold text-lg">{stats.score}</div>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <span className="text-2xl">üéØ</span>
            <div>
              <div className="text-sm text-gray-600">–û–ø—ã—Ç</div>
              <div className="font-bold text-lg">{stats.experience}</div>
            </div>
          </div>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è */}
      <div className="mt-4">
        <div className="flex justify-between text-sm text-gray-600 mb-1">
          <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —É—Ä–æ–≤–Ω—è {stats.level + 1}</span>
          <span>{Math.round(levelProgress * 100)}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300"
            style={{ width: `${levelProgress * 100}%` }}
          />
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {showDetails && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="text-sm text-gray-600">
            <div className="grid grid-cols-2 gap-2">
              <div>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {stats.achievements.length}</div>
              <div>–í—Ä–µ–º—è –∏–≥—Ä—ã: 0:00</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
});

GameStats.displayName = 'GameStats';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
const GameControls: React.FC<GameUIProps> = React.memo(({ onPause }) => {
  const { settings, toggleSound } = useGameStore();

  return (
    <div className="bg-white/90 backdrop-blur rounded-lg p-4 shadow-lg">
      <h3 className="text-lg font-bold text-gray-800 mb-3">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>

      <div className="space-y-3">
        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º */}
        <div>
          <h4 className="text-sm font-semibold text-gray-700 mb-2">–î–≤–∏–∂–µ–Ω–∏–µ</h4>
          <div className="grid grid-cols-2 gap-2 text-sm text-gray-600">
            <div>WASD / –°—Ç—Ä–µ–ª–∫–∏ - –î–≤–∏–∂–µ–Ω–∏–µ</div>
            <div>Shift - –ë–µ–≥</div>
          </div>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div>
          <h4 className="text-sm font-semibold text-gray-700 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
          <div className="space-y-2">
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={settings.soundEnabled}
                onChange={toggleSound}
                className="rounded"
              />
              <span className="text-sm">–ó–≤—É–∫</span>
            </label>
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex gap-2">
          <button
            onClick={onPause}
            className="flex-1 bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-2 rounded text-sm font-medium transition-colors"
          >
            ‚è∏Ô∏è –ü–∞—É–∑–∞
          </button>
        </div>
      </div>
    </div>
  );
});

GameControls.displayName = 'GameControls';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–¥—ã
 */
const PandaStatus: React.FC = React.memo(() => {
  const { panda } = useGameStore();

  const getStatusColor = (value: number) => {
    if (value > 80) return 'text-green-600';
    if (value > 50) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getStatusEmoji = (value: number) => {
    if (value > 80) return 'üòä';
    if (value > 50) return 'üòê';
    return 'üòû';
  };

  return (
    <div className="bg-white/90 backdrop-blur rounded-lg p-4 shadow-lg">
      <h3 className="text-lg font-bold text-gray-800 mb-3">–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–¥—ã</h3>

      <div className="space-y-3">
        {/* –ó–¥–æ—Ä–æ–≤—å–µ */}
        <div>
          <div className="flex justify-between items-center mb-1">
            <span className="text-sm text-gray-600">‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</span>
            <span className={`text-sm font-medium ${getStatusColor(panda.health)}`}>
              {panda.health}%
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-red-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${panda.health}%` }}
            />
          </div>
        </div>

        {/* –°—á–∞—Å—Ç—å–µ */}
        <div>
          <div className="flex justify-between items-center mb-1">
            <span className="text-sm text-gray-600">üòä –°—á–∞—Å—Ç—å–µ</span>
            <span className={`text-sm font-medium ${getStatusColor(panda.happiness)}`}>
              {panda.happiness}%
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-yellow-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${panda.happiness}%` }}
            />
          </div>
        </div>

        {/* –≠–Ω–µ—Ä–≥–∏—è */}
        <div>
          <div className="flex justify-between items-center mb-1">
            <span className="text-sm text-gray-600">‚ö° –≠–Ω–µ—Ä–≥–∏—è</span>
            <span className={`text-sm font-medium ${getStatusColor(panda.energy)}`}>
              {panda.energy}%
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${panda.energy}%` }}
            />
          </div>
        </div>

        {/* –¢–µ–∫—É—â–∞—è –∞–Ω–∏–º–∞—Ü–∏—è */}
        <div className="pt-2 border-t border-gray-200">
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-600">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
            <span className="text-sm font-medium">
              {getStatusEmoji(panda.happiness)} {panda.animation}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
});

PandaStatus.displayName = 'PandaStatus';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
export const GameUI: React.FC<GameUIProps> = React.memo(({
  visible = true,
  onClose,
  onPause,
}) => {
  const { gameState } = useGameStore();
  const [showHelp, setShowHelp] = useState(false);

  if (!visible) return null;

  return (
    <div className="fixed inset-0 pointer-events-none z-50">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
      <div className="absolute top-4 left-4 pointer-events-auto">
        <GameStats />
      </div>

      <div className="absolute top-4 right-4 pointer-events-auto">
        <GameControls onPause={onPause} />
      </div>

      <div className="absolute bottom-4 left-4 pointer-events-auto">
        <PandaStatus />
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã */}
      <div className="absolute top-4 left-1/2 transform -translate-x-1/2 pointer-events-auto">
        <div className="bg-white/90 backdrop-blur rounded-lg px-6 py-3 shadow-lg">
          <h1 className="text-2xl font-bold text-gray-800 text-center">
            üêº PandaPal Go
          </h1>
          <p className="text-sm text-gray-600 text-center">
            {gameState === 'playing' ? '–ò–≥—Ä–∞ –∏–¥–µ—Ç' :
             gameState === 'paused' ? '–ü–∞—É–∑–∞' :
             gameState === 'loading' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
          </p>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
      {onClose && (
        <div className="absolute top-4 right-4 pointer-events-auto">
          <button
            onClick={onClose}
            className="bg-red-500 hover:bg-red-600 text-white p-2 rounded-full shadow-lg transition-colors"
            title="–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É"
          >
            ‚úï
          </button>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ */}
      <div className="absolute bottom-4 right-4 pointer-events-auto">
        <button
          onClick={() => setShowHelp(!showHelp)}
          className="bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-full shadow-lg transition-colors"
          title="–ü–æ–º–æ—â—å"
        >
          ‚ùì
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–º–æ—â–∏ */}
      {showHelp && (
        <div className="absolute inset-0 bg-black/50 flex items-center justify-center pointer-events-auto">
          <div className="bg-white rounded-lg p-6 max-w-md mx-4 shadow-xl">
            <h3 className="text-xl font-bold text-gray-800 mb-4">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?</h3>

            <div className="space-y-3 text-sm text-gray-600">
              <div>
                <strong>–î–≤–∏–∂–µ–Ω–∏–µ:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WASD –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–∞–Ω–¥—ã –ø–æ –º–∏—Ä—É.
              </div>
              <div>
                <strong>–ë–µ–≥:</strong> –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Shift –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.
              </div>
              <div>
                <strong>–°–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</strong> –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º, —á—Ç–æ–±—ã –∏—Ö —Å–æ–±—Ä–∞—Ç—å.
              </div>
              <div>
                <strong>–ë–∞–º–±—É–∫:</strong> –î–∞–µ—Ç –æ–ø—ã—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–∞–Ω–¥—ã.
              </div>
              <div>
                <strong>–ú–æ–Ω–µ—Ç—ã:</strong> –î–∞—é—Ç –æ—á–∫–∏ –∏ –æ–ø—ã—Ç.
              </div>
              <div>
                <strong>–¶–µ–ª—å:</strong> –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –º–∏—Ä, —Å–æ–±–∏—Ä–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –ø–∞–Ω–¥–µ!
              </div>
            </div>

            <button
              onClick={() => setShowHelp(false)}
              className="w-full mt-4 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded font-medium transition-colors"
            >
              –ü–æ–Ω—è—Ç–Ω–æ!
            </button>
          </div>
        </div>
      )}
    </div>
  );
});

GameUI.displayName = 'GameUI';

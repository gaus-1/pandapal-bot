import { Level } from '../levels/Level';
import { GymLevel } from '../levels/GymLevel';
import { ClassroomLevel } from '../levels/ClassroomLevel';
import { CanteenLevel } from '../levels/CanteenLevel';
import { PlaygroundLevel } from '../levels/PlaygroundLevel';
import { LibraryLevel } from '../levels/LibraryLevel';
import { CollisionDetector } from '../physics/Collision';
import { GameStateManager, GameStatus } from './GameState';
import { PandaMessages } from '../utils/PandaMessages';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
 * Single Responsibility: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º —Ü–∏–∫–ª–æ–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
 */
export class Game {
  private canvas: HTMLCanvasElement;
  private ctx: CanvasRenderingContext2D;
  private levels: Level[];
  private currentLevel: Level | null = null;
  private stateManager: GameStateManager;
  private lastTime: number = 0;
  private animationId: number | null = null;
  private isRunning: boolean = false;

  constructor(canvas: HTMLCanvasElement) {
    this.canvas = canvas;
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      throw new Error('Failed to get 2D context');
    }
    this.ctx = ctx;

    this.stateManager = new GameStateManager();
    this.levels = this.initializeLevels();

    this.setupEventListeners();
    this.resize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
   */
  private initializeLevels(): Level[] {
    const width = this.canvas.width;
    const height = this.canvas.height;

    return [
      new GymLevel(width, height),
      new ClassroomLevel(width, height),
      new CanteenLevel(width, height),
      new PlaygroundLevel(width, height),
      new LibraryLevel(width, height),
    ];
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–±–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
   */
  private setupEventListeners(): void {
    // –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ (–¥–µ—Å–∫—Ç–æ–ø)
    this.canvas.addEventListener('mousemove', (e) => {
      if (this.stateManager.getStatus() === GameStatus.PLAYING && this.currentLevel) {
        const rect = this.canvas.getBoundingClientRect();
        const scaleX = this.canvas.width / rect.width;
        const x = (e.clientX - rect.left) * scaleX;
        this.currentLevel.getPaddle().setTargetX(x, this.canvas.width);
      }
    });

    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–∞—á-—Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    let isTouching = false;

    this.canvas.addEventListener('touchstart', (e) => {
      e.preventDefault();
      isTouching = true;

      const rect = this.canvas.getBoundingClientRect();
      const touch = e.touches[0];
      const scaleX = this.canvas.width / rect.width;
      const x = (touch.clientX - rect.left) * scaleX;

      if (this.stateManager.getStatus() === GameStatus.PLAYING && this.currentLevel) {
        this.currentLevel.getPaddle().setTargetX(x, this.canvas.width);
      } else if (this.stateManager.getStatus() === GameStatus.MENU) {
        this.startGame();
      } else if (this.stateManager.getStatus() === GameStatus.PAUSED) {
        this.togglePause();
      }
    }, { passive: false });

    this.canvas.addEventListener('touchmove', (e) => {
      e.preventDefault();
      if (isTouching && this.stateManager.getStatus() === GameStatus.PLAYING && this.currentLevel) {
        const rect = this.canvas.getBoundingClientRect();
        const touch = e.touches[0];
        const scaleX = this.canvas.width / rect.width;
        const x = (touch.clientX - rect.left) * scaleX;
        this.currentLevel.getPaddle().setTargetX(x, this.canvas.width);
      }
    }, { passive: false });

    this.canvas.addEventListener('touchend', (e) => {
      e.preventDefault();
      isTouching = false;
    }, { passive: false });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–≥—Ä–µ
    this.canvas.addEventListener('touchcancel', (e) => {
      e.preventDefault();
      isTouching = false;
    }, { passive: false });

    // –ö–ª–∏–∫ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ (—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã –∏ –ø–∞—É–∑–∞)
    this.canvas.addEventListener('click', (e) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–∫ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –∫–∞—Å–∞–Ω–∏–µ
      if (e.detail === 0) return; // –≠—Ç–æ –±—ã–ª –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫ –æ—Ç touch —Å–æ–±—ã—Ç–∏—è

      const status = this.stateManager.getStatus();
      if (status === GameStatus.MENU) {
        this.startGame();
      } else if (status === GameStatus.PAUSED) {
        this.togglePause();
      }
    });

    // –ü–∞—É–∑–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
    window.addEventListener('keydown', (e) => {
      if (e.code === 'Space') {
        e.preventDefault();
        this.togglePause();
      }
    });

    // –†–µ—Å–∞–π–∑ –æ–∫–Ω–∞
    window.addEventListener('resize', () => this.resize());
  }

  /**
   * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ—Å–∞–π–∑ canvas —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  private resize(): void {
    const container = this.canvas.parentElement;
    if (!container) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const isMobile = window.innerWidth <= 768;
    const isTablet = window.innerWidth <= 1024;

    let targetWidth: number;
    let targetHeight: number;

    if (isMobile) {
      // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
      targetWidth = Math.min(container.clientWidth - 32, 400); // 32px –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
      targetHeight = Math.min(targetWidth * 1.6, window.innerHeight * 0.7); // 16:10 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    } else if (isTablet) {
      // –ü–ª–∞–Ω—à–µ—Ç—ã
      targetWidth = Math.min(container.clientWidth - 48, 800);
      targetHeight = Math.min(targetWidth * 0.75, window.innerHeight * 0.8);
    } else {
      // –î–µ—Å–∫—Ç–æ–ø - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–∞
      targetWidth = Math.min(container.clientWidth - 64, 1200);
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É 70% –æ—Ç –≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
      targetHeight = Math.min(targetWidth * 0.75, window.innerHeight * 0.7);
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä—ã canvas
    console.log(`üéÆ CANVAS DEBUG: targetWidth=${targetWidth}, targetHeight=${targetHeight}, window=${window.innerWidth}x${window.innerHeight}`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    this.canvas.width = targetWidth;
    this.canvas.height = targetHeight;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —á–µ—Ç–∫–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
    const devicePixelRatio = window.devicePixelRatio || 1;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    this.canvas.width = targetWidth * devicePixelRatio;
    this.canvas.height = targetHeight * devicePixelRatio;

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    this.canvas.style.width = targetWidth + 'px';
    this.canvas.style.height = targetHeight + 'px';

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    this.ctx.scale(devicePixelRatio, devicePixelRatio);

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    if (this.currentLevel) {
      const levelIndex = this.stateManager.getCurrentLevel();
      this.levels = this.initializeLevels();
      this.currentLevel = this.levels[levelIndex];
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
   */
  start(): void {
    if (this.isRunning) return;

    this.stateManager.startNewGame();
    this.currentLevel = this.levels[0];
    this.isRunning = true;
    this.lastTime = performance.now();
    this.gameLoop(this.lastTime);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  startGame(): void {
    this.start();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
   */
  stop(): void {
    this.isRunning = false;
    if (this.animationId !== null) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }

  /**
   * –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
   */
  togglePause(): void {
    if (this.stateManager.getStatus() === GameStatus.PLAYING ||
        this.stateManager.getStatus() === GameStatus.PAUSED) {
      this.stateManager.togglePause();
    }
  }

  /**
   * –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
   */
  nextLevel(): void {
    this.stateManager.nextLevel();
    const levelIndex = this.stateManager.getCurrentLevel();

    if (levelIndex < this.levels.length) {
      this.currentLevel = this.levels[levelIndex];
      this.stateManager.setStatus(GameStatus.PLAYING);
    }
  }

  /**
   * –†–µ—Å—Ç–∞—Ä—Ç —É—Ä–æ–≤–Ω—è
   */
  restartLevel(): void {
    if (this.currentLevel) {
      this.currentLevel.reset();
      this.stateManager.setStatus(GameStatus.PLAYING);
    }
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
   */
  private gameLoop(currentTime: number): void {
    if (!this.isRunning) return;

    const deltaTime = currentTime - this.lastTime;
    this.lastTime = currentTime;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    this.update(deltaTime);
    this.render();

    // –°–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
    this.animationId = requestAnimationFrame((time) => this.gameLoop(time));
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
   */
  private update(deltaTime: number): void {
    const status = this.stateManager.getStatus();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (status !== GameStatus.PLAYING || !this.currentLevel) {
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    this.currentLevel.update(deltaTime);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    this.checkCollisions();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if (this.currentLevel.isLevelComplete()) {
      const score = this.currentLevel.getScore();
      this.stateManager.completeLevel(score);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—é –º—è—á–∞
    const ball = this.currentLevel.getBall();
    if (ball.y > this.canvas.height) {
      this.stateManager.loseLife();
      if (this.stateManager.getLives() > 0) {
        this.restartLevel();
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
   */
  private checkCollisions(): void {
    if (!this.currentLevel) return;

    const ball = this.currentLevel.getBall();
    const paddle = this.currentLevel.getPaddle();
    const bricks = this.currentLevel.getBricks();
    const particles = this.currentLevel.getParticles();

    // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–Ω–∞–º–∏
    const walls = CollisionDetector.checkBallWalls(
      ball,
      this.canvas.width,
      this.canvas.height
    );

    if (walls.left || walls.right) {
      ball.bounceX();
    }

    if (walls.top) {
      ball.bounceY();
    }

    // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
    const paddleCollision = CollisionDetector.checkBallPaddle(ball, paddle);
    if (paddleCollision.collided) {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ)
      CollisionDetector.separateBallFromPaddle(ball, paddle);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–æ–∫–∞ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      CollisionDetector.resolveBallPaddleCollision(ball, paddle);
      ball.increaseSpeed(1.02); // –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä—è–µ–º –º—è—á
    }

    // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∫–∏—Ä–ø–∏—á–∞–º–∏
    for (const brick of bricks) {
      if (!brick.active) continue;

      const brickCollision = CollisionDetector.checkBallBrick(ball, brick);
      if (brickCollision.collided && brickCollision.normal) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ)
        CollisionDetector.separateBallFromBrick(ball, brick);

        // –û—Ç—Å–∫–æ–∫ –æ—Ç –∫–∏—Ä–ø–∏—á–∞
        CollisionDetector.resolveBallCollision(ball, brickCollision.normal);

        const destroyed = brick.hit();
        if (destroyed) {
          // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
          const center = brick.getCenter();
          const colorScheme = this.currentLevel.getColorScheme();
          particles.createExplosion(
            center.x,
            center.y,
            15,
            colorScheme.particle,
            0.5
          );
        }

        // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –∑–∞ –∫–∞–¥—Ä
        break;
      }
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞
   */
  private render(): void {
    // –û—á–∏—Å—Ç–∫–∞ canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    const status = this.stateManager.getStatus();

    if (status === GameStatus.MENU) {
      this.renderMenu();
    } else if (status === GameStatus.PLAYING || status === GameStatus.PAUSED) {
      this.renderGame();
      if (status === GameStatus.PAUSED) {
        this.renderPause();
      }
    } else if (status === GameStatus.LEVEL_COMPLETE) {
      this.renderLevelComplete();
    } else if (status === GameStatus.TRANSITION) {
      this.renderLevelTransition();
    } else if (status === GameStatus.GAME_OVER) {
      this.renderGameOver();
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
   */
  private renderGame(): void {
    if (!this.currentLevel) return;

    // –†–µ–Ω–¥–µ—Ä–∏–º —É—Ä–æ–≤–µ–Ω—å
    this.currentLevel.render(this.ctx);

    // –†–µ–Ω–¥–µ—Ä–∏–º UI
    this.renderUI();
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
   */
  private renderUI(): void {
    const state = this.stateManager.getState();
    const isMobile = window.innerWidth <= 768;
    const baseFontSize = isMobile ? Math.max(16, this.canvas.width * 0.04) : Math.max(20, this.canvas.width * 0.025);

    // –§–æ–Ω –¥–ª—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
    this.ctx.fillRect(0, 0, this.canvas.width, 60);

    // –û—á–∫–∏
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = `bold ${baseFontSize}px Arial`;
    this.ctx.textAlign = 'left';
    this.ctx.fillText(`–û—á–∫–∏: ${state.totalScore}`, 15, 35);

    // –ñ–∏–∑–Ω–∏
    this.ctx.textAlign = 'right';
    this.ctx.fillText(`‚ù§Ô∏è ${state.lives}`, this.canvas.width - 15, 35);

    // –£—Ä–æ–≤–µ–Ω—å
    this.ctx.textAlign = 'center';
    this.ctx.font = `bold ${baseFontSize * 0.9}px Arial`;
    this.ctx.fillStyle = '#FFD700';
    this.ctx.fillText(
      `–£—Ä–æ–≤–µ–Ω—å ${state.currentLevel + 1}/${state.totalLevels}`,
      this.canvas.width / 2,
      35
    );
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
   */
  private renderMenu(): void {
    const isMobile = window.innerWidth <= 768;

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = this.ctx.createLinearGradient(
      0,
      0,
      0,
      this.canvas.height
    );
    gradient.addColorStop(0, '#E8F4F8');
    gradient.addColorStop(1, '#A8D8EA');
    this.ctx.fillStyle = gradient;
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
    const titleFontSize = isMobile ? Math.max(32, this.canvas.width * 0.08) : Math.max(48, this.canvas.width * 0.06);
    const subtitleFontSize = isMobile ? Math.max(18, this.canvas.width * 0.045) : Math.max(24, this.canvas.width * 0.03);
    const buttonFontSize = isMobile ? Math.max(20, this.canvas.width * 0.05) : Math.max(28, this.canvas.width * 0.035);

    // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
    this.ctx.fillStyle = '#2D3748';
    this.ctx.font = `bold ${titleFontSize}px Arial`;
    this.ctx.textAlign = 'center';
    this.ctx.fillText('üéÆ PandaPal Go', this.canvas.width / 2, this.canvas.height / 3);

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.ctx.font = `${subtitleFontSize}px Arial`;
    this.ctx.fillStyle = '#4A5568';
    this.ctx.fillText(
      '–®–∫–æ–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
      this.canvas.width / 2,
      this.canvas.height / 3 + (isMobile ? 40 : 50)
    );

    // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    const buttonWidth = isMobile ? this.canvas.width * 0.7 : 200;
    const buttonHeight = isMobile ? 50 : 60;
    const buttonX = this.canvas.width / 2 - buttonWidth / 2;
    const buttonY = this.canvas.height / 2;

    this.ctx.fillStyle = '#48BB78';
    this.ctx.beginPath();
    this.ctx.roundRect(buttonX, buttonY, buttonWidth, buttonHeight, 10);
    this.ctx.fill();

    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = `bold ${buttonFontSize}px Arial`;
    this.ctx.fillText('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', this.canvas.width / 2, buttonY + buttonHeight / 2 + 8);

    // –†–µ–∫–æ—Ä–¥
    const highScore = this.stateManager.getHighScore();
    if (highScore > 0) {
      this.ctx.fillStyle = '#718096';
      this.ctx.font = `${Math.max(16, this.canvas.width * 0.025)}px Arial`;
      this.ctx.fillText(
        `üèÜ –†–µ–∫–æ—Ä–¥: ${highScore}`,
        this.canvas.width / 2,
        buttonY + buttonHeight + 40
      );
    }

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
    this.ctx.fillStyle = '#4A5568';
    const hintFontSize = isMobile ? Math.max(14, this.canvas.width * 0.035) : Math.max(18, this.canvas.width * 0.022);
    this.ctx.font = `${hintFontSize}px Arial`;

    const startY = buttonY + buttonHeight + (highScore > 0 ? 80 : 40);
    const lineHeight = isMobile ? 25 : 30;

    if (isMobile) {
      this.ctx.fillText(
        'üì± –î–≤–∏–≥–∞–π –ø–∞–ª—å—Ü–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        this.canvas.width / 2,
        startY
      );
      this.ctx.fillText(
        '‚è∏Ô∏è –¢–∞–ø –¥–ª—è –ø–∞—É–∑—ã',
        this.canvas.width / 2,
        startY + lineHeight
      );
    } else {
      this.ctx.fillText(
        'üíª –ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: –¥–≤–∏–≥–∞–π –º—ã—à—å—é',
        this.canvas.width / 2,
        startY
      );
      this.ctx.fillText(
        'üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ: –¥–≤–∏–≥–∞–π –ø–∞–ª—å—Ü–µ–º',
        this.canvas.width / 2,
        startY + lineHeight
      );
      this.ctx.fillText(
        '‚è∏Ô∏è –ü—Ä–æ–±–µ–ª –∏–ª–∏ —Ç–∞–ø - –ø–∞—É–∑–∞',
        this.canvas.width / 2,
        startY + lineHeight * 2
      );
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞—É–∑—ã
   */
  private renderPause(): void {
    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    // –¢–µ–∫—Å—Ç –ø–∞—É–∑—ã
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = 'bold 48px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('–ü–ê–£–ó–ê', this.canvas.width / 2, this.canvas.height / 2);

    this.ctx.font = '24px Arial';
    this.ctx.fillText(
      '–ù–∞–∂–º–∏ –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è',
      this.canvas.width / 2,
      this.canvas.height / 2 + 50
    );
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
   */
  private renderLevelComplete(): void {
    if (!this.currentLevel) return;

    this.currentLevel.render(this.ctx);

    // –û–≤–µ—Ä–ª–µ–π
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    // –î–æ—Å–∫–∞ (—à–∫–æ–ª—å–Ω–∞—è –¥–æ—Å–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
    const boardWidth = this.canvas.width * 0.8;
    const boardHeight = this.canvas.height * 0.5;
    const boardX = (this.canvas.width - boardWidth) / 2;
    const boardY = (this.canvas.height - boardHeight) / 2;

    // –†–∏—Å—É–µ–º –¥–æ—Å–∫—É
    this.ctx.fillStyle = '#2D5016';
    this.ctx.fillRect(boardX, boardY, boardWidth, boardHeight);
    this.ctx.strokeStyle = '#8B4513';
    this.ctx.lineWidth = 8;
    this.ctx.strokeRect(boardX, boardY, boardWidth, boardHeight);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞–Ω–¥—ã
    const levelIndex = this.stateManager.getCurrentLevel();
    const pandaMessage = PandaMessages.getLevelMessage(levelIndex);

    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç "–º–µ–ª–æ–º" –Ω–∞ –¥–æ—Å–∫–µ
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = 'bold 36px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = pandaMessage.split('\n');
    const lineHeight = 50;
    const startY = this.canvas.height / 2 - ((lines.length - 1) * lineHeight) / 2;

    lines.forEach((line, index) => {
      this.ctx.fillText(line, this.canvas.width / 2, startY + index * lineHeight);
    });

    // –û—á–∫–∏ –≤–Ω–∏–∑—É –¥–æ—Å–∫–∏
    this.ctx.font = '28px Arial';
    this.ctx.fillStyle = '#FFD700';
    this.ctx.fillText(
      `–û—á–∫–∏: ${this.currentLevel.getScore()}`,
      this.canvas.width / 2,
      boardY + boardHeight - 40
    );
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
   */
  private renderLevelTransition(): void {
    // –û–≤–µ—Ä–ª–µ–π —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    const gradient = this.ctx.createRadialGradient(
      this.canvas.width / 2,
      this.canvas.height / 2,
      0,
      this.canvas.width / 2,
      this.canvas.height / 2,
      Math.max(this.canvas.width, this.canvas.height) / 2
    );
    gradient.addColorStop(0, 'rgba(0, 0, 0, 0.6)');
    gradient.addColorStop(1, 'rgba(0, 0, 0, 0.9)');

    this.ctx.fillStyle = gradient;
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
    const state = this.stateManager.getState();
    const nextLevelNumber = state.currentLevel + 1;

    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = `bold ${Math.max(24, this.canvas.width * 0.04)}px Arial`;
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';

    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.ctx.fillText(
      'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ',
      this.canvas.width / 2,
      this.canvas.height / 2 - 40
    );

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ
    this.ctx.font = `bold ${Math.max(20, this.canvas.width * 0.03)}px Arial`;
    this.ctx.fillStyle = '#FFD700';
    this.ctx.fillText(
      `–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é ${nextLevelNumber}...`,
      this.canvas.width / 2,
      this.canvas.height / 2 + 20
    );

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    setTimeout(() => {
      this.nextLevel();
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ game over
   */
  private renderGameOver(): void {
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = this.ctx.createLinearGradient(
      0,
      0,
      0,
      this.canvas.height
    );
    gradient.addColorStop(0, '#FFF0E0');
    gradient.addColorStop(1, '#FFB4A2');
    this.ctx.fillStyle = gradient;
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    const state = this.stateManager.getState();
    const isWin = state.currentLevel >= state.totalLevels;

    // –î–æ—Å–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const boardWidth = this.canvas.width * 0.85;
    const boardHeight = this.canvas.height * 0.6;
    const boardX = (this.canvas.width - boardWidth) / 2;
    const boardY = (this.canvas.height - boardHeight) / 2;

    // –†–∏—Å—É–µ–º –¥–æ—Å–∫—É
    this.ctx.fillStyle = '#2D5016';
    this.ctx.fillRect(boardX, boardY, boardWidth, boardHeight);
    this.ctx.strokeStyle = '#8B4513';
    this.ctx.lineWidth = 10;
    this.ctx.strokeRect(boardX, boardY, boardWidth, boardHeight);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞–Ω–¥—ã
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';

    if (isWin) {
      // –ü–æ–±–µ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const victoryMessage = PandaMessages.getVictoryMessage();
      const lines = victoryMessage.split('\n');
      this.ctx.font = 'bold 42px Arial';
      const lineHeight = 60;
      const startY = this.canvas.height / 2 - ((lines.length - 1) * lineHeight) / 2 - 30;

      lines.forEach((line, index) => {
        this.ctx.fillText(line, this.canvas.width / 2, startY + index * lineHeight);
      });
    } else {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      const encouragement = PandaMessages.getEncouragementMessage();
      this.ctx.font = 'bold 40px Arial';
      this.ctx.fillText(encouragement, this.canvas.width / 2, this.canvas.height / 2 - 40);
    }

    // –ò—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏
    this.ctx.font = '32px Arial';
    this.ctx.fillStyle = '#FFD700';
    this.ctx.fillText(
      `–í—Å–µ–≥–æ –æ—á–∫–æ–≤: ${state.totalScore}`,
      this.canvas.width / 2,
      boardY + boardHeight - 60
    );

    // –†–µ–∫–æ—Ä–¥
    if (state.totalScore >= state.highScore && state.highScore > 0) {
      this.ctx.fillStyle = '#FFD700';
      this.ctx.font = 'bold 24px Arial';
      this.ctx.fillText(
        '‚≠ê –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! ‚≠ê',
        this.canvas.width / 2,
        boardY + boardHeight - 20
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   */
  getState(): GameStateManager {
    return this.stateManager;
  }
}

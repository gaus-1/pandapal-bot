import { GameObject } from './GameObject';
import { Easing } from '../utils/Easing';

/**
 * –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ (–∏–≥—Ä–æ–∫)
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –¥–æ—Å–∫–∏
 */
export class Paddle extends GameObject {
  private targetX: number;
  private readonly speed: number = 0.15; // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
  private animationTime: number = 0;

  constructor(x: number, y: number, width: number, height: number) {
    super(x, y, width, height);
    this.targetX = x;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
   */
  setTargetX(x: number, canvasWidth: number): void {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
    this.targetX = Math.max(
      0,
      Math.min(x - this.width / 2, canvasWidth - this.width)
    );
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–ª–∞–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
   */
  update(deltaTime: number): void {
    this.animationTime += deltaTime * 0.003; // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏

    // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const currentX = this._position.x;
    const diff = this.targetX - currentX;

    if (Math.abs(diff) > 0.5) {
      const newX = Easing.lerp(currentX, this.targetX, this.speed);
      this.setPosition(newX, this._position.y);
    } else {
      this.setPosition(this.targetX, this._position.y);
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –¥–æ—Å–∫–∏
   */
  render(ctx: CanvasRenderingContext2D): void {
    const { x, y, width, height } = this;

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≤—ã–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    console.log(`üéØ Paddle Render: x=${x}, y=${y}, width=${width}, height=${height}`);

    // –¢–µ–Ω—å –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
    ctx.shadowColor = 'rgba(0, 0, 0, 0.4)';
    ctx.shadowBlur = 12;
    ctx.shadowOffsetY = 6;

    // –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–æ—Å–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    const gradient = ctx.createLinearGradient(x, y, x, y + height);
    gradient.addColorStop(0, '#A0522D'); // SaddleBrown
    gradient.addColorStop(0.5, '#8B4513'); // SaddleBrown
    gradient.addColorStop(1, '#654321'); // Darker brown

    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.roundRect(x, y, width, height, height / 4);
    ctx.fill();

    // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetY = 0;

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
    ctx.fillStyle = 'rgba(101, 67, 33, 0.6)'; // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç–µ–º–Ω—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    const stripeHeight = height / 6;
    for (let i = 0; i < 3; i++) {
      const stripeY = y + i * stripeHeight * 2 + stripeHeight / 2;
      ctx.fillRect(x + width * 0.05, stripeY, width * 0.9, stripeHeight);
    }

    // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–ª–µ–ø–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    const rivetRadius = height * 0.2;
    const rivetY = y + height / 2;

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∑–∞–∫–ª–µ–ø–æ–∫
    const rivetGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, rivetRadius);
    rivetGradient.addColorStop(0, '#E8E8E8');
    rivetGradient.addColorStop(0.7, '#C0C0C0');
    rivetGradient.addColorStop(1, '#A0A0A0');

    // –õ–µ–≤–∞—è –∑–∞–∫–ª–µ–ø–∫–∞
    ctx.fillStyle = rivetGradient;
    ctx.beginPath();
    ctx.arc(x + rivetRadius, rivetY, rivetRadius, 0, Math.PI * 2);
    ctx.fill();

    // –ü—Ä–∞–≤–∞—è –∑–∞–∫–ª–µ–ø–∫–∞
    ctx.beginPath();
    ctx.arc(x + width - rivetRadius, rivetY, rivetRadius, 0, Math.PI * 2);
    ctx.fill();

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–∞–∫–ª–µ–ø–∫–∞
    ctx.beginPath();
    ctx.arc(x + width / 2, rivetY, rivetRadius * 0.9, 0, Math.PI * 2);
    ctx.fill();

    // –û–±–≤–æ–¥–∫–∞ –¥–æ—Å–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π
    ctx.strokeStyle = '#654321';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.roundRect(x, y, width, height, height / 4);
    ctx.stroke();

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: –Ø—Ä–∫–∞—è –∫—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    ctx.strokeStyle = '#FF0000';
    ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.rect(x - 2, y - 2, width + 4, height + 4);
    ctx.stroke();

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–≤–æ–¥–∫–∞ –¥–ª—è –≥–ª—É–±–∏–Ω—ã
    ctx.strokeStyle = 'rgba(139, 69, 19, 0.8)';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.roundRect(x + 1, y + 1, width - 2, height - 2, height / 4 - 1);
    ctx.stroke();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–∫–æ–∫–∞ –º—è—á–∞
   */
  getHitPosition(ballX: number): number {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç -1 –¥–æ 1 (—Ü–µ–Ω—Ç—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã = 0)
    const centerX = this.x + this.width / 2;
    const relativeX = ballX - centerX;
    return (relativeX / (this.width / 2)) * 0.8; // 0.8 –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–∞–∫—Å —É–≥–ª–∞
  }
}

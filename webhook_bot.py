"""
Webhook —Ä–µ–∂–∏–º –¥–ª—è PandaPal Bot - –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render.com.
–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç polling —Ä–µ–∂–∏–º–∞ (main.py), webhook –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é
–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —á–µ—Ä–µ–∑ HTTP endpoint.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ webhook:
- –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
- –ú–µ–Ω—å—à–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –°–æ–∑–¥–∞–Ω–∏–µ aiohttp –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Updates –æ—Ç Telegram
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
- Health check endpoint (/health) –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Render
- Graceful shutdown —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º webhook

–ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
- Google Gemini AI —Å —Ä–æ—Ç–∞—Ü–∏–µ–π 10 API –∫–ª—é—á–µ–π
- Sentry –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
- –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–º–µ–Ω pandapal.ru
"""

import asyncio
import re
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Update
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from loguru import logger

try:
    import sentry_sdk
    from sentry_sdk.integrations.asyncio import AsyncioIntegration
    from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

    SENTRY_AVAILABLE = True
except ImportError:
    SENTRY_AVAILABLE = False

from bot.config import settings
from bot.database import DatabaseService, init_db
from bot.handlers import routers

# –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–∑ –ª–æ–≥–æ–≤
emoji_pattern = re.compile(
    "["
    "\U0001F300-\U0001F9FF"
    "\U0001F600-\U0001F64F"
    "\U0001F680-\U0001F6FF"
    "\U00002600-\U000027BF"
    "\U0001F1E0-\U0001F1FF"
    "\U0001F900-\U0001F9FF"
    "\U0001FA70-\U0001FAFF"
    "]+",
    flags=re.UNICODE,
)


def format_for_console(record):
    """–£–¥–∞–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    record["message"] = emoji_pattern.sub("", record["message"])
    return True


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(
    sys.stdout,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>",
    level="INFO",
    filter=format_for_console,
)
logger.add(
    "logs/pandapal_{time:YYYY-MM-DD}.log",
    rotation="00:00",
    retention="30 days",
    compression="zip",
    level="DEBUG",
    encoding="utf-8",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
bot: Bot = None
dp: Dispatcher = None
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = None


async def on_startup(bot: Bot) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ PandaPal Bot (Webhook —Ä–µ–∂–∏–º)...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DSN –Ω–µ –ø—É—Å—Ç–æ–π)
        if SENTRY_AVAILABLE and settings.sentry_dsn:
            dsn_stripped = settings.sentry_dsn.strip()
            if dsn_stripped and len(dsn_stripped) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ DSN
                try:
                    sentry_sdk.init(
                        dsn=dsn_stripped,
                        integrations=[AsyncioIntegration(), SqlalchemyIntegration()],
                        traces_sample_rate=0.1,
                        profiles_sample_rate=0.1,
                        environment="production",
                    )
                    logger.info("‚úÖ Sentry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Sentry: {e}")
            else:
                logger.info("‚ÑπÔ∏è Sentry –æ—Ç–∫–ª—é—á–µ–Ω (–ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DSN)")
        else:
            logger.info("‚ÑπÔ∏è Sentry –æ—Ç–∫–ª—é—á–µ–Ω (–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ DSN –Ω–µ –∑–∞–¥–∞–Ω)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        db_service = DatabaseService()
        if not db_service.check_connection():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        try:
            init_db()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            sys.exit(1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Gemini API (SOLID —Ñ–∞—Å–∞–¥) - –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        try:
            from bot.services.ai_service_solid import get_ai_service

            ai_service = get_ai_service()
            logger.info(f"‚úÖ Gemini AI –≥–æ—Ç–æ–≤: {ai_service.get_model_info()}")
        except Exception as e:
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ AI –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            logger.warning(f"‚ö†Ô∏è Gemini AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
            logger.info("‚ÑπÔ∏è –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, AI –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")

        # –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç)
        try:
            from bot.services.simple_monitor import get_simple_monitor

            monitor = get_simple_monitor()
            asyncio.create_task(monitor.start_monitoring())
            logger.info("üõ°Ô∏è –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")

        # –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç)
        try:
            from bot.services.simple_engagement import get_simple_engagement

            engagement = get_simple_engagement(bot)
            asyncio.create_task(engagement.start())
            logger.info("‚è∞ –°–ª—É–∂–±–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                bot.set_webhook(
                    WEBHOOK_URL,
                    drop_pending_updates=True,
                    allowed_updates=dp.resolve_used_update_types(),
                ),
                timeout=30.0,  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
            )
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (30 —Å–µ–∫)")
            sys.exit(1)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            sys.exit(1)

        logger.success("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üîó Webhook URL: {WEBHOOK_URL}")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)


async def on_shutdown(bot: Bot) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    try:
        from bot.services.simple_engagement import get_simple_engagement

        engagement = get_simple_engagement(bot)
        await engagement.stop()
        logger.info("‚è∞ –°–ª—É–∂–±–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    try:
        from bot.services.simple_monitor import get_simple_monitor

        monitor = get_simple_monitor()
        await monitor.stop_monitoring()
        logger.info("üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    # –£–¥–∞–ª—è–µ–º webhook
    await bot.delete_webhook()
    logger.info("üîó Webhook —É–¥–∞–ª–µ–Ω")

    logger.success("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def create_app(webhook_url: str, webhook_path: str) -> web.Application:
    """
    –°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å webhook

    Args:
        webhook_url: –ü–æ–ª–Ω—ã–π URL –¥–ª—è webhook (https://your-domain.com/webhook)
        webhook_path: –ü—É—Ç—å –¥–ª—è webhook (/webhook)
    """
    global bot, dp, WEBHOOK_URL

    WEBHOOK_URL = webhook_url

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(
        token=settings.telegram_bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    for router in routers:
        dp.include_router(router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup/shutdown —Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path=webhook_path)

    # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
    async def health_check(request):
        return web.json_response({"status": "ok", "mode": "webhook", "webhook_url": WEBHOOK_URL})

    app.router.add_get("/health", health_check)
    app.router.add_get("/", health_check)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å webhook
    setup_application(app, dp, bot=bot)

    return app


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook –±–æ—Ç–∞"""
    import os

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    webhook_domain = os.getenv("WEBHOOK_DOMAIN", "pandapal-bot.onrender.com")
    webhook_path = os.getenv("WEBHOOK_PATH", WEBHOOK_PATH)
    port = int(os.getenv("PORT", 8000))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è webhook
    webhook_url = f"https://{webhook_domain}{webhook_path}"

    logger.info(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –¥–æ–º–µ–Ω–∞: {webhook_domain}")
    logger.info(f"üîó Webhook URL: {webhook_url}")
    logger.info(f"üö™ –ü–æ—Ä—Ç: {port}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_app(webhook_url, webhook_path)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()

    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    logger.success(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook")

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await runner.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ PandaPal Telegram Bot
Entry point –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@module main
"""

import asyncio
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from loguru import logger

from bot.config import settings
from bot.database import init_db, DatabaseService
from bot.handlers import routers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()  # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π handler
logger.add(
    sys.stdout,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>",
    level=settings.log_level,
    colorize=True
)
logger.add(
    "logs/pandapal_{time:YYYY-MM-DD}.log",
    rotation="00:00",  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    retention="30 days",  # –•—Ä–∞–Ω–∏–º 30 –¥–Ω–µ–π
    level="INFO"
)


async def on_startup():
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ PandaPal Bot...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if not DatabaseService.check_connection():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try:
        init_db()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Gemini API
    try:
        from bot.services.ai_service import GeminiAIService
        ai_service = GeminiAIService()
        logger.info(f"‚úÖ Gemini AI –≥–æ—Ç–æ–≤: {ai_service.get_model_info()}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        sys.exit(1)
    
    logger.success("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


async def on_shutdown():
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    Cleanup —Ä–µ—Å—É—Ä—Å–æ–≤
    """
    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    logger.success("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Bot, Dispatcher –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=settings.telegram_bot_token,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML  # HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ä–æ—É—Ç–µ—Ä–æ–≤)
    for router in routers:
        dp.include_router(router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è startup/shutdown —Ö—É–∫–æ–≤
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –±—ã–ª) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    
    logger.info("üì° –ó–∞–ø—É—Å–∫ polling...")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ python main.py
    """
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

